#!/usr/bin/env python3
"""
–î–µ—Ç–µ–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç API –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã
"""

import requests
import time
import urllib3
from datetime import datetime
import threading
import json

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "https://cleverdriver.ru"

class StatusMonitor:
    def __init__(self):
        self.api_history = []
        self.page_history = []
        self.change_detected = False
        self.monitoring = False
        
    def log(self, message, level="INFO", source="MAIN"):
        timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
        print(f"[{timestamp}] {source} {level}: {message}")
        
    def get_api_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API"""
        try:
            response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=5)
            if response.status_code == 200:
                data = response.json()
                return data.get('tracking_active', None)
            return None
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ API: {e}", "ERROR", "API")
            return None
    
    def get_page_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = requests.get(BASE_URL, verify=False, timeout=5)
            if response.status_code == 200:
                content = response.text
                if "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>–í–∫–ª—é—á–µ–Ω–æ</b>" in content:
                    return True
                elif "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>–í—ã–∫–ª—é—á–µ–Ω–æ</b>" in content:
                    return False
            return None
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}", "ERROR", "PAGE")
            return None
    
    def simulate_page_reload(self):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            requests.get(BASE_URL, verify=False, timeout=5)  # HTML
            requests.get(f"{BASE_URL}/static/main.js", verify=False, timeout=5)  # JS
            requests.get(f"{BASE_URL}/api/status", verify=False, timeout=5)  # API
            return True
        except:
            return False
    
    def continuous_api_monitor(self):
        """–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        self.log("–ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ API...", "INFO", "API_MON")
        previous_status = None
        
        while self.monitoring:
            current_status = self.get_api_status()
            
            if current_status is not None:
                self.api_history.append({
                    'timestamp': datetime.now(),
                    'status': current_status
                })
                
                if previous_status is not None and previous_status != current_status:
                    self.log(f"üö® –ò–ó–ú–ï–ù–ï–ù–ò–ï API –°–¢–ê–¢–£–°–ê: {previous_status} ‚Üí {current_status}", "CRITICAL", "API_MON")
                    self.change_detected = True
                
                previous_status = current_status
            
            time.sleep(0.5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
    
    def test_reload_impact(self):
        """–¢–µ—Å—Ç –≤–ª–∏—è–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        self.log("üß™ –ó–ê–ü–£–°–ö –î–ï–¢–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ò", "INFO")
        self.log("=" * 70)
        
        for test_num in range(1, 8):
            self.log(f"\nüìã –¢–ï–°–¢ #{test_num}/7", "INFO")
            self.log("-" * 50)
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –î–û
            status_before_api = self.get_api_status()
            status_before_page = self.get_page_status()
            
            self.log(f"–î–û –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ - API: {status_before_api}, –°—Ç—Ä–∞–Ω–∏—Ü–∞: {status_before_page}")
            
            # –®–∞–≥ 2: –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
            self.log("üîÑ –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            time_start = time.time()
            reload_success = self.simulate_page_reload()
            time_reload = time.time() - time_start
            
            self.log(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {time_reload:.3f}—Å, —É—Å–ø–µ—Ö: {reload_success}")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            time.sleep(0.3)
            
            # –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ü–û–°–õ–ï
            status_after_api = self.get_api_status()
            status_after_page = self.get_page_status()
            
            self.log(f"–ü–û–°–õ–ï –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ - API: {status_after_api}, –°—Ç—Ä–∞–Ω–∏—Ü–∞: {status_after_page}")
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            api_changed = status_before_api != status_after_api
            page_changed = status_before_page != status_after_page
            
            if api_changed:
                self.log("üö® API –°–¢–ê–¢–£–° –ò–ó–ú–ï–ù–ò–õ–°–Ø!", "CRITICAL")
                self.change_detected = True
            
            if page_changed:
                self.log("üö® –°–¢–†–ê–ù–ò–¶–ê –°–¢–ê–¢–£–° –ò–ó–ú–ï–ù–ò–õ–°–Ø!", "CRITICAL")
            
            if not api_changed and not page_changed:
                self.log("‚úÖ –°—Ç–∞—Ç—É—Å—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã", "SUCCESS")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            time.sleep(2)
            status_delayed_api = self.get_api_status()
            
            if status_after_api != status_delayed_api:
                self.log(f"üö® –û–¢–õ–û–ñ–ï–ù–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï API: {status_after_api} ‚Üí {status_delayed_api}", "CRITICAL")
                self.change_detected = True
            
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    def analyze_timing_patterns(self):
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        self.log("\nüîç –ê–ù–ê–õ–ò–ó –ü–ê–¢–¢–ï–†–ù–û–í –í–†–ï–ú–ï–ù–ò", "INFO")
        self.log("=" * 50)
        
        if len(self.api_history) < 2:
            self.log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        changes = []
        for i in range(1, len(self.api_history)):
            prev = self.api_history[i-1]
            curr = self.api_history[i]
            
            if prev['status'] != curr['status']:
                time_diff = (curr['timestamp'] - prev['timestamp']).total_seconds()
                changes.append({
                    'from': prev['status'],
                    'to': curr['status'],
                    'time_diff': time_diff,
                    'timestamp': curr['timestamp']
                })
        
        if changes:
            self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π:")
            for i, change in enumerate(changes):
                self.log(f"  {i+1}. {change['from']} ‚Üí {change['to']} "
                        f"—á–µ—Ä–µ–∑ {change['time_diff']:.3f}—Å –≤ {change['timestamp'].strftime('%H:%M:%S.%f')[:-3]}")
        else:
            self.log("–ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    def run_comprehensive_test(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.log("üîß –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –°–¢–ê–¢–£–°–ê", "INFO")
        self.log("=" * 70)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ñ–æ–Ω–µ
        self.monitoring = True
        api_thread = threading.Thread(target=self.continuous_api_monitor, daemon=True)
        api_thread.start()
        
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_reload_impact()
        
        # –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        time.sleep(5)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitoring = False
        time.sleep(1)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.analyze_timing_patterns()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.log("\n" + "=" * 70)
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        self.log("=" * 70)
        
        if self.change_detected:
            self.log("üö® –ü–†–û–ë–õ–ï–ú–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—è–µ—Ç—Å—è!", "CRITICAL")
            self.log("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            self.log("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            self.log("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –º–æ–º–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            self.log("   3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
            self.log("   4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        else:
            self.log("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –ù–ï –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–µ", "SUCCESS")
            self.log("üí° –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:")
            self.log("   - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
            self.log("   - –í—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫/–Ω–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞")
            self.log("   - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

def main():
    monitor = StatusMonitor()
    monitor.run_comprehensive_test()

if __name__ == "__main__":
    main() 