#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å–∞–π—Ç–∞ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–Ω—ã—Ö –±–∞–∑–∞—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
"""

import requests
import json
import time
import hashlib
import os
from datetime import datetime
from urllib.parse import urlparse

class ReputationChecker:
    def __init__(self, target_url="https://cleverdriver.ru"):
        self.target_url = target_url
        self.results = {}
        self.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
    def check_virustotal(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ VirusTotal API (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)"""
        try:
            # –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –Ω—É–∂–µ–Ω –∫–ª—é—á
            # api_key = "YOUR_VIRUSTOTAL_API_KEY"
            # headers = {"x-apikey": api_key}
            # response = requests.get(f"https://www.virustotal.com/vtapi/v2/url/report", 
            #                        params={"apikey": api_key, "resource": self.target_url})
            
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ VirusTotal: {self.target_url}")
            print("   –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://www.virustotal.com/gui/url/" + self.target_url)
            
            self.results['virustotal'] = {
                'status': 'manual_check_required',
                'url': f"https://www.virustotal.com/gui/url/{self.target_url}",
                'timestamp': self.timestamp
            }
            
        except Exception as e:
            self.results['virustotal'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def check_urlvoid(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ URLVoid"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ URLVoid: {self.target_url}")
            
            # URLVoid –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            urlvoid_url = f"https://www.urlvoid.com/scan/{self.target_url.replace('https://', '').replace('http://', '')}"
            
            self.results['urlvoid'] = {
                'status': 'manual_check_required',
                'url': urlvoid_url,
                'timestamp': self.timestamp
            }
            
        except Exception as e:
            self.results['urlvoid'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def check_sucuri(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Sucuri SiteCheck"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Sucuri SiteCheck: {self.target_url}")
            
            sucuri_url = f"https://sitecheck.sucuri.net/results/{self.target_url.replace('https://', '').replace('http://', '')}"
            
            self.results['sucuri'] = {
                'status': 'manual_check_required',
                'url': sucuri_url,
                'timestamp': self.timestamp
            }
            
        except Exception as e:
            self.results['sucuri'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def check_drweb(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Dr.Web (–∏–º–∏—Ç–∞—Ü–∏—è)"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Dr.Web: {self.target_url}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Dr.Web
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö API –∏–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            
            self.results['drweb'] = {
                'status': 'manual_check_required',
                'url': f"https://www.drweb.com/support/",
                'timestamp': self.timestamp,
                'note': '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ Dr.Web –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞'
            }
            
        except Exception as e:
            self.results['drweb'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def check_ssl_certificate(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {self.target_url}")
            
            response = requests.get(self.target_url, timeout=10, verify=True)
            
            if response.status_code == 200:
                self.results['ssl_certificate'] = {
                    'status': 'valid',
                    'https_enabled': True,
                    'status_code': response.status_code,
                    'timestamp': self.timestamp
                }
            else:
                self.results['ssl_certificate'] = {
                    'status': 'warning',
                    'https_enabled': True,
                    'status_code': response.status_code,
                    'timestamp': self.timestamp
                }
                
        except Exception as e:
            self.results['ssl_certificate'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def check_security_headers(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {self.target_url}")
            
            response = requests.get(self.target_url, timeout=10)
            headers = response.headers
            
            security_headers = {
                'Content-Security-Policy': headers.get('Content-Security-Policy'),
                'X-Content-Type-Options': headers.get('X-Content-Type-Options'),
                'X-Frame-Options': headers.get('X-Frame-Options'),
                'X-XSS-Protection': headers.get('X-XSS-Protection'),
                'Strict-Transport-Security': headers.get('Strict-Transport-Security'),
                'Referrer-Policy': headers.get('Referrer-Policy')
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            installed_headers = sum(1 for value in security_headers.values() if value is not None)
            
            self.results['security_headers'] = {
                'status': 'good' if installed_headers >= 4 else 'warning',
                'headers_found': installed_headers,
                'total_headers': len(security_headers),
                'headers': security_headers,
                'timestamp': self.timestamp
            }
            
        except Exception as e:
            self.results['security_headers'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def check_file_integrity(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤: {self.target_url}")
            
            files_to_check = [
                '/static/theme-manager.js',
                '/'
            ]
            
            file_hashes = {}
            
            for file_path in files_to_check:
                try:
                    url = self.target_url + file_path
                    response = requests.get(url, timeout=10)
                    
                    if response.status_code == 200:
                        content = response.content
                        file_hash = hashlib.md5(content).hexdigest()
                        file_hashes[file_path] = {
                            'status': 'ok',
                            'md5': file_hash,
                            'size': len(content)
                        }
                    else:
                        file_hashes[file_path] = {
                            'status': 'error',
                            'error': f'HTTP {response.status_code}'
                        }
                        
                except Exception as e:
                    file_hashes[file_path] = {
                        'status': 'error',
                        'error': str(e)
                    }
            
            self.results['file_integrity'] = {
                'status': 'good' if all(f.get('status') == 'ok' for f in file_hashes.values()) else 'warning',
                'files': file_hashes,
                'timestamp': self.timestamp
            }
            
        except Exception as e:
            self.results['file_integrity'] = {
                'status': 'error',
                'error': str(e),
                'timestamp': self.timestamp
            }
    
    def run_all_checks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —Å–∞–π—Ç–∞: {self.target_url}")
        print(f"‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.timestamp}")
        print("-" * 50)
        
        self.check_virustotal()
        self.check_urlvoid()
        self.check_sucuri()
        self.check_drweb()
        self.check_ssl_certificate()
        self.check_security_headers()
        self.check_file_integrity()
        
        print("-" * 50)
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        return self.results
    
    def save_results(self, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        if filename is None:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"reputation_check_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return filename
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\nüìä –ö–†–ê–¢–ö–ò–ô –û–¢–ß–ï–¢:")
        print("=" * 30)
        
        for service, result in self.results.items():
            status = result.get('status', 'unknown')
            if status == 'good':
                emoji = "‚úÖ"
            elif status == 'warning':
                emoji = "‚ö†Ô∏è"
            elif status == 'error':
                emoji = "‚ùå"
            else:
                emoji = "üîç"
            
            print(f"{emoji} {service.upper()}: {status}")
            
            if 'url' in result:
                print(f"   üîó {result['url']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    checker = ReputationChecker()
    results = checker.run_all_checks()
    checker.save_results()
    checker.print_summary()
    
    print(f"\nüìù –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Dr.Web –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print(f"   üîó https://www.drweb.com/support/")
    print(f"   üìß virus@drweb.com")
    print(f"   üìû +7 (495) 105-94-00")

if __name__ == "__main__":
    main()
