#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –Ω–æ–≤—É—é —Å —Ä–æ–ª—è–º–∏
"""

import sqlite3
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'bot'))

def migrate_database():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞ –Ω–æ–≤—É—é"""
    try:
        conn = sqlite3.connect('driver.db')
        cursor = conn.cursor()
        
        print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        column_names = [col[1] for col in columns]
        
        print(f"üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(column_names)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å
        if 'role' in column_names and 'login' in column_names and 'password_hash' in column_names:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
            return
        
        print("üîß –í—ã–ø–æ–ª–Ω—è—é –º–∏–≥—Ä–∞—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        cursor.execute("CREATE TABLE users_backup AS SELECT * FROM users")
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Ç–∞–±–ª–∏—Ü—ã users")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT * FROM users")
        old_data = cursor.fetchall()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if 'role' in column_names:
            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –µ—Å—Ç—å role, –Ω–æ –Ω–µ—Ç login/password_hash
            print("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–µ—Å—Ç—å role, –Ω–µ—Ç login)")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("DROP TABLE users")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cursor.execute('''
                CREATE TABLE users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id BIGINT UNIQUE,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    login TEXT,
                    password_hash TEXT,
                    auth_type TEXT DEFAULT 'telegram',
                    role TEXT DEFAULT NULL,
                    buttons TEXT DEFAULT NULL,
                    work_latitude REAL,
                    work_longitude REAL,
                    work_radius INTEGER DEFAULT 100,
                    subscription_status TEXT DEFAULT 'free',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP
                )
            ''')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ users")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            for row in old_data:
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (13 –∫–æ–ª–æ–Ω–æ–∫)
                (user_id, telegram_id, username, first_name, last_name, 
                 role, buttons, work_latitude, work_longitude, work_radius, 
                 subscription_status, created_at, last_login) = row
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute('''
                    INSERT INTO users (
                        id, telegram_id, username, first_name, last_name,
                        login, password_hash, auth_type, role, buttons,
                        work_latitude, work_longitude, work_radius,
                        subscription_status, created_at, last_login
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_id, telegram_id, username, first_name, last_name,
                    None, None, 'telegram', role, buttons,
                    work_latitude, work_longitude, work_radius,
                    subscription_status, created_at, last_login
                ))
        else:
            # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –Ω–µ—Ç role, –µ—Å—Ç—å recipient_telegram_id
            print("üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–Ω–µ—Ç role)")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
            cursor.execute("DROP TABLE users")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cursor.execute('''
                CREATE TABLE users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id BIGINT UNIQUE,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    login TEXT,
                    password_hash TEXT,
                    auth_type TEXT DEFAULT 'telegram',
                    role TEXT DEFAULT NULL,
                    buttons TEXT DEFAULT NULL,
                    work_latitude REAL,
                    work_longitude REAL,
                    work_radius INTEGER DEFAULT 100,
                    subscription_status TEXT DEFAULT 'free',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_login TIMESTAMP
                )
            ''')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ users")
            
            # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            for row in old_data:
                # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (15 –∫–æ–ª–æ–Ω–æ–∫)
                (user_id, telegram_id, username, first_name, last_name, 
                 button_name_1, button_name_2, buttons, work_latitude, 
                 work_longitude, work_radius, recipient_telegram_id, 
                 subscription_status, created_at, last_login) = row
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if recipient_telegram_id:
                    # –ï—Å–ª–∏ –±—ã–ª –ø–æ–ª—É—á–∞—Ç–µ–ª—å, —Ç–æ —ç—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å
                    role = 'driver'
                else:
                    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Ç–æ–∂–µ –≤–æ–¥–∏—Ç–µ–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                    role = 'driver'
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
                if buttons:
                    buttons_json = buttons
                else:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª–µ–π
                    button_list = []
                    if button_name_1:
                        button_list.append(button_name_1)
                    if button_name_2:
                        button_list.append(button_name_2)
                    if not button_list:
                        button_list = ['üìç –ï–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É', 'üöó –ü–æ–¥—ä–µ–∑–∂–∞—é –∫ –¥–æ–º—É']
                    import json
                    buttons_json = json.dumps(button_list)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                cursor.execute('''
                    INSERT INTO users (
                        id, telegram_id, username, first_name, last_name,
                        login, password_hash, auth_type, role, buttons,
                        work_latitude, work_longitude, work_radius,
                        subscription_status, created_at, last_login
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_id, telegram_id, username, first_name, last_name,
                    None, None, 'telegram', role, buttons_json,
                    work_latitude, work_longitude, work_radius,
                    subscription_status, created_at, last_login
                ))
        
        print(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(old_data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("SELECT id, telegram_id, first_name, role FROM users")
        migrated_users = cursor.fetchall()
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:")
        for user in migrated_users:
            user_id, telegram_id, first_name, role = user
            print(f"   ID {user_id}: {first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (Telegram: {telegram_id}, –†–æ–ª—å: {role})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫—Ä–∏–ø—Ç make_admin.py –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        try:
            if 'users_backup' in [col[1] for col in cursor.execute("SELECT name FROM sqlite_master WHERE type='table'").fetchall()]:
                cursor.execute("DROP TABLE users")
                cursor.execute("ALTER TABLE users_backup RENAME TO users")
                conn.commit()
                print("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è")
        except:
            pass

def force_migrate():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–π –ë–î"""
    try:
        print("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        if os.path.exists('driver.db'):
            import shutil
            shutil.copy('driver.db', 'driver_backup.db')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è driver_backup.db")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î
        if os.path.exists('driver.db'):
            os.remove('driver.db')
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î
        conn = sqlite3.connect('driver.db')
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id BIGINT UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                login TEXT,
                password_hash TEXT,
                auth_type TEXT DEFAULT 'telegram',
                role TEXT DEFAULT NULL,
                buttons TEXT DEFAULT NULL,
                work_latitude REAL,
                work_longitude REAL,
                work_radius INTEGER DEFAULT 100,
                subscription_status TEXT DEFAULT 'free',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_login TIMESTAMP
            )
        ''')
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

def main():
    if len(sys.argv) > 1 and sys.argv[1] == '--force':
        force_migrate()
    else:
        migrate_database()

if __name__ == "__main__":
    main() 