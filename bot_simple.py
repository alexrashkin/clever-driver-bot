import asyncio
import logging
import sqlite3
import math
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7824059826:AAEQx8WETTaAE4iU-tC58fT9ODkotjo-Enc"
WORK_LATITUDE = 55.676803
WORK_LONGITUDE = 37.52351
WORK_RADIUS = 100  # –º–µ—Ç—Ä–æ–≤
DRIVER_CHAT_ID = 946872573
NOTIFICATION_CHAT_ID = 1623256768

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    filename='driver-bot.log'
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS tracking (id INTEGER PRIMARY KEY, active BOOLEAN DEFAULT 0)')
    c.execute('INSERT OR IGNORE INTO tracking (id, active) VALUES (1, 0)')
    conn.commit()
    conn.close()

def get_tracking_status():
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('SELECT active FROM tracking WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return bool(result[0]) if result else False

def set_tracking_status(active):
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('UPDATE tracking SET active = ? WHERE id = 1', (1 if active else 0,))
    conn.commit()
    conn.close()

def save_location(lat, lon):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ –±–∞–∑—É"""
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('DELETE FROM last_location WHERE id = 1')
    c.execute('INSERT INTO last_location (id, latitude, longitude, timestamp) VALUES (1, ?, ?, ?)',
              (lat, lon, datetime.now().isoformat()))
    conn.commit()
    conn.close()

# –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad, lat2_rad = math.radians(lat1), math.radians(lat2)
    delta_lat, delta_lon = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(delta_lat/2)**2 + math.cos(lat1_rad)*math.cos(lat2_rad)*math.sin(delta_lon/2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

def is_at_work(lat, lon):
    return calculate_distance(lat, lon, WORK_LATITUDE, WORK_LONGITUDE) <= WORK_RADIUS

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    keyboard = [
        [KeyboardButton("üîÑ –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")],
        [KeyboardButton("‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")],
        [KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await update.message.reply_text(
        "üöó –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–í–∫–ª—é—á–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ, –∏ —è –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=create_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/track - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
        "/notify - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏\n"
        "/status - –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
    )

async def track_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /track"""
    current = get_tracking_status()
    new_status = not current
    set_tracking_status(new_status)
    
    status_text = "üîÑ –í–∫–ª—é—á–µ–Ω–æ" if new_status else "‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–æ"
    await update.message.reply_text(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {status_text}")
    
    if new_status:
        await update.message.reply_text(
            "üìç –î–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º' –≤ –º–µ–Ω—é Telegram."
        )

async def notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /notify - —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    await send_notification(context)
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
    tracking = get_tracking_status()
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('SELECT latitude, longitude, timestamp FROM last_location WHERE id = 1')
    result = c.fetchone()
    conn.close()
    
    if result:
        lat, lon, timestamp = result
        distance = calculate_distance(lat, lon, WORK_LATITUDE, WORK_LONGITUDE)
        at_work = is_at_work(lat, lon)
        
        status = "üìç –ù–∞ —Ä–∞–±–æ—Ç–µ" if at_work else "üöó –í –ø—É—Ç–∏"
        distance_text = f"{int(distance)} –º" if distance < 1000 else f"{distance/1000:.1f} –∫–º"
        
        message = f"üìä –°—Ç–∞—Ç—É—Å:\n"
        message += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'üîÑ –í–∫–ª—é—á–µ–Ω–æ' if tracking else '‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        message += f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {status}\n"
        message += f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã: {distance_text}\n"
        message += f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {timestamp.split('T')[1][:5] if timestamp else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    else:
        message = f"üìä –°—Ç–∞—Ç—É—Å:\n"
        message += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'üîÑ –í–∫–ª—é—á–µ–Ω–æ' if tracking else '‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–æ'}\n"
        message += f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ\n"
        message += f"–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
    
    await update.message.reply_text(message)

async def send_notification(context):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    current_hour = datetime.now().hour
    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    message = f"{greeting}! –£ –ø–æ–¥—ä–µ–∑–¥–∞, –æ–∂–∏–¥–∞—é"
    
    try:
        await context.bot.send_message(chat_id=NOTIFICATION_CHAT_ID, text=message)
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    location = update.message.location
    lat, lon = location.latitude, location.longitude
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    save_location(lat, lon)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    distance = calculate_distance(lat, lon, WORK_LATITUDE, WORK_LONGITUDE)
    at_work = is_at_work(lat, lon)
    tracking = get_tracking_status()
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—é
    status = "üìç –ù–∞ —Ä–∞–±–æ—Ç–µ" if at_work else "üöó –í –ø—É—Ç–∏"
    distance_text = f"{int(distance)} –º" if distance < 1000 else f"{distance/1000:.1f} –∫–º"
    
    message = f"{status}\n"
    message += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}\n"
    message += f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã: {distance_text}\n"
    message += f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'üîÑ –í–∫–ª—é—á–µ–Ω–æ' if tracking else '‚èπÔ∏è –í—ã–∫–ª—é—á–µ–Ω–æ'}"
    
    await update.message.reply_text(message)
    
    # –ï—Å–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if at_work and tracking:
        await send_notification(context)
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == "üîÑ –í–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ":
        set_tracking_status(True)
        await update.message.reply_text(
            "üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ!\n\n"
            "üìç –î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º' –≤ –º–µ–Ω—é Telegram."
        )
        
    elif text == "‚èπÔ∏è –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ":
        set_tracking_status(False)
        await update.message.reply_text("‚èπÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
        
    elif text == "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏":
        await send_notification(context)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
            "–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("track", track_command))
    application.add_handler(CommandHandler("notify", notify_command))
    application.add_handler(CommandHandler("status", status_command))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_error_handler(error_handler)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await application.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    asyncio.run(main()) 