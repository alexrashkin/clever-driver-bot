#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import sqlite3
import os

def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò—â–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    possible_paths = [
        "bot/driver.db",
        "driver.db", 
        "web/driver.db",
        "../bot/driver.db"
    ]
    
    db_path = None
    for path in possible_paths:
        if os.path.exists(path):
            db_path = path
            break
    
    if not db_path:
        print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ò—Å–∫–∞–ª–∏ –≤:")
        for path in possible_paths:
            print(f"  - {path}")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_path}")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–Ω–∫–∞—Ö
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã users:")
        for col in columns:
            print(f"  - {col[1]} ({col[2]}) - {'NOT NULL' if col[3] else 'NULL'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –∏ phone
        email_exists = any(col[1] == 'email' for col in columns)
        phone_exists = any(col[1] == 'phone' for col in columns)
        
        print(f"\n‚úÖ Email –∫–æ–ª–æ–Ω–∫–∞: {'–ï—Å—Ç—å' if email_exists else '–ù–ï–¢'}")
        print(f"‚úÖ Phone –∫–æ–ª–æ–Ω–∫–∞: {'–ï—Å—Ç—å' if phone_exists else '–ù–ï–¢'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        try:
            cursor.execute("SELECT id, login, email, phone, role, created_at FROM users ORDER BY id")
            users = cursor.fetchall()
            
            print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ ({len(users)}):")
            for user in users:
                user_id, login, email, phone, role, created_at = user
                print(f"  ID: {user_id}, Login: {login}, Email: {email or '–ù–ï–¢'}, Role: {role}")
        except sqlite3.OperationalError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ email –∏ phone
            cursor.execute("SELECT id, login, role, created_at FROM users ORDER BY id")
            users = cursor.fetchall()
            
            print(f"\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ ({len(users)}):")
            for user in users:
                user_id, login, role, created_at = user
                print(f"  ID: {user_id}, Login: {login}, Role: {role}")
        
        conn.close()
        
        return email_exists, phone_exists
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False, False

def add_email_column():
    """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É email –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
    print("\nüîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ email...")
    
    possible_paths = [
        "bot/driver.db",
        "driver.db", 
        "web/driver.db",
        "../bot/driver.db"
    ]
    
    db_path = None
    for path in possible_paths:
        if os.path.exists(path):
            db_path = path
            break
    
    if not db_path:
        print("‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ email
        cursor.execute("PRAGMA table_info(users)")
        columns = cursor.fetchall()
        email_exists = any(col[1] == 'email' for col in columns)
        
        if not email_exists:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É email...")
            cursor.execute("ALTER TABLE users ADD COLUMN email TEXT")
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ email –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ phone
        phone_exists = any(col[1] == 'phone' for col in columns)
        
        if not phone_exists:
            print("‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É phone...")
            cursor.execute("ALTER TABLE users ADD COLUMN phone TEXT")
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ phone –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        else:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ phone —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    email_exists, phone_exists = check_database()
    
    # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if not email_exists or not phone_exists:
        print("\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        add_email_column()
        
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞...")
        check_database()
    else:
        print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")
    
    print("\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 