from flask import Flask, render_template, jsonify, request, redirect, url_for, send_from_directory
import sqlite3
import json
from datetime import datetime
import os
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7824059826:AAEQx8WETTaAE4iU-tC58fT9ODkotjo-Enc"
NOTIFICATION_CHAT_ID = 1623256768
WORK_LATITUDE = 55.676803
WORK_LONGITUDE = 37.52351
WORK_RADIUS = 100  # –º–µ—Ç—Ä–æ–≤
NOTIFICATION_COOLDOWN = 1800  # —Å–µ–∫—É–Ω–¥ (30 –º–∏–Ω—É—Ç)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
last_notification_sent = None

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('driver_tracker.db')
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    c.execute('''
        CREATE TABLE IF NOT EXISTS tracking_status (
            id INTEGER PRIMARY KEY,
            is_active BOOLEAN DEFAULT FALSE,
            last_notification TIMESTAMP
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    c.execute('''
        CREATE TABLE IF NOT EXISTS locations (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            latitude REAL,
            longitude REAL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    c.execute('INSERT OR IGNORE INTO tracking_status (id, is_active) VALUES (1, FALSE)')
    
    conn.commit()
    conn.close()

def get_tracking_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('driver_tracker.db')
    c = conn.cursor()
    c.execute('SELECT is_active FROM tracking_status WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return bool(result[0]) if result else False

def set_tracking_status(active):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('driver_tracker.db')
    c = conn.cursor()
    c.execute('UPDATE tracking_status SET is_active = ? WHERE id = 1', (1 if active else 0,))
    conn.commit()
    conn.close()

def save_location(lat, lon):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    conn = sqlite3.connect('driver_tracker.db')
    c = conn.cursor()
    c.execute('INSERT INTO locations (latitude, longitude) VALUES (?, ?)', (lat, lon))
    conn.commit()
    conn.close()

def get_last_location():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    conn = sqlite3.connect('driver_tracker.db')
    c = conn.cursor()
    c.execute('SELECT latitude, longitude, timestamp FROM locations ORDER BY timestamp DESC LIMIT 1')
    result = c.fetchone()
    conn.close()
    return result if result else (None, None, None)

def get_last_notification_time():
    conn = sqlite3.connect('driver_tracker.db')
    cursor = conn.cursor()
    cursor.execute('SELECT last_notification FROM tracking_status WHERE id = 1')
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def update_notification_time():
    conn = sqlite3.connect('driver_tracker.db')
    cursor = conn.cursor()
    cursor.execute('UPDATE tracking_status SET last_notification = CURRENT_TIMESTAMP WHERE id = 1')
    conn.commit()
    conn.close()

def calculate_distance(lat1, lon1, lat2, lon2):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
    import math
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad, lat2_rad = math.radians(lat1), math.radians(lat2)
    delta_lat, delta_lon = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(delta_lat/2)**2 + math.cos(lat1_rad)*math.cos(lat2_rad)*math.sin(delta_lon/2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

def is_at_work(lat, lon):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–µ"""
    if lat is None or lon is None:
        return False
    return calculate_distance(lat, lon, WORK_LATITUDE, WORK_LONGITUDE) <= WORK_RADIUS

def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        data = {
            "chat_id": NOTIFICATION_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        response = requests.post(url, json=data)
        if response.status_code == 200:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return False

def reset_notification_state():
    """–°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global last_notification_sent
    last_notification_sent = None
    logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–æ")

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    tracking = get_tracking_status()
    lat, lon, timestamp = get_last_location()
    
    status = "üìç –ù–∞ —Ä–∞–±–æ—Ç–µ" if is_at_work(lat, lon) else "üöó –í –ø—É—Ç–∏"
    distance = calculate_distance(lat or 0, lon or 0, WORK_LATITUDE, WORK_LONGITUDE) if lat and lon else 0
    distance_text = f"{int(distance)} –º" if distance < 1000 else f"{distance/1000:.1f} –∫–º"
    
    return render_template('index.html', 
                         tracking=tracking,
                         status=status,
                         latitude=lat,
                         longitude=lon,
                         distance=distance_text,
                         timestamp=timestamp,
                         work_lat=WORK_LATITUDE,
                         work_lon=WORK_LONGITUDE)

@app.route('/mobile_tracker.html')
def mobile_tracker():
    return send_from_directory('.', 'mobile_tracker.html')

@app.route('/static/<path:filename>')
def static_files(filename):
    return send_from_directory('static', filename)

@app.route('/api/status')
def api_status():
    """API —Å—Ç–∞—Ç—É—Å–∞"""
    tracking = get_tracking_status()
    lat, lon, timestamp = get_last_location()
    
    status = "at_work" if is_at_work(lat, lon) else "on_way"
    distance = calculate_distance(lat or 0, lon or 0, WORK_LATITUDE, WORK_LONGITUDE) if lat and lon else 0
    
    return jsonify({
        'tracking': tracking,
        'status': status,
        'latitude': lat,
        'longitude': lon,
        'distance': int(distance),
        'timestamp': timestamp,
        'work_latitude': WORK_LATITUDE,
        'work_longitude': WORK_LONGITUDE
    })

@app.route('/api/tracking/toggle', methods=['POST'])
def toggle_tracking():
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"""
    current = get_tracking_status()
    set_tracking_status(not current)
    return redirect(url_for('index'))

@app.route('/api/location', methods=['POST'])
def receive_location():
    """–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    global last_notification_sent
    
    try:
        data = request.get_json()
        latitude = float(data.get('latitude'))
        longitude = float(data.get('longitude'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        save_location(latitude, longitude)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if get_tracking_status():
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã
            distance = calculate_distance(latitude, longitude, WORK_LATITUDE, WORK_LONGITUDE)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–µ
            if distance <= WORK_RADIUS:
                current_time = datetime.now()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                should_send = False
                
                if last_notification_sent is None:
                    should_send = True
                else:
                    time_diff = (current_time - last_notification_sent).total_seconds()
                    if time_diff >= NOTIFICATION_COOLDOWN:
                        should_send = True
                
                if should_send:
                    message = f"üöó <b>–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –Ω–∞ —Ä–∞–±–æ—Ç—É!</b>\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude:.6f}, {longitude:.6f}\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.0f} –º\n‚è∞ –í—Ä–µ–º—è: {current_time.strftime('%H:%M:%S')}"
                    if send_telegram_notification(message):
                        last_notification_sent = current_time
                        update_notification_time()
                        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            else:
                # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å —É–µ—Ö–∞–ª —Å —Ä–∞–±–æ—Ç—ã, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                # —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏–±—ã—Ç–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                if last_notification_sent is not None:
                    logger.info("–í–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Ä–∞–±–æ—á—É—é –∑–æ–Ω—É, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã")
                    last_notification_sent = None
        
        return jsonify({"success": True})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)}), 400

@app.route('/api/notify', methods=['POST'])
def send_notification():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    try:
        last_location = get_last_location()
        if last_location:
            latitude, longitude, timestamp = last_location
            distance = calculate_distance(latitude, longitude, WORK_LATITUDE, WORK_LONGITUDE)
            
            if distance <= WORK_RADIUS:
                message = f"üöó <b>–í–æ–¥–∏—Ç–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–µ</b>\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude:.6f}, {longitude:.6f}\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance:.0f} –º\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
            else:
                message = f"üöó <b>–í–æ–¥–∏—Ç–µ–ª—å –≤ –ø—É—Ç–∏</b>\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude:.6f}, {longitude:.6f}\nüìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã: {distance:.0f} –º\n‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"
        else:
            message = "üöó <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ</b>\n‚è∞ –í—Ä–µ–º—è: " + datetime.now().strftime('%H:%M:%S')
        
        if send_telegram_notification(message):
            logger.info("–†—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return jsonify({"success": True, "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"})
        else:
            return jsonify({"success": False, "error": "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏"}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return jsonify({"success": False, "error": str(e)}), 500

if __name__ == '__main__':
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    reset_notification_state()
    
    print("üåê –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print("üìç –ê–¥—Ä–µ—Å: http://0.0.0.0:5000")
    print(f"üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —á–∞—Ç: {NOTIFICATION_CHAT_ID}")
    
    app.run(host='0.0.0.0', port=5000, debug=True) 