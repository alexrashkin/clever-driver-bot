#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_monitoring_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    conn = sqlite3.connect('driver.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    cursor.execute('''
        SELECT ul.id, ul.is_at_work, ul.created_at, ul.latitude, ul.longitude, u.role
        FROM user_locations ul 
        JOIN users u ON ul.user_id = u.id 
        WHERE u.role IN ("driver", "admin") 
        ORDER BY ul.id DESC LIMIT 5
    ''')
    rows = cursor.fetchall()
    
    print(f'–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(rows)} –∑–∞–ø–∏—Å–µ–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π:')
    for row in rows:
        print(f'  ID: {row[0]}, is_at_work: {row[1]}, –≤—Ä–µ–º—è: {row[2]}, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {row[3]}, {row[4]}, —Ä–æ–ª—å: {row[5]}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    cursor.execute('SELECT telegram_id FROM users WHERE role = "recipient"')
    recipients = cursor.fetchall()
    print(f'\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(recipients)}')
    for recipient in recipients:
        print(f'  telegram_id: {recipient[0]}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    cursor.execute('SELECT is_active FROM tracking_status WHERE id = 1')
    result = cursor.fetchone()
    tracking_active = result[0] if result else False
    print(f'\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {tracking_active}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    if len(rows) >= 2:
        curr_id, curr_is_at_work, curr_time, curr_lat, curr_lon, curr_role = rows[0]
        prev_id, prev_is_at_work, prev_time, prev_lat, prev_lon, prev_role = rows[1]
        
        print(f'\n–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤:')
        print(f'  –¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å: ID {curr_id}, is_at_work: {curr_is_at_work}')
        print(f'  –ü—Ä–µ–¥—ã–¥—É—â–∞—è –∑–∞–ø–∏—Å—å: ID {prev_id}, is_at_work: {prev_is_at_work}')
        
        if prev_is_at_work == 0 and curr_is_at_work == 1:
            print(f'  ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù –ü–ï–†–ï–•–û–î: 0 ‚Üí 1 (–≤—ä–µ–∑–¥ –≤ –∑–æ–Ω—É –∫–≤–∞—Ä—Ç–∏—Ä—ã)')
            print(f'  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {curr_lat}, {curr_lon}')
            print(f'  ‚è∞ –í—Ä–µ–º—è: {curr_time}')
        elif prev_is_at_work == 1 and curr_is_at_work == 0:
            print(f'  ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù –ü–ï–†–ï–•–û–î: 1 ‚Üí 0 (–≤—ã–µ–∑–¥ –∏–∑ –∑–æ–Ω—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã)')
            print(f'  üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {curr_lat}, {curr_lon}')
            print(f'  ‚è∞ –í—Ä–µ–º—è: {curr_time}')
        else:
            print(f'  ‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
    
    conn.close()

if __name__ == "__main__":
    check_monitoring_data() 