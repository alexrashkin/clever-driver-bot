#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ https://cleverdriver.ru
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import requests
import time
import urllib3
from datetime import datetime

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

PRODUCTION_URL = "https://cleverdriver.ru"

def log(message, level="INFO"):
    timestamp = datetime.now().strftime("%H:%M:%S")
    status_icon = {
        "INFO": "üìù",
        "SUCCESS": "‚úÖ", 
        "ERROR": "‚ùå", 
        "WARNING": "‚ö†Ô∏è",
        "MONITOR": "üëÅÔ∏è",
        "NOTIFICATION": "üì¢"
    }.get(level, "üìù")
    print(f"[{timestamp}] {status_icon} {message}")

def get_latest_location_data():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ API"""
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é (–µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω)
        response = requests.get(f"{PRODUCTION_URL}/api/history", verify=False, timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            history = data.get('history', [])
            
            if history:
                latest = history[0]  # –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å
                return {
                    'success': True,
                    'latitude': latest.get('latitude'),
                    'longitude': latest.get('longitude'), 
                    'distance': latest.get('distance'),
                    'is_at_work': latest.get('is_at_work'),
                    'timestamp': latest.get('timestamp')
                }
        
        return {'success': False, 'error': f"HTTP {response.status_code}"}
    except Exception as e:
        return {'success': False, 'error': str(e)}

def monitor_status_changes():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ is_at_work"""
    log("üëÅÔ∏è –ó–ê–ü–£–°–ö –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô", "MONITOR")
    log("üåê –°–µ—Ä–≤–µ—Ä: https://cleverdriver.ru")
    log("‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: 30 —Å–µ–∫—É–Ω–¥")
    log("=" * 60)
    
    last_status = None
    last_check_time = None
    check_count = 0
    
    log("üì± –ò–ù–°–¢–†–£–ö–¶–ò–ò:")
    log("   1. –î–µ—Ä–∂–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–º Telegram —Å Driver Bot")
    log("   2. –°–ª–µ–¥–∏—Ç–µ –∑–∞ —ç—Ç–∏–º –º–æ–Ω–∏—Ç–æ—Ä–æ–º –∏ Telegram –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
    log("   3. –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç")
    log("   4. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    log("")
    
    try:
        while True:
            check_count += 1
            current_time = datetime.now()
            
            log(f"üëÅÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ #{check_count} - {current_time.strftime('%H:%M:%S')}", "MONITOR")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            location_data = get_latest_location_data()
            
            if location_data['success']:
                current_status = location_data['is_at_work']
                distance = location_data.get('distance', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                timestamp = location_data.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                status_text = "–ù–ê –†–ê–ë–û–¢–ï" if current_status else "–ù–ï –ù–ê –†–ê–ë–û–¢–ï"
                log(f"   üìç –°—Ç–∞—Ç—É—Å: {status_text} | –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}–º | –í—Ä–µ–º—è: {timestamp}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if last_status is not None and last_status != current_status:
                    if current_status:
                        transition = "–í–•–û–î –í –†–ê–ë–û–ß–£–Æ –ó–û–ù–£"
                        expected_msg = "–ü—Ä–∏–µ—Ö–∞–ª–∏"
                    else:
                        transition = "–í–´–•–û–î –ò–ó –†–ê–ë–û–ß–ï–ô –ó–û–ù–´"  
                        expected_msg = "–í—ã–µ—Ö–∞–ª–∏"
                    
                    log("", "")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
                    log("üö® –û–ë–ù–ê–†–£–ñ–ï–ù–û –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê!", "NOTIFICATION")
                    log(f"   üîÑ {transition}", "NOTIFICATION")
                    log(f"   üì¢ –û–∂–∏–¥–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: '{expected_msg}'", "NOTIFICATION")
                    log(f"   ‚è∞ –í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {current_time.strftime('%H:%M:%S')}", "NOTIFICATION")
                    log(f"   üîî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç!", "NOTIFICATION")
                    log("", "")
                
                last_status = current_status
                last_check_time = current_time
                
            else:
                log(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {location_data.get('error')}", "ERROR")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
            if check_count % 10 == 0:
                runtime = (current_time - start_time).total_seconds() / 60
                log(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {check_count} –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞ {runtime:.1f} –º–∏–Ω—É—Ç", "INFO")
            
            # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
            time.sleep(30)
            
    except KeyboardInterrupt:
        log("\n‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "WARNING")
        log(f"üìä –ò—Ç–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {check_count}", "INFO")
        runtime = (datetime.now() - start_time).total_seconds() / 60
        log(f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {runtime:.1f} –º–∏–Ω—É—Ç", "INFO")

def quick_status_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    log("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê", "INFO")
    log("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Å—Ç–∞—Ç—É—Å
    try:
        response = requests.get(f"{PRODUCTION_URL}/api/status", verify=False, timeout=10)
        if response.status_code == 200:
            data = response.json()
            tracking_active = data.get('tracking_active', False)
            log(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'–í–ö–õ–Æ–ß–ï–ù–û' if tracking_active else '–í–´–ö–õ–Æ–ß–ï–ù–û'}")
        else:
            log(f"‚ùå API —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ API: {e}", "ERROR")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    location_data = get_latest_location_data()
    if location_data['success']:
        status = "–ù–ê –†–ê–ë–û–¢–ï" if location_data['is_at_work'] else "–ù–ï –ù–ê –†–ê–ë–û–¢–ï"
        distance = location_data.get('distance', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        timestamp = location_data.get('timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        log(f"üìç –ü–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
        log(f"   –°—Ç–∞—Ç—É—Å: {status}")
        log(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance}–º")
        log(f"   –í—Ä–µ–º—è: {timestamp}")
    else:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {location_data.get('error')}", "ERROR")

if __name__ == "__main__":
    start_time = datetime.now()
    
    log("üöÄ –ú–û–ù–ò–¢–û–†–ò–ù–ì –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ü–†–û–î–ê–ö–®–ù –°–ï–†–í–ï–†–ê")
    log("=" * 60)
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    quick_status_check()
    
    log("")
    response = input("–ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞? (y/N): ")
    
    if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
        monitor_status_changes()
    else:
        log("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω", "INFO") 