#!/usr/bin/env python3
"""
HTTPS –≤–µ—Ä—Å–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è iPhone
–¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS –¥–ª—è —Ä–∞–±–æ—Ç—ã –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ iOS Safari
"""

from flask import Flask, request, jsonify
from geolocation_bot import GeoLocationBot
import logging
from datetime import datetime, timedelta
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
geo_bot = None
BOT_TOKEN = "7824059826:AAEQx8WETTaAE4iU-tC58fT9ODkotjo-Enc"

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTML –¥–ª—è iPhone —Å HTTPS –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
SIMPLE_HTML = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="Clever Driver">
    <title>Clever Driver Bot - HTTPS</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
            -webkit-user-select: none;
            user-select: none;
        }
        .container {
            max-width: 400px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }
        .status {
            background: #e8f5e8;
            padding: 15px;
            border-radius: 5px;
            margin: 15px 0;
            border: 2px solid #4CAF50;
            text-align: center;
        }
        .error {
            background: #ffeaea;
            border-color: #f44336;
        }
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 15px;
            border-radius: 8px;
            font-size: 16px;
            width: 100%;
            margin: 10px 0;
            cursor: pointer;
            -webkit-appearance: none;
            -webkit-tap-highlight-color: transparent;
        }
        button:active {
            background: #45a049;
            transform: scale(0.98);
        }
        button:disabled {
            background: #ccc;
        }
        .stop-btn {
            background: #f44336;
        }
        .stop-btn:active {
            background: #da190b;
        }
        .test-btn {
            background: #2196F3;
        }
        .test-btn:active {
            background: #0b7dda;
        }
        .info {
            background: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            font-family: monospace;
            font-size: 14px;
        }
        .https-indicator {
            background: #e8f5e8;
            border: 2px solid #4CAF50;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
            text-align: center;
            font-weight: bold;
        }
        .instructions {
            background: #f0f8ff;
            padding: 15px;
            border-radius: 5px;
            margin-top: 20px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üöó Clever Driver</h1>
        
        <div class="https-indicator">
            üîí HTTPS –∞–∫—Ç–∏–≤–µ–Ω - –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!
        </div>
        
        <div id="status" class="status">
            üìç –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞ iOS Safari
        </div>
        
        <button onclick="getLocation()">üì± –ü–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</button>
        
        <button id="startBtn" onclick="startTracking()">üéØ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</button>
        
        <button id="stopBtn" onclick="stopTracking()" class="stop-btn" style="display:none;">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å</button>
        
        <div class="instructions">
            <h3>üè† –¢–µ—Å—Ç: –ø—Ä–∏–±—ã—Ç–∏–µ –¥–æ–º–æ–π</h3>
            <button onclick="testHome()" class="test-btn">üè† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
        </div>
        
        <div id="info" class="info" style="display:none;"></div>
        
        <div class="instructions">
            <strong>üì± –î–ª—è iPhone:</strong><br>
            ‚Ä¢ –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏<br>
            ‚Ä¢ –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤—å—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω<br>
            ‚Ä¢ Safari ‚Üí –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí –ù–∞ —ç–∫—Ä–∞–Ω "–î–æ–º–æ–π"
        </div>
    </div>

    <script>
        let watchId = null;
        let tracking = false;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        window.addEventListener('load', function() {
            if (!navigator.geolocation) {
                updateStatus('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ', true);
            } else {
                updateStatus('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É');
            }
        });

        function updateStatus(msg, error = false) {
            const status = document.getElementById('status');
            status.innerHTML = msg;
            status.className = error ? 'status error' : 'status';
        }

        function showInfo(lat, lon, acc) {
            const info = document.getElementById('info');
            info.style.display = 'block';
            info.innerHTML = `
                –®–∏—Ä–æ—Ç–∞: ${lat.toFixed(6)}<br>
                –î–æ–ª–≥–æ—Ç–∞: ${lon.toFixed(6)}<br>
                –¢–æ—á–Ω–æ—Å—Ç—å: ${acc} –º<br>
                –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
            `;
        }

        function sendLocation(lat, lon, acc, test = false) {
            fetch('/update_location', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    latitude: lat,
                    longitude: lon,
                    accuracy: acc,
                    test: test
                })
            })
            .then(r => r.json())
            .then(d => {
                console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', d);
            })
            .catch(e => {
                console.log('–û—à–∏–±–∫–∞:', e);
                updateStatus('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', true);
            });
        }

        function getLocation() {
            if (!navigator.geolocation) {
                updateStatus('‚ùå –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', true);
                return;
            }

            updateStatus('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...');

            navigator.geolocation.getCurrentPosition(
                function(pos) {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;
                    const acc = pos.coords.accuracy;
                    
                    updateStatus('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã!');
                    showInfo(lat, lon, acc);
                    sendLocation(lat, lon, acc);
                },
                function(err) {
                    let errorMsg = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
                    switch(err.code) {
                        case err.PERMISSION_DENIED:
                            errorMsg = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Safari.';
                            break;
                        case err.POSITION_UNAVAILABLE:
                            errorMsg = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
                            break;
                        case err.TIMEOUT:
                            errorMsg = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
                            break;
                    }
                    updateStatus('‚ùå ' + errorMsg, true);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 15000,
                    maximumAge: 60000
                }
            );
        }

        function startTracking() {
            if (!navigator.geolocation || tracking) return;

            tracking = true;
            updateStatus('üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...');
            
            document.getElementById('startBtn').style.display = 'none';
            document.getElementById('stopBtn').style.display = 'block';

            watchId = navigator.geolocation.watchPosition(
                function(pos) {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;
                    const acc = pos.coords.accuracy;
                    
                    updateStatus('üéØ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
                    showInfo(lat, lon, acc);
                    sendLocation(lat, lon, acc);
                },
                function(err) {
                    updateStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: ' + err.message, true);
                    stopTracking();
                },
                {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 5000
                }
            );
        }

        function stopTracking() {
            if (!tracking) return;
            
            tracking = false;
            if (watchId) {
                navigator.geolocation.clearWatch(watchId);
                watchId = null;
            }
            
            updateStatus('‚èπÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            document.getElementById('startBtn').style.display = 'block';
            document.getElementById('stopBtn').style.display = 'none';
        }

        function testHome() {
            updateStatus('üè† –¢–µ—Å—Ç –ø—Ä–∏–±—ã—Ç–∏—è –¥–æ–º–æ–π...');
            showInfo(55.676803, 37.523510, 10);
            sendLocation(55.676803, 37.523510, 10, true);
            
            setTimeout(() => {
                updateStatus('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram');
            }, 1000);
        }
    </script>
</body>
</html>'''

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return SIMPLE_HTML

@app.route('/update_location', methods=['POST'])
def update_location():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    try:
        data = request.get_json()
        lat = data.get('latitude')
        lon = data.get('longitude')
        acc = data.get('accuracy', 0)
        is_test = data.get('test', False)
        
        test_info = " (–¢–ï–°–¢)" if is_test else ""
        logger.info(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f} (¬±{acc}–º){test_info}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–æ—Ç–∞
        if geo_bot:
            geo_bot.update_location(lat, lon)
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if is_test:
                send_test_notification(lat, lon)
        
        return jsonify({'status': 'success'})
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return jsonify({'status': 'error', 'message': str(e)})

def send_test_notification(lat, lon):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
        moscow_time = datetime.now() + timedelta(hours=3)
        test_time = moscow_time.strftime("%H:%M")
        
        test_message = (
            f"üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´\n"
            f"üè† –Ø –¥–æ–º–∞! –ü—Ä–∏–±—ã–ª(–∞) –±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–æ.\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {test_time}\n"
            f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}\n"
            f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
        )
        
        chat_id = "946872573"  # –í–∞—à Chat ID
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        data = {
            "chat_id": chat_id,
            "text": test_message,
            "parse_mode": "HTML"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, json=data, timeout=10)
        
        if response.status_code == 200:
            logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.status_code} - {response.text}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def initialize_bot():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    global geo_bot
    try:
        logger.info("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        geo_bot = GeoLocationBot(BOT_TOKEN)
        geo_bot.load_locations_from_file("geo_locations.json")
        logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
        return False

def create_ssl_context():
    """–°–æ–∑–¥–∞–Ω–∏–µ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è HTTPS"""
    # –î–ª—è iOS Safari –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å adhoc SSL
    logger.info("üîí –ò—Å–ø–æ–ª—å–∑—É–µ–º adhoc SSL –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å iOS")
    return 'adhoc'

def main():
    """–ó–∞–ø—É—Å–∫ HTTPS —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üîí –ó–∞–ø—É—Å–∫ HTTPS –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    
    if not initialize_bot():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç
    ssl_context = create_ssl_context()
    
    logger.info("="*60)
    logger.info("üöó CLEVER DRIVER BOT - HTTPS –í–ï–ë-–°–ï–†–í–ï–†")
    logger.info("="*60)
    logger.info("üîí HTTPS —Å–µ—Ä–≤–µ—Ä: https://192.168.0.104:8443")
    logger.info("üì± –î–ª—è iPhone: https://192.168.0.104:8443")
    logger.info("ü§ñ Telegram –±–æ—Ç: @Clever_driver_bot")
    logger.info("="*60)
    logger.info("üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è iPhone:")
    logger.info("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Safari")
    logger.info("   2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://192.168.0.104:8443")
    logger.info("   3. –ù–∞–∂–º–∏—Ç–µ '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ' ‚Üí '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç'")
    logger.info("   4. –†–∞–∑—Ä–µ—à–∏—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é")
    logger.info("   5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    logger.info("="*60)
    logger.info("‚ö†Ô∏è  iOS: –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ!")
    logger.info("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    logger.info("="*60)
    
    try:
        app.run(
            host='0.0.0.0', 
            port=8443, 
            debug=False,
            ssl_context=ssl_context
        )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTPS —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install pyopenssl")

if __name__ == "__main__":
    main() 