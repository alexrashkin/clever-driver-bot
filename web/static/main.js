// –ü–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π IS_AUTHORIZED –∏–∑ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ index.html

function showMessage(text, type) {
    const existingMsg = document.querySelector('.msg');
    if (existingMsg) {
        existingMsg.remove();
    }
    const msgDiv = document.createElement('div');
    msgDiv.className = 'msg' + (type === 'error' ? ' error' : '');
    msgDiv.textContent = text;
    const container = document.querySelector('.container');
    const statusDiv = document.querySelector('.status');
    container.insertBefore(msgDiv, statusDiv.nextSibling);
    setTimeout(() => {
        if (msgDiv.parentNode) {
            msgDiv.remove();
        }
    }, 3000);
}

function onAuthRequired(event) {
    if (!window.IS_AUTHORIZED) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', 'error');
        event.preventDefault();
        return false;
    }
    return true;
}

function sendManualNotification(event) {
    if (!onAuthRequired(event)) return false;
    const button = event.target;
    const originalText = button.textContent;
    button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    button.disabled = true;
    fetch('/api/notify', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showMessage('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    })
    .catch(error => {
        showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    })
    .finally(() => {
        button.textContent = originalText;
        button.disabled = false;
    });
    return false;
}

function sendDanyaWakeup(event) {
    if (!onAuthRequired(event)) return false;
    const button = event.target;
    const originalText = button.textContent;
    button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    button.disabled = true;
    fetch('/api/user1', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    })
    .catch(error => {
        showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    })
    .finally(() => {
        button.textContent = originalText;
        button.disabled = false;
    });
    return false;
}

function sendLizaWakeup(event) {
    if (!onAuthRequired(event)) return false;
    const button = event.target;
    const originalText = button.textContent;
    button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    button.disabled = true;
    fetch('/api/user2', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    })
    .catch(error => {
        showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    })
    .finally(() => {
        button.textContent = originalText;
        button.disabled = false;
    });
    return false;
}

function sendDynamicButton(event, idx) {
    if (!onAuthRequired(event)) return false;
    const button = event.target;
    const originalText = button.textContent;
    button.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    button.disabled = true;
    fetch(`/api/button/${idx}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'success');
        } else {
            showMessage('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    })
    .catch(error => {
        showMessage('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    })
    .finally(() => {
        button.textContent = originalText;
        button.disabled = false;
    });
    return false;
}

// –¢—ë–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ + –ª–æ–≥–æ—Ç–∏–ø
const btn = document.getElementById('theme-toggle');
const logoImg = document.getElementById('logo-img');
function updateLogo() {
  if (document.body.classList.contains('dark')) {
    logoImg.src = '/static/logo_dark.png';
  } else {
    logoImg.src = '/static/logo_light.png';
  }
}
btn.onclick = function() {
  document.body.classList.toggle('dark');
  btn.textContent = document.body.classList.contains('dark') ? '‚òÄÔ∏è' : 'üåô';
  localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
  updateLogo();
};
if (localStorage.getItem('theme') === 'dark') {
  document.body.classList.add('dark');
  btn.textContent = '‚òÄÔ∏è';
}
updateLogo(); 