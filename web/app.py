from flask import Flask, render_template, jsonify, request, redirect, url_for, send_from_directory, session
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config.settings import config
from bot.database import Database  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å, –∞ –Ω–µ —ç–∫–∑–µ–º–ø–ª—è—Ä
from bot.utils import format_distance, format_timestamp, validate_coordinates, create_work_notification, calculate_distance, is_at_work, get_greeting
import logging
import requests
from datetime import datetime, timedelta
import pytz
import hashlib
import hmac
import time as pytime
import json
import logging
import os
import sys
import time
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, make_response, send_from_directory
from werkzeug.utils import secure_filename
import sqlite3
import requests
import asyncio
import threading
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(config.LOG_FILE),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = config.WEB_SECRET_KEY

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database("driver.db")

def get_current_user():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if telegram_id:
        return db.get_user_by_telegram_id(telegram_id)
    elif user_login:
        return db.get_user_by_login(user_login)
    return None

def get_current_user_role():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if telegram_id:
        return db.get_user_role(telegram_id)
    elif user_login:
        return db.get_user_role_by_login(user_login)
    return None

def send_telegram_arrival(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    # user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id (—á–∏—Å–ª–æ) –∏–ª–∏ login (—Å—Ç—Ä–æ–∫–∞)
    if isinstance(user_id, (int, str)) and str(user_id).isdigit():
        # –≠—Ç–æ telegram_id
        user_role = db.get_user_role(int(user_id))
    else:
        # –≠—Ç–æ login
        user_role = db.get_user_role_by_login(user_id)
    
    if user_role not in ['admin', 'driver']:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å —Ä–æ–ª—å—é {user_role} –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return False
    
    token = config.TELEGRAM_TOKEN
    text = create_work_notification()
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ –∏ telegram_id
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
    users = cursor.fetchall()
    conn.close()
    
    if not users:
        logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return False
    
    sent_count = 0
    total_users = len(users)
    
    for (telegram_id,) in users:
        try:
            response = requests.post(url, data={"chat_id": telegram_id, "text": text}, timeout=15)
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    logger.info(f"–†—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                    sent_count += 1
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {data.get('description')}")
            else:
                logger.error(f"HTTP –æ—à–∏–±–∫–∞ Telegram –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {response.status_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count} –∏–∑ {total_users}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    return total_users > 0 and sent_count > 0

def send_alternative_notification():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    try:
        text = create_work_notification()
        logger.info(f"–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {text}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def send_telegram_code(telegram_contact, code):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if not telegram_contact or not telegram_contact.strip():
            return False, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        telegram_contact = telegram_contact.strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if telegram_contact.startswith('@'):
            # Username - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            username = telegram_contact[1:]  # –£–±–∏—Ä–∞–µ–º @
            if not username:
                return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç @username"
            chat_id = f"@{username}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ username: @{username}")
        elif telegram_contact.startswith('+'):
            # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            phone = telegram_contact
            if len(phone) < 10:
                return False, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –î–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ chat_id
            # Telegram API –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
            chat_id = phone
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ chat_id: {chat_id}")
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ username –±–µ–∑ @
            username = telegram_contact
            if not username:
                return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            chat_id = f"@{username}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ username (–±–µ–∑ @): @{username}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
        url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/sendMessage"
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text = f"""üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

–í–∞—à –∫–æ–¥: {code}

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.

‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–º—É!

üí° –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º @{config.TELEGRAM_BOT_USERNAME}"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode
        data = {
            'chat_id': chat_id,
            'text': message_text
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}")
        response = requests.post(url, json=data, timeout=10)
        logger.info(f"sendMessage response: HTTP {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"–ö–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True, "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {error_msg}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "Chat not found" in error_msg:
                    if telegram_contact.startswith('+'):
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {telegram_contact} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @{config.TELEGRAM_BOT_USERNAME} /start"
                    else:
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram"
                elif "Forbidden" in error_msg:
                    return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ @{config.TELEGRAM_BOT_USERNAME}"
                elif "Bad Request" in error_msg:
                    if "chat_id is empty" in error_msg:
                        return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ +7XXXXXXXXXX"
                    else:
                        return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: {telegram_contact}"
                elif "chat not found" in error_msg.lower():
                    if telegram_contact.startswith('+'):
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {telegram_contact} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @{config.TELEGRAM_BOT_USERNAME} /start"
                    else:
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram"
                else:
                    return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}"
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞")
            try:
                error_data = response.json()
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (HTTP {response.status_code})"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}"

def find_telegram_user_by_username(username):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø–æ username"""
    try:
        # –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getChat,
        # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É.
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é.
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π sendMessage")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        return {
            'id': f"@{username}",
            'username': username,
            'first_name': username,
            'last_name': None
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username {username}: {e}")
        return None

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        tracking_status = db.get_tracking_status()
        
        # –ü–æ–ª—É—á–∞–µ–º flash —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –µ–≥–æ
        message = session.pop('flash_message', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
        telegram_id = session.get('telegram_id')
        user_login = session.get('user_login')
        user_role = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        
        if telegram_id:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
            user_role = db.get_user_role(telegram_id)
            logger.info(f"INDEX: telegram_id={telegram_id}, –ø–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å: {user_role}")
            
            # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
            if not user_role:
                logger.info(f"INDEX: —Ä–æ–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /select_role")
                return redirect('/select_role')
            
            user = db.get_user_by_telegram_id(telegram_id)
            is_authorized = True
            user_name = user.get('first_name') or user.get('username') or f"ID: {telegram_id}"
            auth_type = 'telegram'
        elif user_login:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
            logger.info(f"INDEX: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω user_login={user_login}")
            user_role = db.get_user_role_by_login(user_login)
            logger.info(f"INDEX: –ø–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å user_role={user_role}")
            
            if not user_role:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞
                session.pop('user_login', None)
                return redirect('/login')
            
            user = db.get_user_by_login(user_login)
            is_authorized = True
            user_name = user.get('first_name') or user.get('last_name') or user_login
            auth_type = 'login'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID
            telegram_id = user.get('telegram_id')
            logger.info(f"INDEX: –ø—Ä–æ–≤–µ—Ä–∫–∞ telegram_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login}: telegram_id={telegram_id}")
            if not telegram_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç Telegram ID - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è driver
                logger.info(f"INDEX: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login} –Ω–µ—Ç telegram_id")
                if user_role == 'driver':
                    logger.info(f"INDEX: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_login} –∏–º–µ–µ—Ç —Ä–æ–ª—å driver, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    conn = db.get_connection()
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
                    recipients_count = cursor.fetchone()[0]
                    conn.close()
                    
                    if recipients_count == 0:
                        session['flash_message'] = "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                    else:
                        session['flash_message'] = None
                else:
                    logger.info(f"INDEX: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login} –Ω–µ—Ç telegram_id, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_recipient_only=True")
                    session['flash_message'] = "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
                    is_recipient_only = True
                    is_admin = False
                    is_driver = False
                    buttons = []
                    work_latitude = config.WORK_LATITUDE
                    work_longitude = config.WORK_LONGITUDE
                    work_radius = config.WORK_RADIUS
                    return render_template(
                        'index.html',
                        tracking_status=tracking_status,
                        message=session.pop('flash_message', None),
                        year=datetime.now().year,
                        buttons=buttons,
                        work_latitude=work_latitude,
                        work_longitude=work_longitude,
                        work_radius=work_radius,
                        is_authorized=is_authorized,
                        is_recipient_only=is_recipient_only,
                        is_admin=is_admin,
                        is_driver=is_driver,
                        auth_type=auth_type,
                        user_name=user_name,
                        needs_telegram_binding=True
                    )
        
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if telegram_id or user_login:
            logger.info(f"INDEX: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–π user_role={user_role}")
            if user_role == 'recipient':
                # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                buttons = []
                work_latitude = config.WORK_LATITUDE
                work_longitude = config.WORK_LONGITUDE
                work_radius = config.WORK_RADIUS
                is_recipient_only = True
                is_admin = False
                is_driver = False
            elif user_role == 'admin':
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
                buttons = user.get('buttons', [])
                work_latitude = user.get('work_latitude', config.WORK_LATITUDE)
                work_longitude = user.get('work_longitude', config.WORK_LONGITUDE)
                work_radius = user.get('work_radius', config.WORK_RADIUS)
                is_recipient_only = False
                is_admin = True
                is_driver = False
            elif user_role == 'driver':
                # –í–æ–¥–∏—Ç–µ–ª—å (–≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                buttons = user.get('buttons', [])
                work_latitude = user.get('work_latitude', config.WORK_LATITUDE)
                work_longitude = user.get('work_longitude', config.WORK_LONGITUDE)
                work_radius = user.get('work_radius', config.WORK_RADIUS)
                is_recipient_only = False
                is_admin = False
                is_driver = True
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
                return redirect('/select_role')
        else:
            buttons = ['üìç –ï–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É', 'üöó –ü–æ–¥—ä–µ–∑–∂–∞—é –∫ –¥–æ–º—É', '‚è∞ –û–ø–∞–∑–¥—ã–≤–∞—é –Ω–∞ 10 –º–∏–Ω—É—Ç']
            work_latitude = config.WORK_LATITUDE
            work_longitude = config.WORK_LONGITUDE
            work_radius = config.WORK_RADIUS
            is_authorized = False
            is_recipient_only = False
            is_admin = False
            is_driver = False
            user_name = None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ Telegram
        needs_telegram_binding = is_authorized and not telegram_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        has_recipients = False
        if is_authorized:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
            recipients_count = cursor.fetchone()[0]
            conn.close()
            has_recipients = recipients_count > 0
        
        return render_template(
            'index.html',
            tracking_status=tracking_status,
            message=message,  # –ü–µ—Ä–µ–¥–∞–µ–º flash —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω
            year=datetime.now().year,
            buttons=buttons,
            work_latitude=work_latitude,
            work_longitude=work_longitude,
            work_radius=work_radius,
            is_authorized=is_authorized,
            is_recipient_only=is_recipient_only,
            is_admin=is_admin,
            is_driver=is_driver,
            auth_type=auth_type if is_authorized else None,
            user_name=user_name,
            needs_telegram_binding=needs_telegram_binding,
            has_recipients=has_recipients
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return render_template('index.html', tracking_status=False, message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", year=datetime.now().year)

@app.route('/mobile')
def mobile_tracker():
    """–ú–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    return render_template('mobile_tracker.html', year=datetime.now().year)

@app.route('/debug_status')
def debug_status():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    return render_template('debug_status.html')

@app.route('/mobile_tracker.html')
def mobile_tracker_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    return redirect('/mobile')

@app.route('/toggle', methods=['POST'])
def toggle_tracking():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    if user_role == 'recipient':
        session['flash_message'] = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"
        return redirect('/')
    
    print("=== TOGGLE_TRACKING –í–´–ó–í–ê–ù–ê ===")
    try:
        print("=== –í TRY –ë–õ–û–ö–ï ===")
        logger.info("toggle_tracking: –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        current_status = db.get_tracking_status()
        new_status = not current_status
        db.set_tracking_status(new_status)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if new_status else "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
        session['flash_message'] = message
        
        logger.info(f"toggle_tracking: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")
        print(f"=== –í–´–ü–û–õ–ù–Ø–ï–ú REDIRECT, —Å—Ç–∞—Ç—É—Å: {new_status} ===")
        
        # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï: JavaScript —Ä–µ–¥–∏—Ä–µ–∫—Ç
        # Flask redirect –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º JS
        redirect_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <script>
                // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
                window.location.replace('/');
            </script>
        </head>
        <body>
            <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
        </body>
        </html>
        """
        return redirect_html
        
    except Exception as e:
        print(f"=== EXCEPTION: {e} ===")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        session['flash_message'] = "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
        redirect_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <script>
                window.location.replace('/');
            </script>
        </head>
        <body>
            <p>–û—à–∏–±–∫–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
        </body>
        </html>
        """
        return redirect_html

@app.route('/manual_arrival', methods=['POST'])
def manual_arrival():
    """–†—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É"""
    try:
        telegram_id = session.get('telegram_id')
        user_login = session.get('user_login')
        
        if not telegram_id and not user_login:
            message = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if telegram_id:
                user_role = db.get_user_role(telegram_id)
                user_id = telegram_id
            else:
                user_role = db.get_user_role_by_login(user_login)
                user_id = user_login
            
            if user_role == 'recipient':
                message = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            elif send_telegram_arrival(user_id):
                message = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                if send_alternative_notification():
                    message = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)"
                else:
                    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –∏ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        session['flash_message'] = message
        return redirect(url_for('index'))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        session['flash_message'] = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        return redirect(url_for('index'))

@app.route('/api/status')
def api_status():
    """API —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        tracking_active = db.get_tracking_status()
        return jsonify({
            'success': True,
            'tracking_active': tracking_active,
            'tracking': tracking_active  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/toggle', methods=['POST'])
def api_toggle():
    """API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        telegram_id = session.get('telegram_id')
        if telegram_id and db.get_user_role(telegram_id) == 'recipient':
            return jsonify({'success': False, 'error': '–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º'}), 403
        current_status = db.get_tracking_status()
        new_status = not current_status
        db.set_tracking_status(new_status)
        
        return jsonify({
            'success': True,
            'tracking_active': new_status
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/history')
def api_history():
    """API –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
    try:
        limit = request.args.get('limit', 10, type=int)
        history = db.get_history(limit)
        logger.info(f"DEBUG: history = {history}")
        
        formatted_history = []
        for record in history:
            logger.info(f"DEBUG: record = {record}")
            formatted_history.append({
                'latitude': record['latitude'],
                'longitude': record['longitude'],
                'distance': format_distance(record['distance']) if record['distance'] else '0 –º',
                'is_at_work': bool(record['is_at_work']),
                'timestamp': format_timestamp(record['timestamp'])
            })
        
        return jsonify({
            'success': True,
            'history': formatted_history
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/location', methods=['POST'])
def api_location():
    """API –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    try:
        data = request.get_json()
        if not data:
            logger.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ POST /api/location')
            return jsonify({'_type': 'status'}), 200

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (latitude/longitude) –∏ OwnTracks (_type/lat/lon)
        latitude = longitude = tst = None
        
        # –§–æ—Ä–º–∞—Ç OwnTracks
        if data.get('_type') == 'location' and all(k in data for k in ('lat', 'lon', 'tst')):
            latitude = data['lat']
            longitude = data['lon']
            tst = data['tst']
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        elif 'latitude' in data and 'longitude' in data:
            latitude = data['latitude']
            longitude = data['longitude']
            tst = pytime.time()
        
        if latitude is not None and longitude is not None:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_id = session.get('telegram_id')
            if telegram_id:
                user = db.get_user_by_telegram_id(telegram_id)
                work_latitude = user.get('work_latitude', config.WORK_LATITUDE)
                work_longitude = user.get('work_longitude', config.WORK_LONGITUDE)
                work_radius = user.get('work_radius', config.WORK_RADIUS)
            else:
                work_latitude = config.WORK_LATITUDE
                work_longitude = config.WORK_LONGITUDE
                work_radius = config.WORK_RADIUS
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
            if validate_coordinates(latitude, longitude):
                distance = calculate_distance(latitude, longitude, work_latitude, work_longitude)
                at_work = distance <= float(work_radius)
                db.add_location(latitude, longitude, distance, at_work)
                logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É: latitude={latitude}, longitude={longitude}, distance={distance}, is_at_work={at_work}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
                if data.get('_type') == 'location':
                    return jsonify({'_type': 'location', 'lat': latitude, 'lon': longitude, 'tst': tst}), 200
                else:
                    return jsonify({
                        'success': True, 
                        'is_at_work': at_work, 
                        'distance': distance,
                        'latitude': latitude,
                        'longitude': longitude
                    }), 200
            else:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: latitude={latitude}, longitude={longitude}")
                return jsonify({'success': False, 'error': 'Invalid coordinates'}), 400
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (status, —Å–ª—É–∂–µ–±–Ω—ã–µ –∏ –æ—à–∏–±–∫–∏) ‚Äî status
            logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π: _type={data.get('_type')}")
            return jsonify({'_type': 'status'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({'_type': 'status'}), 200

@app.route('/api/notify', methods=['POST'])
def api_notify():
    """API —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        user_role = get_current_user_role()
        if user_role == 'recipient':
            return jsonify({'success': False, 'error': '–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 403
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ª–æ–≥–∏–Ω
        user_id = user.get('telegram_id') or user.get('login')
        if send_telegram_arrival(user_id):
            return jsonify({'success': True})
        else:
            if send_alternative_notification():
                return jsonify({'success': True})
            else:
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏ –∏ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/user1', methods=['POST'])
def api_user1():
    try:
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_current_user_role()
        if user_role not in ['admin', 'driver']:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 403
        
        buttons = user.get('buttons', [])
        greeting = get_greeting() + '!'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        name = buttons[0] if buttons else 'üìç –ï–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É'
        text = f"{greeting} {name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏
        token = config.TELEGRAM_TOKEN
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL")
        users = cursor.fetchall()
        conn.close()
        
        sent_count = 0
        for (user_telegram_id,) in users:
            try:
                response = requests.post(url, data={"chat_id": user_telegram_id, "text": text}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
        
        if sent_count > 0:
            return jsonify({'success': True})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if len(users) == 0:
                logger.info(f"API_BUTTON: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞")
                return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'})
            else:
                logger.warning(f"API_BUTTON: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ user1: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/user2', methods=['POST'])
def api_user2():
    try:
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_current_user_role()
        if user_role not in ['admin', 'driver']:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 403
        
        buttons = user.get('buttons', [])
        greeting = get_greeting() + '!'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        name = buttons[1] if len(buttons) > 1 else 'üöó –ü–æ–¥—ä–µ–∑–∂–∞—é –∫ –¥–æ–º—É'
        text = f"{greeting} {name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏
        token = config.TELEGRAM_TOKEN
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL")
        users = cursor.fetchall()
        conn.close()
        
        sent_count = 0
        for (user_telegram_id,) in users:
            try:
                response = requests.post(url, data={"chat_id": user_telegram_id, "text": text}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
        
        if sent_count > 0:
            return jsonify({'success': True})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if len(users) == 0:
                logger.info(f"API_BUTTON: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞")
                return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'})
            else:
                logger.warning(f"API_BUTTON: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ user2: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/button/<int:idx>', methods=['POST'])
def api_button(idx):
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º idx"""
    try:
        logger.info(f"API_BUTTON: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ idx={idx}")
        user = get_current_user()
        if not user:
            logger.error(f"API_BUTTON: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_current_user_role()
        logger.info(f"API_BUTTON: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_role={user_role}")
        if user_role not in ['admin', 'driver']:
            logger.error(f"API_BUTTON: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ user_role={user_role}")
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 403
        
        buttons = user.get('buttons', [])
        logger.info(f"API_BUTTON: –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è buttons={buttons}")
        if idx < 0 or idx >= len(buttons):
            logger.error(f"API_BUTTON: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ idx={idx}, –≤—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫={len(buttons)}")
            return jsonify({'success': False, 'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏'}), 400
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏
        greeting = get_greeting() + '!'
        name = buttons[idx]
        text = f"{greeting} {name}"
        token = config.TELEGRAM_TOKEN
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ –∏ telegram_id
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
        users = cursor.fetchall()
        conn.close()
        
        logger.info(f"API_BUTTON: –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π users={len(users)}")
        sent_count = 0
        for (user_telegram_id,) in users:
            try:
                response = requests.post(url, data={"chat_id": user_telegram_id, "text": text}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
        
        if sent_count > 0:
            return jsonify({'success': True})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if len(users) == 0:
                logger.info(f"API_BUTTON: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞")
                return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'})
            else:
                logger.warning(f"API_BUTTON: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ api_button: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/test')
def test_route():
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    return "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Ä–µ–º—è: " + str(datetime.now())

@app.route('/debug_session')
def debug_session():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–µ—Å—Å–∏–π"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = None
    user_name = None
    
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
        user = db.get_user_by_telegram_id(telegram_id)
        user_name = user.get('first_name') if user else None
    elif user_login:
        user_role = db.get_user_role_by_login(user_login)
        user = db.get_user_by_login(user_login)
        user_name = user.get('first_name') if user else None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session_data = "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n"
    for key, value in session.items():
        session_data += f"{key}: {value}\n"
    
    return render_template('debug_session.html', 
                         session_data=session_data,
                         telegram_id=telegram_id,
                         user_login=user_login,
                         user_role=user_role,
                         user_name=user_name)

@app.route('/debug_settings')
def debug_settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ settings
    telegram_user = None
    user = None
    
    if telegram_id:
        telegram_user = True
        user = db.get_user_by_telegram_id(telegram_id)
    elif user_login:
        telegram_user = False
        user = db.get_user_by_login(user_login)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
    if user:
        for key, value in user.items():
            user_data += f"{key}: {value}\n"
    else:
        user_data = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    return render_template('debug_settings.html', 
                         user_data=user_data,
                         telegram_user=telegram_user,
                         user=user)



@app.route('/settings', methods=['GET', 'POST'])
def settings():
    telegram_user = None
    user = None
    message = None
    error = False
    telegram_bot_id = config.TELEGRAM_BOT_ID  # ID Telegram-–±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å)
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if user_login:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        user_role = db.get_user_role_by_login(user_login)
        if user_role == 'recipient':
            session['flash_message'] = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
            return redirect('/')
        
        telegram_user = False
        user = db.get_user_by_login(user_login)
        
        if request.method == 'POST':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            import json
            buttons_json = request.form.get('buttons')
            try:
                buttons = json.loads(buttons_json) if buttons_json else []
            except Exception:
                buttons = []
            work_latitude = request.form.get('work_latitude')
            work_longitude = request.form.get('work_longitude')
            work_radius = request.form.get('work_radius')
            try:
                # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ telegram_id
                if user.get('telegram_id'):
                    db.update_user_settings(
                        user['telegram_id'],
                        buttons=buttons,
                        work_latitude=work_latitude,
                        work_longitude=work_longitude,
                        work_radius=work_radius
                    )
                    message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
                else:
                    message = '–î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram'
                    error = True
            except Exception as e:
                message = f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}'
                error = True
            user = db.get_user_by_login(user_login)  # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        
        logger.info(f"SETTINGS (Login): telegram_user={telegram_user}, user_id={user.get('id') if user else None}, user_name={user.get('first_name') if user else None}, user_login={user_login}")
        return render_template('settings.html', telegram_user=telegram_user, user=user, message=message, error=error, telegram_bot_id=telegram_bot_id, user_role=user_role)
    
    elif telegram_id:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = db.get_user_role(telegram_id)
        if user_role == 'recipient':
            session['flash_message'] = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
            return redirect('/')
        
        telegram_user = True
        user = db.get_user_by_telegram_id(telegram_id)
        
        if request.method == 'POST':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            import json
            buttons_json = request.form.get('buttons')
            try:
                buttons = json.loads(buttons_json) if buttons_json else []
            except Exception:
                buttons = []
            work_latitude = request.form.get('work_latitude')
            work_longitude = request.form.get('work_longitude')
            work_radius = request.form.get('work_radius')
            try:
                db.update_user_settings(
                    telegram_id,
                    buttons=buttons,
                    work_latitude=work_latitude,
                    work_longitude=work_longitude,
                    work_radius=work_radius
                )
                message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
            except Exception as e:
                message = f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}'
                error = True
            user = db.get_user_by_telegram_id(telegram_id)  # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        
        logger.info(f"SETTINGS (Telegram): telegram_user={telegram_user}, user_id={user.get('id') if user else None}, user_name={user.get('first_name') if user else None}")
        return render_template('settings.html', telegram_user=telegram_user, user=user, message=message, error=error, telegram_bot_id=telegram_bot_id, user_role=user_role)
    
    else:
        # –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')

@app.route('/about')
def about():
    return render_template('about.html')

@app.route('/static/<path:filename>')
def static_files(filename):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    response = make_response(send_from_directory('static', filename))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if filename.endswith(('.js', '.css')):
        # –î–ª—è JS –∏ CSS —Ñ–∞–π–ª–æ–≤ - –∫–æ—Ä–æ—Ç–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        response.headers['Cache-Control'] = 'public, max-age=300, must-revalidate'
        response.headers['ETag'] = f'"{hash(filename + str(datetime.now().timestamp()))}"'
    elif filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.ico', '.svg')):
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        response.headers['Cache-Control'] = 'public, max-age=3600'
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
    
    return response

@app.route('/register', methods=['GET', 'POST'])
def register():
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if request.method == 'POST':
        login = request.form.get('login', '').strip()
        password = request.form.get('password', '')
        confirm_password = request.form.get('confirm_password', '')
        first_name = request.form.get('first_name', '').strip() or None
        last_name = request.form.get('last_name', '').strip() or None
        role = request.form.get('role', 'driver')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if not login or len(login) < 3:
            return render_template('register.html', error="–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        
        if not password or len(password) < 6:
            return render_template('register.html', error="–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤")
        
        if password != confirm_password:
            return render_template('register.html', error="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        
        if role not in ['admin', 'driver', 'recipient']:
            return render_template('register.html', error="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        import re
        if not re.match(r'^[a-zA-Z0-9_-]+$', login):
            return render_template('register.html', error="–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"REGISTER: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è login={login}, role={role}")
        success, result = db.create_user_with_login(login, password, first_name, last_name, role)
        logger.info(f"REGISTER: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è - success={success}, result={result}")
        
        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            session.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
            session['user_login'] = login
            session.permanent = True
            logger.info(f"REGISTER: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {login} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return redirect('/')
        else:
            logger.error(f"REGISTER: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login}: {result}")
            return render_template('register.html', error=result)
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"""
    if request.method == 'POST':
        login = request.form.get('login', '').strip()
        password = request.form.get('password', '')
        
        if not login or not password:
            return render_template('login.html', error="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        logger.info(f"LOGIN: –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ login={login}")
        if db.verify_password(login, password):
            session.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
            session['user_login'] = login
            session.permanent = True
            logger.info(f"LOGIN: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ login={login}")
            return redirect('/')
        else:
            logger.error(f"LOGIN: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è login={login}")
            return render_template('login.html', error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    session.clear()
    session['flash_message'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    return redirect('/')

@app.route('/admin')
def admin_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç —Å /admin –Ω–∞ /admin/users"""
    return redirect('/admin/users')

@app.route('/admin/users')
def admin_users():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    if user_role != 'admin':
        session['flash_message'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    
    return render_template('admin_users.html', users=users)

@app.route('/admin/users/delete/<int:user_id>', methods=['POST'])
def admin_delete_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    if user_role != 'admin':
        session['flash_message'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        return redirect('/')
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.delete_user_by_id(user_id):
        session['flash_message'] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω"
    else:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    return redirect('/admin/users')

@app.route('/telegram_auth', methods=['POST', 'GET'])
def telegram_auth():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram
    data = request.args if request.method == 'GET' else request.form
    auth_data = dict(data)
    hash_ = auth_data.pop('hash', None)
    auth_data.pop('user_id', None)  # –£–¥–∞–ª—è–µ–º user_id, –µ—Å–ª–∏ –µ—Å—Ç—å
    auth_data = {k: v for k, v in auth_data.items()}
    data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(auth_data.items())])
    secret_key = hashlib.sha256(config.TELEGRAM_TOKEN.encode()).digest()
    hmac_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
    if hmac_hash != hash_:
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', 403
    telegram_id = int(auth_data['id'])
    username = auth_data.get('username')
    first_name = auth_data.get('first_name')
    last_name = auth_data.get('last_name')
    
    logger.info(f"TELEGRAM_AUTH: telegram_id={telegram_id}, username={username}, first_name={first_name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_user = db.get_user_by_telegram_id(telegram_id)
    
    if not existing_user:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        db.create_user(telegram_id, username, first_name, last_name)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
    else:
        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {telegram_id}, —Ä–æ–ª—å: {existing_user.get('role')}")
    
    session.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
    session['telegram_id'] = telegram_id
    session.permanent = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å
    user_role = db.get_user_role(telegram_id)
    logger.info(f"TELEGRAM_AUTH: –ø–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å: {user_role}")
    
    if not user_role:
        # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        logger.info(f"TELEGRAM_AUTH: —Ä–æ–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /select_role")
        return redirect(url_for('select_role'))
    else:
        # –ï—Å–ª–∏ —Ä–æ–ª—å –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info(f"TELEGRAM_AUTH: —Ä–æ–ª—å –µ—Å—Ç—å ({user_role}), –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /")
        return redirect(url_for('index'))

@app.route('/bind_telegram', methods=['POST', 'GET'])
def bind_telegram():
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É"""
    user_login = session.get('user_login')
    if not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
        return redirect('/login')
    
    if request.method == 'GET':
        return render_template('bind_telegram.html', user_login=user_login)
    
    # POST –∑–∞–ø—Ä–æ—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏
    data = request.args if request.method == 'GET' else request.form
    auth_data = dict(data)
    hash_ = auth_data.pop('hash', None)
    auth_data.pop('user_id', None)
    auth_data = {k: v for k, v in auth_data.items()}
    data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(auth_data.items())])
    secret_key = hashlib.sha256(config.TELEGRAM_TOKEN.encode()).digest()
    hmac_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
    
    if hmac_hash != hash_:
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', 403
    
    telegram_id = int(auth_data['id'])
    username = auth_data.get('username')
    first_name = auth_data.get('first_name')
    last_name = auth_data.get('last_name')
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    success, message = db.bind_telegram_to_user(user_login, telegram_id, username, first_name, last_name)
    
    if success:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id –≤ —Å–µ—Å—Å–∏—é –∏ —É–¥–∞–ª—è–µ–º user_login
        session['telegram_id'] = telegram_id
        session.pop('user_login', None)  # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏–Ω –∏–∑ —Å–µ—Å—Å–∏–∏
        session['flash_message'] = "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
        return redirect('/')
    else:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {message}"
        return redirect('/bind_telegram')

@app.route('/select_role', methods=['GET', 'POST'])
def select_role():
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = session.get('telegram_id')
    if not telegram_id:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram"
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = db.get_user_by_telegram_id(telegram_id)
    if not user:
        session['flash_message'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return redirect('/')
    
    if request.method == 'POST':
        selected_role = request.form.get('selected_role')
        if selected_role in ['admin', 'driver', 'recipient']:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            db.set_user_role(telegram_id, selected_role)
            session['flash_message'] = f"–†–æ–ª—å '{selected_role}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            return redirect('/')
        else:
            session['flash_message'] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å"
            return redirect('/select_role')
    
    # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    user_name = user.get('first_name') or user.get('username') or f"ID: {telegram_id}"
    return render_template('select_role.html', 
                         user_name=user_name, 
                         telegram_id=telegram_id)

@app.route('/create_invite')
def create_invite():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
        user_id = telegram_id
    else:
        user_role = db.get_user_role_by_login(user_login)
        user = db.get_user_by_login(user_login)
        user_id = user.get('telegram_id') if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_role not in ['driver', 'admin']:
        session['flash_message'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"
        return redirect('/')
    
    if not user_id:
        session['flash_message'] = "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"
        return redirect('/settings')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_url = url_for('invite', user_id=user_id, _external=True)
    
    return render_template('create_invite.html', 
                         invite_url=invite_url, 
                         year=datetime.now().year)

@app.route('/invite')
def invite():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    user_id = request.args.get('user_id')
    if not user_id:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if telegram_id or user_login:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        return redirect('/')
    
    telegram_bot_id = config.TELEGRAM_BOT_ID
    return render_template('invite.html', user_id=user_id, telegram_bot_id=telegram_bot_id)

@app.route('/invite_auth', methods=['POST', 'GET'])
def invite_auth():
    try:
        auth_data = {**request.args, **request.form}
        if 'hash' not in auth_data:
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash', 400
        if 'auth_date' not in auth_data:
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth_date', 400
        user_id = auth_data.get('user_id')
        if not user_id:
            return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 400
        hash_ = auth_data.pop('hash')
        auth_data.pop('user_id', None)
        data_check_string = '\n'.join(
            f"{k}={v[0] if isinstance(v, list) else v}"
            for k, v in sorted(auth_data.items())
        )
        secret_key = hashlib.sha256(config.TELEGRAM_TOKEN.encode()).digest()
        hmac_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        if hmac_hash != hash_:
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', 403
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        new_user_telegram_id = int(auth_data['id'])
        username = auth_data.get('username')
        first_name = auth_data.get('first_name')
        last_name = auth_data.get('last_name')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        existing_user = db.get_user_by_telegram_id(new_user_telegram_id)
        
        if existing_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω–µ –º–µ–Ω—è–µ–º –µ–≥–æ —Ä–æ–ª—å
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_user_telegram_id}, —Ä–æ–ª—å: {existing_user.get('role')}")
            session['telegram_id'] = new_user_telegram_id
            session.permanent = True
            return render_template('invite_success.html')
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é 'recipient'
            db.create_user(new_user_telegram_id, username, first_name, last_name)
            db.set_user_role(new_user_telegram_id, 'recipient')
            
            logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {new_user_telegram_id}")
            session['telegram_id'] = new_user_telegram_id
            session.permanent = True
            return render_template('invite_success.html')
    except Exception as e:
        return 'Internal Server Error', 500

@app.route('/api/current_location')
def current_location():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        conn = sqlite3.connect('driver.db')
        cursor = conn.cursor()
        cursor.execute("""
            SELECT latitude, longitude, distance, is_at_work, timestamp 
            FROM locations 
            ORDER BY id DESC LIMIT 1
        """)
        location = cursor.fetchone()
        conn.close()
        
        if location:
            lat, lon, distance, is_at_work, timestamp = location
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã
            work_lat = config.WORK_LATITUDE
            work_lon = config.WORK_LONGITUDE
            work_radius = config.WORK_RADIUS
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            try:
                if timestamp:
                    if isinstance(timestamp, str):
                        dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                    else:
                        dt = timestamp
                    formatted_time = (dt + timedelta(hours=3)).strftime("%H:%M:%S")
                else:
                    formatted_time = "--:--:--"
            except:
                formatted_time = "--:--:--"
            
            return jsonify({
                'success': True,
                'location': {
                    'latitude': lat,
                    'longitude': lon,
                    'distance_to_work': distance,
                    'is_at_work': bool(is_at_work),
                    'timestamp': timestamp,
                    'formatted_time': formatted_time
                },
                'work_zone': {
                    'latitude': work_lat,
                    'longitude': work_lon,
                    'radius': work_radius
                },
                'status': '–í –ø—É—Ç–∏' if distance and distance > work_radius else '–í–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç'
            })
        else:
            return jsonify({
                'success': True,
                'location': {
                    'latitude': None,
                    'longitude': None,
                    'distance_to_work': None,
                    'is_at_work': False,
                    'timestamp': None,
                    'formatted_time': '--:--:--'
                },
                'work_zone': {
                    'latitude': config.WORK_LATITUDE,
                    'longitude': config.WORK_LONGITUDE,
                    'radius': config.WORK_RADIUS
                },
                'status': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏'
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({
            'success': False,
            'error': '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
            'location': {
                'latitude': None,
                'longitude': None,
                'formatted_time': '--:--:--'
            },
            'status': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'
        }), 200

@app.route('/tracker')
def real_time_tracker():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    
    try:
        return render_template('real_time_tracker.html', 
                             year=datetime.now().year,
                             work_lat=config.WORK_LATITUDE,
                             work_lon=config.WORK_LONGITUDE,
                             work_radius=config.WORK_RADIUS)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
        return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 500

@app.route('/bind_telegram_form', methods=['GET', 'POST'])
def bind_telegram_form():
    """–§–æ—Ä–º–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_login = session.get('user_login')
    if not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
        return redirect('/login')
    
    if request.method == 'GET':
        return render_template('bind_telegram_form.html', config=config)
    
    # POST –∑–∞–ø—Ä–æ—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    telegram_contact = request.form.get('telegram_contact', '').strip()
    verification_code = request.form.get('verification_code', '').strip()
    
    logger.info(f"BIND_TELEGRAM_FORM: user_login={user_login}, contact='{telegram_contact}', code='{verification_code}'")
    
    if not telegram_contact:
        return render_template('bind_telegram_form.html', 
                             error=True, 
                             message="–í–≤–µ–¥–∏—Ç–µ Telegram username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                             config=config)
    
    if not verification_code:
        # –ü–µ—Ä–≤—ã–π —à–∞–≥ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–µ—Å—Å–∏–∏
        session['telegram_contact'] = telegram_contact
        
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        return render_template('bind_telegram_form.html', 
                             telegram_contact=telegram_contact,
                             message="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞",
                             config=config)
    
    else:
        # –í—Ç–æ—Ä–æ–π —à–∞–≥ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        saved_contact = session.get('telegram_contact')
        
        if not saved_contact:
            return render_template('bind_telegram_form.html', 
                                 error=True, 
                                 message="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                 config=config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π /bind)
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ò—â–µ–º –∫–æ–¥, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π /bind (—Å telegram_id)
        cursor.execute("""
            SELECT telegram_id, chat_id FROM telegram_bind_codes
            WHERE bind_code = ? AND used_at IS NULL AND telegram_id IS NOT NULL
            AND datetime(created_at) > datetime('now', '-30 minutes')
        """, (verification_code,))
        
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            return render_template('bind_telegram_form.html', 
                                 telegram_contact=saved_contact,
                                 error=True, 
                                 message="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                 config=config)
        
        # –ö–æ–¥ –Ω–∞–π–¥–µ–Ω - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        telegram_id, chat_id = result
        
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT username, first_name FROM telegram_bind_codes
            WHERE telegram_id = ? AND bind_code = ? AND used_at IS NULL
        """, (telegram_id, verification_code))
        
        user_data = cursor.fetchone()
        
        if user_data:
            username, first_name = user_data
            last_name = None  # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç last_name
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ contact
            if saved_contact.startswith('@'):
                username = saved_contact[1:]
            else:
                username = saved_contact
            first_name = username
            last_name = None
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        cursor.execute("""
            UPDATE telegram_bind_codes 
            SET used_at = CURRENT_TIMESTAMP 
            WHERE telegram_id = ? AND bind_code = ? AND used_at IS NULL
        """, (telegram_id, verification_code))
        
        conn.commit()
        conn.close()
        
        success, message = db.bind_telegram_to_user(user_login, telegram_id, username, first_name, last_name)
        
        if success:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            session.pop('telegram_contact', None)
            
            return render_template('bind_telegram_form.html', 
                                 success=True,
                                 message="‚úÖ Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Telegram.",
                                 config=config)
        else:
            return render_template('bind_telegram_form.html', 
                                 telegram_contact=saved_contact,
                                 error=True, 
                                 message=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {message}",
                                 config=config)

@app.route('/resend_telegram_code', methods=['POST'])
def resend_telegram_code():
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_login = session.get('user_login')
    if not user_login:
        return jsonify({'success': False, 'message': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'})
        
        telegram_contact = data.get('telegram_contact', '').strip()
        
        if not telegram_contact:
            return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç'})
        
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {telegram_contact}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        import random
        code = ''.join([str(random.randint(0, 9)) for _ in range(6)])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
        session['telegram_bind_code'] = code
        session['telegram_contact'] = telegram_contact
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram
        success, message = send_telegram_code(telegram_contact, code)
        
        if success:
            logger.info(f"–ö–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è {telegram_contact}")
            return jsonify({'success': True, 'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'})
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {message}")
            return jsonify({'success': False, 'message': message})
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        return jsonify({'success': False, 'message': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'})

@app.route('/telegram_login')
def telegram_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram"""
    telegram_bot_username = config.TELEGRAM_BOT_USERNAME
    return render_template('telegram_login.html', telegram_bot_username=telegram_bot_username)

@app.route('/unbind_telegram', methods=['POST'])
def unbind_telegram():
    """–û—Ç–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_login = session.get('user_login')
    if not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
        return redirect('/login')
    
    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç
    success, message = db.unbind_telegram_from_user(user_login)
    
    if success:
        # –û—á–∏—â–∞–µ–º telegram_id –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        session.pop('telegram_id', None)
        session['flash_message'] = "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω"
    else:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏: {message}"
    
    return redirect('/settings')

@app.route('/logs')
def view_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
    try:
        with open('driver-bot.log', 'r', encoding='utf-8') as f:
            logs = f.read()
        return f"<pre>{logs}</pre>"
    except FileNotFoundError:
        return "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"

if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print(f"üìç –ê–¥—Ä–µ—Å: http://{config.WEB_HOST}:{config.WEB_PORT}")
    app.run(host=config.WEB_HOST, port=config.WEB_PORT, debug=False) 