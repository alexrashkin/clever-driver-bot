#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import re
import json
import logging
import requests
import hashlib
import hmac
import time
import pytz
import sqlite3
import asyncio
import threading
import traceback
import math
from datetime import datetime, timedelta
from flask import Flask, render_template, request, redirect, url_for, session, jsonify, flash, make_response, send_from_directory
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç Flask-Limiter: –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from flask_limiter import Limiter
    from flask_limiter.util import get_remote_address
except Exception:  # –ø–∞–∫–µ—Ç –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    Limiter = None
    from flask import request as _flask_request

    def get_remote_address():
        return _flask_request.remote_addr
from werkzeug.utils import secure_filename

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
from config.settings import config
from bot.database import Database
from bot.utils import format_distance, format_timestamp, validate_coordinates, create_work_notification, calculate_distance, is_at_work, get_greeting
from web.location_web_tracker import location_web_tracker, web_tracker
from web.security import security_check, auth_security_check, password_reset_security_check, security_manager, log_security_event, login_rate_limit, password_reset_rate_limit, csrf_protect

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file():
    env_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª: {env_file}")
    if os.path.exists(env_file):
        print("‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    if key.lower().startswith('export '):
                        key = key[7:].strip()
                    if (value.startswith('"') and value.endswith('"')) or (value.startswith("'") and value.endswith("'")):
                        value = value[1:-1]
                    os.environ[key] = value
                    os.environ[key.upper()] = value
                    print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {key}")
        print(f"üìß EMAIL_ENABLED = {os.environ.get('EMAIL_ENABLED', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
    else:
        print("‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
load_env_file()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.environ.get('WEB_SECRET_KEY', 'default_secret_key')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–π
app.config['SESSION_COOKIE_SECURE'] = os.environ.get('SESSION_COOKIE_SECURE', 'False') == 'True'
app.config['SESSION_COOKIE_HTTPONLY'] = os.environ.get('SESSION_COOKIE_HTTPONLY', 'True') == 'True'
app.config['SESSION_COOKIE_SAMESITE'] = os.environ.get('SESSION_COOKIE_SAMESITE', 'Lax')
# –ß–∏—Ç–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –∏–∑ .env (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö), –¥–µ—Ñ–æ–ª—Ç 7 –¥–Ω–µ–π = 604800
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(seconds=int(os.environ.get('SESSION_COOKIE_MAX_AGE', 604800)))

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database("driver.db")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Blueprint –¥–ª—è –≤–µ–±-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
app.register_blueprint(location_web_tracker)

# ------------------------------
# –ù–µ–±–æ–ª—å—à–æ–π –∫—ç—à –¥–ª—è ETA, —á—Ç–æ–±—ã –Ω–µ –≤—ã–±–∏–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã Yandex Routing API
# –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 —Å–µ–∫) –∏ —É—á–∏—Ç—ã–≤–∞–µ–º Retry-After
# –ö–ª—é—á –∫—ç—à–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ñ–ª–∞–≥–∞ –ø—Ä–æ–±–æ–∫
# ------------------------------
_eta_cache_store = {}
_eta_cache_lock = threading.Lock()
_eta_global_next_allowed_ts = 0.0  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—Ç—Å–µ—á–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á—ë—Ç–æ–º Retry-After

def _eta_cache_get(cache_key: str):
    now_ts = time.time()
    with _eta_cache_lock:
        entry = _eta_cache_store.get(cache_key)
        if entry and entry.get('expires_at', 0) > now_ts:
            return entry['data']
    return None

def _eta_cache_set(cache_key: str, data: dict, ttl_sec: int):
    expires_at = time.time() + max(1, int(ttl_sec))
    with _eta_cache_lock:
        _eta_cache_store[cache_key] = {
            'data': data,
            'expires_at': expires_at,
        }

def _eta_set_global_backoff(retry_after_header: str):
    """–£—á–∏—Ç—ã–≤–∞–µ–º Retry-After –∏–∑ –æ—Ç–≤–µ—Ç–∞ –Ø–Ω–¥–µ–∫—Å–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –∏–ª–∏ HTTP-date.
    """
    global _eta_global_next_allowed_ts
    if not retry_after_header:
        return
    retry_after_header = str(retry_after_header).strip()
    try:
        # –§–æ—Ä–º–∞—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        sec = int(retry_after_header)
        _eta_global_next_allowed_ts = max(_eta_global_next_allowed_ts, time.time() + max(1, sec))
        return
    except Exception:
        pass
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å HTTP-date
    try:
        from email.utils import parsedate_to_datetime
        dt = parsedate_to_datetime(retry_after_header)
        if dt is not None:
            _eta_global_next_allowed_ts = max(_eta_global_next_allowed_ts, dt.timestamp())
    except Exception:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        pass

def _eta_set_default_backoff(seconds: int = None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π backoff, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∏—Å–ª–∞–ª Retry-After."""
    global _eta_global_next_allowed_ts
    try:
        sec = int(seconds) if seconds is not None else int(os.environ.get('ETA_DEFAULT_BACKOFF_SEC', 60))
    except Exception:
        sec = 60
    _eta_global_next_allowed_ts = max(_eta_global_next_allowed_ts, time.time() + max(1, sec))

# –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
@app.after_request
def add_security_headers(response):
    """–î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤"""
    # Content Security Policy - —Å—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    csp_policy = (
        "default-src 'self'; "
        "script-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://code.jquery.com https://telegram.org https://t.me https://api-maps.yandex.ru https://yastatic.net; "
        "style-src 'self' 'unsafe-inline' https://cdn.jsdelivr.net https://fonts.googleapis.com; "
        "font-src 'self' https://cdn.jsdelivr.net https://fonts.gstatic.com; "
        "img-src 'self' data: https:; "
        "connect-src 'self' https://api.telegram.org https://api-maps.yandex.ru; "
        "frame-src 'self' https://telegram.org https://t.me https://oauth.telegram.org; "
        "object-src 'none'; "
        "base-uri 'self'; "
        "form-action 'self'; "
        "frame-ancestors 'self'; "
        "upgrade-insecure-requests;"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    response.headers['Content-Security-Policy'] = csp_policy
    response.headers['X-Content-Type-Options'] = 'nosniff'
    response.headers['X-Frame-Options'] = 'SAMEORIGIN'
    response.headers['X-XSS-Protection'] = '1; mode=block'
    response.headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'
    response.headers['Referrer-Policy'] = 'strict-origin-when-cross-origin'
    response.headers['Permissions-Policy'] = 'geolocation=(self), microphone=(), camera=()'
    
    return response

def get_current_user():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–µ—Å—Å–∏–∏ (Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if telegram_id:
        return db.get_user_by_telegram_id(telegram_id)
    elif user_login:
        return db.get_user_by_login(user_login)
    return None

def get_current_user_role():
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if telegram_id:
        return db.get_user_role(telegram_id)
    elif user_login:
        return db.get_user_role_by_login(user_login)
    return None

def send_telegram_arrival(user_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏, —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å (user_id –º–æ–∂–µ—Ç –±—ã—Ç—å telegram_id –∏–ª–∏ login)
    if isinstance(user_id, (int, str)) and str(user_id).isdigit():
        user_role = db.get_user_role(int(user_id))
        user_info = db.get_user_by_telegram_id(int(user_id))
    else:
        user_role = db.get_user_role_by_login(user_id)
        user_info = db.get_user_by_login(user_id)

    if user_role not in ['admin', 'driver']:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å —Ä–æ–ª—å—é {user_role} –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return False

    notification_text = create_work_notification()

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–µ–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
    notification_log_id = db.create_notification_log(
        notification_type='manual',
        sender_id=user_info.get('id') if user_info else None,
        sender_telegram_id=user_info.get('telegram_id') if user_info else None,
        sender_login=user_info.get('login') if user_info else None,
        notification_text=notification_text
    )
    if not notification_log_id:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–Ω—è–≤—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    conn = db.get_connection()
    cursor = conn.cursor()
    try:
        cursor.execute(
            """
            SELECT DISTINCT recipient_telegram_id
            FROM invitations
            WHERE inviter_id = ?
              AND status = 'accepted'
              AND recipient_telegram_id IS NOT NULL
            """,
            (user_info.get('id'),)
        )
        users = cursor.fetchall()
    finally:
        conn.close()

    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –Ω–µ—Ç ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
    if not users:
        db.complete_notification_log(notification_log_id, 0, 0)
        if user_info:
            send_confirmation_messages(notification_log_id, user_info, notification_text + "\n(–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)", 'manual')
        logger.info("–†—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –Ω–µ—Ç ‚Äî –ª–æ–≥ —Å–æ–∑–¥–∞–Ω, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return True

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (pending)
    for (telegram_id,) in users:
        recipient_info = db.get_user_by_telegram_id(telegram_id)
        recipient_name = f"{recipient_info.get('first_name', '')} {recipient_info.get('last_name', '')}".strip() if recipient_info else None
        db.add_notification_detail(
            notification_log_id=notification_log_id,
            recipient_telegram_id=telegram_id,
            recipient_name=recipient_name,
            status="pending"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    token = os.environ.get('TELEGRAM_TOKEN') or os.environ.get('TELEGRAM_BOT_TOKEN') or 'default_token'
    url = f"https://api.telegram.org/bot{token}/sendMessage"

    sent_count = 0
    failed_count = 0
    total_users = len(users)
    for (telegram_id,) in users:
        try:
            response = requests.post(url, data={"chat_id": telegram_id, "text": notification_text}, timeout=15)
            if response.status_code == 200 and response.json().get('ok'):
                sent_count += 1
                db.update_notification_detail(notification_log_id, telegram_id, "sent")
            else:
                error_msg = response.json().get('description') if response.headers.get('content-type','').startswith('application/json') else f"HTTP {response.status_code}"
                failed_count += 1
                db.update_notification_detail(notification_log_id, telegram_id, "failed", error_msg)
        except Exception as e:
            failed_count += 1
            db.update_notification_detail(notification_log_id, telegram_id, "failed", str(e))

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    db.complete_notification_log(notification_log_id, sent_count, failed_count)
    if user_info:
        send_confirmation_messages(notification_log_id, user_info, notification_text, 'manual')

    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count} –∏–∑ {total_users}")
    return sent_count > 0

def send_alternative_notification():
    """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    try:
        text = create_work_notification()
        logger.info(f"–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: {text}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def send_confirmation_messages(notification_log_id, sender_info, notification_text, notification_type):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    from datetime import datetime
    current_time = datetime.now().strftime('%H:%M:%S')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    details = db.get_notification_details(notification_log_id)
    successful_recipients = []
    failed_recipients = []
    
    for detail in details:
        if detail['status'] == 'sent':
            recipient_name = detail['recipient_name'] or f"ID: {detail['recipient_telegram_id']}"
            successful_recipients.append(f"‚Ä¢ {recipient_name}")
        else:
            error_msg = detail.get('error_message', 'Unknown error')
            recipient_name = detail['recipient_name'] or f"ID: {detail['recipient_telegram_id']}"
            failed_recipients.append(f"‚Ä¢ {recipient_name} (–æ—à–∏–±–∫–∞: {error_msg})")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users WHERE role = 'driver' AND telegram_id IS NOT NULL")
    drivers = cursor.fetchall()
    conn.close()
    
    if drivers:
        driver_confirmation = f"""‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(successful_recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º:
üìÖ –í—Ä–µ–º—è: {current_time}
üì¢ –¢–µ–∫—Å—Ç: '{notification_text}'

üéØ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:
{chr(10).join(successful_recipients)}"""
        
        if failed_recipients:
            driver_confirmation += f"""

‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:
{chr(10).join(failed_recipients)}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º
        token = os.environ.get('TELEGRAM_TOKEN', 'default_token')
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        for (driver_telegram_id,) in drivers:
            try:
                response = requests.post(url, data={"chat_id": driver_telegram_id, "text": driver_confirmation}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    conn = db.get_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT telegram_id FROM users WHERE role = 'admin' AND telegram_id IS NOT NULL")
    admins = cursor.fetchall()
    conn.close()
    
    if admins:
        sender_name = f"{sender_info.get('first_name', '')} {sender_info.get('last_name', '')}".strip()
        if not sender_name:
            sender_name = sender_info.get('login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        admin_confirmation = f"""üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–´
üìÖ –í—Ä–µ–º—è: {current_time}
üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}
üìù –¢–∏–ø: {notification_type}
üì¢ –¢–µ–∫—Å—Ç: '{notification_text}'

üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({len(successful_recipients)}):
{chr(10).join(successful_recipients)}"""
        
        if failed_recipients:
            admin_confirmation += f"""

‚ùå –û—à–∏–±–∫–∏ ({len(failed_recipients)}):
{chr(10).join(failed_recipients)}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for (admin_telegram_id,) in admins:
            try:
                response = requests.post(url, data={"chat_id": admin_telegram_id, "text": admin_confirmation}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}: {e}")
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
    db.mark_confirmation_sent(notification_log_id)

def send_telegram_code(telegram_contact, code):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if not telegram_contact or not telegram_contact.strip():
            return False, "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
        
        telegram_contact = telegram_contact.strip()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ: username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if telegram_contact.startswith('@'):
            # Username - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            username = telegram_contact[1:]  # –£–±–∏—Ä–∞–µ–º @
            if not username:
                return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç @username"
            chat_id = f"@{username}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ username: @{username}")
        elif telegram_contact.startswith('+'):
            # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
            phone = telegram_contact
            if len(phone) < 10:
                return False, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
            
            # –î–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é –∫–∞–∫ chat_id
            # Telegram API –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
            chat_id = phone
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä –∫–∞–∫ chat_id: {chat_id}")
        else:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ username –±–µ–∑ @
            username = telegram_contact
            if not username:
                return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            chat_id = f"@{username}"
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ username (–±–µ–∑ @): @{username}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API
        url = f"https://api.telegram.org/bot{os.environ.get('TELEGRAM_TOKEN', 'default_token')}/sendMessage"
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Markdown –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        message_text = f"""üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

–í–∞—à –∫–æ–¥: {code}

–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞.

‚ö†Ô∏è –ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–º—É!

üí° –ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
‚Ä¢ –í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º @{os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')}"""
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ parse_mode
        data = {
            'chat_id': chat_id,
            'text': message_text
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat_id}")
        response = requests.post(url, json=data, timeout=10)
        logger.info(f"sendMessage response: HTTP {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                logger.info(f"–ö–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                return True, "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram"
            else:
                error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {error_msg}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if "Chat not found" in error_msg:
                    if telegram_contact.startswith('+'):
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {telegram_contact} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @{os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')} /start"
                    else:
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram"
                elif "Forbidden" in error_msg:
                    return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ @{os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')}"
                elif "Bad Request" in error_msg:
                    if "chat_id is empty" in error_msg:
                        return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username –∏–ª–∏ +7XXXXXXXXXX"
                    else:
                        return False, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞: {telegram_contact}"
                elif "chat not found" in error_msg.lower():
                    if telegram_contact.startswith('+'):
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {telegram_contact} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @{os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')} /start"
                    else:
                        return False, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ username —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram"
                else:
                    return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_msg}"
        else:
            logger.error(f"HTTP –æ—à–∏–±–∫–∞ {response.status_code} –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞")
            try:
                error_data = response.json()
                logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_data}")
            except:
                logger.error(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (HTTP {response.status_code})"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}")
        return False, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {e}"

def find_telegram_user_by_username(username):
    """–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram –ø–æ username"""
    try:
        # –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å getChat,
        # —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–∏—Å–∞–ª–∏ –±–æ—Ç—É.
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º—ã –±—É–¥–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é.
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω.
        
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π sendMessage")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        return {
            'id': f"@{username}",
            'username': username,
            'first_name': username,
            'last_name': None
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username {username}: {e}")
        return None

@app.route('/')
@security_check
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    
    try:
        tracking_status = db.get_tracking_status()
        
        # –ü–æ–ª—É—á–∞–µ–º flash —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Å–µ—Å—Å–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ —Å—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º –µ–≥–æ
        message = session.pop('flash_message', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å)
        telegram_id = session.get('telegram_id')
        user_login = session.get('user_login')
        user_role = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        
        logger.info(f"INDEX: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - telegram_id={telegram_id}, user_login={user_login}")
        
        if telegram_id:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
            user_role = db.get_user_role(telegram_id)
            logger.info(f"INDEX: telegram_id={telegram_id}, –ø–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å: {user_role}")
            
            # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
            if not user_role:
                logger.info(f"INDEX: —Ä–æ–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /select_role")
                return redirect('/select_role')
            
            user = db.get_user_by_telegram_id(telegram_id)
            is_authorized = True
            user_name = user.get('first_name') or user.get('username') or f"ID: {telegram_id}"
            auth_type = 'telegram'
        elif user_login:
            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
            logger.info(f"INDEX: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω user_login={user_login}")
            user_role = db.get_user_role_by_login(user_login)
            logger.info(f"INDEX: –ø–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å user_role={user_role}")
            
            if not user_role:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–ª–∏ —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞
                session.pop('user_login', None)
                return redirect('/login')
            
            user = db.get_user_by_login(user_login)
            is_authorized = True
            user_name = user.get('first_name') or user.get('last_name') or user_login
            auth_type = 'login'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID
            telegram_id = user.get('telegram_id')
            logger.info(f"INDEX: –ø—Ä–æ–≤–µ—Ä–∫–∞ telegram_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login}: telegram_id={telegram_id}")
            if not telegram_id:
                # –ï—Å–ª–∏ –Ω–µ—Ç Telegram ID - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –¥–ª—è driver
                logger.info(f"INDEX: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login} –Ω–µ—Ç telegram_id")
                if user_role == 'driver':
                    logger.info(f"INDEX: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_login} –∏–º–µ–µ—Ç —Ä–æ–ª—å driver, —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    conn = db.get_connection()
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
                    recipients_count = cursor.fetchone()[0]
                    conn.close()
                    
                    if recipients_count == 0:
                        session['flash_message'] = "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                    else:
                        session['flash_message'] = None
                else:
                    logger.info(f"INDEX: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login} –Ω–µ—Ç telegram_id, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_recipient_only=True")
                    session['flash_message'] = "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç"
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä
                    is_recipient_only = True
                    is_admin = False
                    is_driver = False
                    buttons = []
                    work_latitude = user.get('work_latitude') if user else None
                    work_longitude = user.get('work_longitude') if user else None
                    work_radius = user.get('work_radius') if user else None
                    return render_template(
                        'index.html',
                        tracking_status=tracking_status,
                        message=session.pop('flash_message', None),
                        year=datetime.now().year,
                        buttons=buttons,
                        work_latitude=work_latitude,
                        work_longitude=work_longitude,
                        work_radius=work_radius,
                        is_authorized=is_authorized,
                        is_recipient_only=is_recipient_only,
                        is_admin=is_admin,
                        is_driver=is_driver,
                        auth_type=auth_type,
                        user_name=user_name,
                        needs_telegram_binding=True
                    )
        
        # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if telegram_id or user_login:
            logger.info(f"INDEX: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–µ–π user_role={user_role}")
            if user_role == 'recipient':
                # –ü–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                buttons = []
                work_latitude = user.get('work_latitude') if user else None
                work_longitude = user.get('work_longitude') if user else None
                work_radius = user.get('work_radius') if user else None
                is_recipient_only = True
                is_admin = False
                is_driver = False
            elif user_role == 'admin':
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º
                buttons = user.get('buttons', [])
                work_latitude = user.get('work_latitude')
                work_longitude = user.get('work_longitude')
                work_radius = user.get('work_radius')
                is_recipient_only = False
                is_admin = True
                is_driver = False
            elif user_role == 'driver':
                # –í–æ–¥–∏—Ç–µ–ª—å (–≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞) - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                buttons = user.get('buttons', [])
                work_latitude = user.get('work_latitude')
                work_longitude = user.get('work_longitude')
                work_radius = user.get('work_radius')
                is_recipient_only = False
                is_admin = False
                is_driver = True
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤—ã–±–æ—Ä —Ä–æ–ª–∏
                return redirect('/select_role')
        else:
            buttons = ['üìç –ï–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É', 'üöó –ü–æ–¥—ä–µ–∑–∂–∞—é –∫ –¥–æ–º—É', '‚è∞ –û–ø–∞–∑–¥—ã–≤–∞—é –Ω–∞ 10 –º–∏–Ω—É—Ç']
            work_latitude = None
            work_longitude = None
            work_radius = None
            is_authorized = False
            is_recipient_only = False  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
            is_admin = False
            is_driver = False
            user_name = None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ Telegram
        needs_telegram_binding = is_authorized and not telegram_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        has_recipients = False
        if is_authorized:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
            recipients_count = cursor.fetchone()[0]
            conn.close()
            has_recipients = recipients_count > 0
        
        return render_template(
            'index.html',
            tracking_status=tracking_status,
            message=message,  # –ü–µ—Ä–µ–¥–∞–µ–º flash —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω
            year=datetime.now().year,
            buttons=buttons,
            work_latitude=work_latitude,
            work_longitude=work_longitude,
            work_radius=work_radius,
            is_authorized=is_authorized,
            is_recipient_only=is_recipient_only,
            is_admin=is_admin,
            is_driver=is_driver,
            auth_type=auth_type if is_authorized else None,
            user_name=user_name,
            needs_telegram_binding=needs_telegram_binding,
            has_recipients=has_recipients
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return render_template('index.html', tracking_status=False, message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", year=datetime.now().year)

@app.route('/mobile')
@security_check
def mobile_tracker():
    """–†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    logger.info(f"MOBILE_TRACKER: telegram_id={telegram_id}, user_login={user_login}")
    
    if not telegram_id and not user_login:
        logger.info("MOBILE_TRACKER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    
    logger.info("MOBILE_TRACKER: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–∫–µ—Ä")
    return render_template('mobile_tracker.html', year=datetime.now().year)

@app.route('/debug_status')
@security_check
def debug_status():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    return render_template('debug_status.html')

@app.route('/mobile_tracker.html')
@security_check
def mobile_tracker_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–π —Å—Å—ã–ª–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    return redirect('/mobile')

@app.route('/toggle', methods=['POST'])
@security_check
def toggle_tracking():
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    if user_role == 'recipient':
        session['flash_message'] = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"
        return redirect('/')
    
    print("=== TOGGLE_TRACKING –í–´–ó–í–ê–ù–ê ===")
    try:
        print("=== –í TRY –ë–õ–û–ö–ï ===")
        logger.info("toggle_tracking: –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        current_status = db.get_tracking_status()
        new_status = not current_status
        db.set_tracking_status(new_status)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞
        message = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if new_status else "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
        session['flash_message'] = message
        
        logger.info(f"toggle_tracking: –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}")
        print(f"=== –í–´–ü–û–õ–ù–Ø–ï–ú REDIRECT, —Å—Ç–∞—Ç—É—Å: {new_status} ===")
        
        # –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û–ï –†–ï–®–ï–ù–ò–ï: JavaScript —Ä–µ–¥–∏—Ä–µ–∫—Ç
        # Flask redirect –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º JS
        redirect_html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <script>
                // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
                window.location.replace('/');
            </script>
        </head>
        <body>
            <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
        </body>
        </html>
        """
        return redirect_html
        
    except Exception as e:
        print(f"=== EXCEPTION: {e} ===")
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        session['flash_message'] = "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"
        redirect_html = """
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <script>
                window.location.replace('/');
            </script>
        </head>
        <body>
            <p>–û—à–∏–±–∫–∞. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...</p>
        </body>
        </html>
        """
        return redirect_html

@app.route('/manual_arrival', methods=['POST'])
@security_check
def manual_arrival():
    """–†—É—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ —á–µ—Ä–µ–∑ –≤–µ–±-—Ñ–æ—Ä–º—É"""
    try:
        telegram_id = session.get('telegram_id')
        user_login = session.get('user_login')
        
        if not telegram_id and not user_login:
            message = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if telegram_id:
                user_role = db.get_user_role(telegram_id)
                user_id = telegram_id
            else:
                user_role = db.get_user_role_by_login(user_login)
                user_id = user_login
            
            if user_role == 'recipient':
                message = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
            elif send_telegram_arrival(user_id):
                message = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
            else:
                if send_alternative_notification():
                    message = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º)"
                else:
                    message = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏ –∏ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç
        session['flash_message'] = message
        return redirect(url_for('index'))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        session['flash_message'] = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        return redirect(url_for('index'))

@app.route('/api/status')
@security_check
def api_status():
    """API —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        tracking_active = db.get_tracking_status()
        return jsonify({
            'success': True,
            'tracking_active': tracking_active,
            'tracking': tracking_active  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å JavaScript
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/toggle', methods=['POST'])
@security_check
def api_toggle():
    """API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        telegram_id = session.get('telegram_id')
        if telegram_id and db.get_user_role(telegram_id) == 'recipient':
            return jsonify({'success': False, 'error': '–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º'}), 403
        current_status = db.get_tracking_status()
        new_status = not current_status
        db.set_tracking_status(new_status)
        
        return jsonify({
            'success': True,
            'tracking_active': new_status
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/history')
@security_check
def api_history():
    """API –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π"""
    try:
        limit = request.args.get('limit', 10, type=int)
        history = db.get_history(limit)
        logger.info(f"DEBUG: history = {history}")
        
        formatted_history = []
        for record in history:
            logger.info(f"DEBUG: record = {record}")
            formatted_history.append({
                'latitude': record['latitude'],
                'longitude': record['longitude'],
                'distance': format_distance(record['distance']) if record['distance'] else '0 –º',
                'is_at_work': bool(record['is_at_work']),
                'timestamp': format_timestamp(record['timestamp'])
            })
        
        return jsonify({
            'success': True,
            'history': formatted_history
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/location', methods=['POST'])
@security_check
def api_location():
    """API –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥
    user_agent = request.headers.get('User-Agent', '')
    if 'JSTAG' in user_agent or 'eval(' in user_agent or 'document.write' in user_agent:
        logger.error(f"SECURITY: –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π User-Agent –≤ API: {user_agent}")
        return jsonify({'error': 'Access denied'}), 403
    
    try:
        data = request.get_json()
        if not data:
            logger.warning('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ POST /api/location')
            return jsonify({'_type': 'status'}), 200

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (latitude/longitude) –∏ OwnTracks (_type/lat/lon)
        latitude = longitude = tst = None
        
        # –§–æ—Ä–º–∞—Ç OwnTracks
        if data.get('_type') == 'location' and all(k in data for k in ('lat', 'lon', 'tst')):
            latitude = data['lat']
            longitude = data['lon']
            tst = data['tst']
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        elif 'latitude' in data and 'longitude' in data:
            latitude = data['latitude']
            longitude = data['longitude']
            tst = time.time()
        
        if latitude is not None and longitude is not None:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            telegram_id = session.get('telegram_id')
            user = None
            if telegram_id:
                user = db.get_user_by_telegram_id(telegram_id)
            
            # –î–ª—è OwnTracks –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user_id –≤ URL –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            if data.get('_type') == 'location' and not telegram_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä user_id –≤ URL
                user_id_param = request.args.get('user_id')
                if user_id_param:
                    try:
                        telegram_id = int(user_id_param)
                        user = db.get_user_by_telegram_id(telegram_id)
                        if user:
                            logger.info(f"OwnTracks: –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ user_id={telegram_id}")
                        else:
                            logger.warning(f"OwnTracks: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å user_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    except ValueError:
                        logger.warning(f"OwnTracks: –Ω–µ–≤–µ—Ä–Ω—ã–π user_id={user_id_param}")
                
                # –ï—Å–ª–∏ user_id –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É
                if not user:
                    users = db.get_all_users()
                    
                    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–¥–º–∏–Ω–∞
                    admin_user = None
                    driver_users = []
                    
                    for u in users:
                        if u.get('role') == 'admin':
                            admin_user = u
                        elif u.get('role') == 'driver':
                            driver_users.append(u)
                    
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞–¥–º–∏–Ω > –≤–æ–¥–∏—Ç–µ–ª–∏ > –ª—é–±–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    if admin_user:
                        telegram_id = admin_user.get('telegram_id')
                        user = admin_user
                        logger.info(f"OwnTracks: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–º–∏–Ω–∞ ID={admin_user.get('id')}, telegram_id={telegram_id}")
                    elif driver_users:
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ
                        telegram_id = driver_users[0].get('telegram_id')
                        user = driver_users[0]
                        logger.info(f"OwnTracks: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–¥–∏—Ç–µ–ª—è ID={driver_users[0].get('id')}, telegram_id={telegram_id}, name={driver_users[0].get('first_name', 'Unknown')}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∞–¥–º–∏–Ω–∞, –Ω–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        for u in users:
                            if u.get('telegram_id'):
                                telegram_id = u.get('telegram_id')
                                user = u
                                logger.info(f"OwnTracks: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—é–±–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID={u.get('id')}, telegram_id={telegram_id}, name={u.get('first_name', 'Unknown')}")
                                break
                        else:
                            logger.warning("OwnTracks: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–∞–ª–∏–¥–Ω—ã
            ok, _ = validate_coordinates(latitude, longitude)
            if ok:
                if user:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å user_locations
                    if telegram_id:
                        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å telegram_id
                        location_id = db.add_user_location(
                            telegram_id=telegram_id,
                            latitude=latitude,
                            longitude=longitude,
                            accuracy=data.get('accuracy'),
                            altitude=data.get('altitude'),
                            speed=data.get('speed'),
                            heading=data.get('heading')
                        )
                        
                        if location_id:
                            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
                            last_location = db.get_user_last_location(telegram_id)
                            at_work = last_location.get('is_at_work', False) if last_location else False
                            distance = last_location.get('distance_to_work', 0) if last_location else 0
                            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ user_locations: latitude={latitude}, longitude={longitude}, is_at_work={at_work}")
                        else:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                            return jsonify({'success': False, 'error': 'Database error'}), 500
                    else:
                        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ telegram_id (–ø—Ä—è–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)
                        conn = sqlite3.connect(db.db_path)
                        c = conn.cursor()
                        try:
                            from bot.utils import is_at_work
                            user_role = user.get('role')
                            user_work_lat = user.get('work_latitude')
                            user_work_lon = user.get('work_longitude')
                            user_work_radius = user.get('work_radius')
                            is_at_work_status = is_at_work(latitude, longitude, user_role, user_work_lat, user_work_lon, user_work_radius)
                            
                            c.execute('''
                                INSERT INTO user_locations 
                                (user_id, telegram_id, latitude, longitude, accuracy, altitude, speed, heading, is_at_work)
                                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                            ''', (user['id'], user['id'], latitude, longitude, data.get('accuracy'), data.get('altitude'), data.get('speed'), data.get('heading'), is_at_work_status))
                            
                            location_id = c.lastrowid
                            conn.commit()
                            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ user_locations (–±–µ–∑ telegram_id): latitude={latitude}, longitude={longitude}, is_at_work={is_at_work_status}")
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                            from bot.utils import calculate_distance
                            if user_work_lat and user_work_lon:
                                distance = calculate_distance(latitude, longitude, user_work_lat, user_work_lon)
                            else:
                                # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                                return jsonify({'success': False, 'error': '–†–∞–±–æ—á–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ.'}), 400
                            
                            at_work = is_at_work_status
                        except Exception as e:
                            conn.close()
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ telegram_id: {e}")
                            return jsonify({'success': False, 'error': 'Database error'}), 500
                        finally:
                            conn.close()
                else:
                    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è'}), 401
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
                if data.get('_type') == 'location':
                    return jsonify({'_type': 'location', 'lat': latitude, 'lon': longitude, 'tst': tst}), 200
                else:
                    return jsonify({
                        'success': True, 
                        'is_at_work': at_work, 
                        'distance': distance,
                        'latitude': latitude,
                        'longitude': longitude
                    }), 200
            else:
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: latitude={latitude}, longitude={longitude}")
                return jsonify({'success': False, 'error': 'Invalid coordinates'}), 400
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (status, —Å–ª—É–∂–µ–±–Ω—ã–µ –∏ –æ—à–∏–±–∫–∏) ‚Äî status
            logger.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø–æ–ª–µ–π: _type={data.get('_type')}")
            return jsonify({'_type': 'status'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {e}")
        return jsonify({'_type': 'status'}), 200

@app.route('/api/notify', methods=['POST'])
@security_check
def api_notify():
    """API —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        user_role = get_current_user_role()
        if user_role == 'recipient':
            return jsonify({'success': False, 'error': '–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä—É—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 403

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ
        token = os.environ.get('TELEGRAM_TOKEN') or os.environ.get('TELEGRAM_BOT_TOKEN')
        if not token or token == 'default_token':
            logger.error("API_NOTIFY: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN/TELEGRAM_BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            return jsonify({'success': False, 'error': 'TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}), 200

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            conn = db.get_connection()
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM users WHERE role IS NOT NULL AND telegram_id IS NOT NULL")
            recipients_count = cursor.fetchone()[0]
            conn.close()
        except Exception as e:
            logger.error(f"API_NOTIFY: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
            recipients_count = 0
        
        if recipients_count == 0:
            return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'}), 200
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ª–æ–≥–∏–Ω
        user_id = user.get('telegram_id') or user.get('login')
        if send_telegram_arrival(user_id):
            return jsonify({'success': True})
        else:
            if send_alternative_notification():
                return jsonify({'success': True})
            else:
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—è–º–∏ –∏ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/user1', methods=['POST'])
@security_check
def api_user1():
    try:
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_current_user_role()
        if user_role not in ['admin', 'driver']:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 403
        
        # –†–∞–Ω–Ω–∏–π —á–µ–∫ —Ç–æ–∫–µ–Ω–∞ Telegram
        token_env = os.environ.get('TELEGRAM_TOKEN') or os.environ.get('TELEGRAM_BOT_TOKEN')
        if not token_env or token_env == 'default_token':
            logger.error("API_BUTTON: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN/TELEGRAM_BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            return jsonify({'success': False, 'error': 'TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'}), 200

        buttons = user.get('buttons', [])
        greeting = get_greeting() + '!'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        name = buttons[0] if buttons else 'üìç –ï–¥—É –Ω–∞ —Ä–∞–±–æ—Ç—É'
        text = f"{greeting} {name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏
        token = token_env
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL")
        users = cursor.fetchall()
        conn.close()
        
        sent_count = 0
        for (user_telegram_id,) in users:
            try:
                response = requests.post(url, data={"chat_id": user_telegram_id, "text": text}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
        
        if sent_count > 0:
            return jsonify({'success': True})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if len(users) == 0:
                logger.info(f"API_BUTTON: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞")
                return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'})
            else:
                logger.warning(f"API_BUTTON: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ user1: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/user2', methods=['POST'])
@security_check
def api_user2():
    try:
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_current_user_role()
        if user_role not in ['admin', 'driver']:
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 403
        
        buttons = user.get('buttons', [])
        greeting = get_greeting() + '!'
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        name = buttons[1] if len(buttons) > 1 else 'üöó –ü–æ–¥—ä–µ–∑–∂–∞—é –∫ –¥–æ–º—É'
        text = f"{greeting} {name}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏
        token = os.environ.get('TELEGRAM_TOKEN', 'default_token')
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL")
        users = cursor.fetchall()
        conn.close()
        
        sent_count = 0
        for (user_telegram_id,) in users:
            try:
                response = requests.post(url, data={"chat_id": user_telegram_id, "text": text}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
        
        if sent_count > 0:
            return jsonify({'success': True})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if len(users) == 0:
                logger.info(f"API_BUTTON: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞")
                return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'})
            else:
                logger.warning(f"API_BUTTON: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}), 500
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ user2: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/button/<int:idx>', methods=['POST'])
@security_check
def api_button(idx):
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É —Å –∏–Ω–¥–µ–∫—Å–æ–º idx"""
    try:
        logger.info(f"API_BUTTON: –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ idx={idx}")
        user = get_current_user()
        if not user:
            logger.error(f"API_BUTTON: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_current_user_role()
        logger.info(f"API_BUTTON: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_role={user_role}")
        if user_role not in ['admin', 'driver']:
            logger.error(f"API_BUTTON: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ user_role={user_role}")
            return jsonify({'success': False, 'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 403
        
        buttons = user.get('buttons', [])
        logger.info(f"API_BUTTON: –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è buttons={buttons}")
        if idx < 0 or idx >= len(buttons):
            logger.error(f"API_BUTTON: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ idx={idx}, –≤—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫={len(buttons)}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –±–µ–∑ 400, —á—Ç–æ–±—ã UI —Å–º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ –Ω–µ –ø–∞–¥–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥—É
            return jsonify({'success': False, 'error': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.'})
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ä–æ–ª—è–º–∏
        greeting = get_greeting() + '!'
        name = buttons[idx]
        text = f"{greeting} {name}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_BOT_TOKEN
        token = os.environ.get('TELEGRAM_TOKEN') or os.environ.get('TELEGRAM_BOT_TOKEN') or 'default_token'
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        # –°–æ–∑–¥–∞—ë–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        try:
            notification_log_id = db.create_notification_log(
                notification_type='button',
                sender_id=user.get('id') if user else None,
                sender_telegram_id=user.get('telegram_id') if user else None,
                sender_login=user.get('login') if user else None,
                notification_text=text
            )
        except Exception as e:
            logger.error(f"API_BUTTON: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            notification_log_id = None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π, –ø—Ä–∏–Ω—è–≤—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        conn = db.get_connection()
        cursor = conn.cursor()
        try:
            cursor.execute(
                """
                SELECT DISTINCT recipient_telegram_id
                FROM invitations
                WHERE inviter_id = ?
                  AND status = 'accepted'
                  AND recipient_telegram_id IS NOT NULL
                """,
                (user.get('id') if user else None,)
            )
            users = cursor.fetchall()
        finally:
            conn.close()
        
        logger.info(f"API_BUTTON: –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π users={len(users)}")
        sent_count = 0
        for (user_telegram_id,) in users:
            # pending –¥–µ—Ç–∞–ª—å, –µ—Å–ª–∏ –ª–æ–≥ —Å–æ–∑–¥–∞–Ω
            if notification_log_id:
                try:
                    recipient_info = db.get_user_by_telegram_id(user_telegram_id)
                    recipient_name = f"{recipient_info.get('first_name', '')} {recipient_info.get('last_name', '')}".strip() if recipient_info else None
                    db.add_notification_detail(notification_log_id, user_telegram_id, recipient_name, 'pending')
                except Exception as e:
                    logger.error(f"API_BUTTON: –æ—à–∏–±–∫–∞ pending-–¥–µ—Ç–∞–ª–∏: {e}")
            try:
                response = requests.post(url, data={"chat_id": user_telegram_id, "text": text}, timeout=15)
                if response.status_code == 200 and response.json().get('ok'):
                    sent_count += 1
                    if notification_log_id:
                        db.update_notification_detail(notification_log_id, user_telegram_id, 'sent')
                else:
                    if notification_log_id:
                        error_msg = response.json().get('description') if response.headers.get('content-type','').startswith('application/json') else f"HTTP {response.status_code}"
                        db.update_notification_detail(notification_log_id, user_telegram_id, 'failed', error_msg)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")
                if notification_log_id:
                    db.update_notification_detail(notification_log_id, user_telegram_id, 'failed', str(e))
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ª–æ–≥–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        if notification_log_id:
            try:
                failed_count = max(0, len(users) - sent_count)
                db.complete_notification_log(notification_log_id, sent_count, failed_count)
                send_confirmation_messages(notification_log_id, user, text, 'button')
            except Exception as e:
                logger.error(f"API_BUTTON: –æ—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∞/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

        if sent_count > 0:
            return jsonify({'success': True})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
            if len(users) == 0:
                logger.info(f"API_BUTTON: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –Ω–æ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞")
                return jsonify({'success': True, 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)'})
            else:
                logger.warning(f"API_BUTTON: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–∫–∞–∑–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ 500 –≤ –∫–æ–Ω—Å–æ–ª–∏
                return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_TOKEN –∏ —á—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞.'}), 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ api_button: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å 500-–∫–∞–º–∏
        return jsonify({'success': False, 'error': str(e)}), 200

@app.route('/test')
@security_check
def test_route():
    """–¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    return "‚úÖ –ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω! –í—Ä–µ–º—è: " + str(datetime.now())

@app.route('/api/eta')
@security_check
def api_eta():
    """ETA –¥–æ —Ä–∞–±–æ—á–µ–π —Ç–æ—á–∫–∏ (–ú–°–ö) —á–µ—Ä–µ–∑ Yandex Routing Matrix API —Å —É—á—ë—Ç–æ–º –ø—Ä–æ–±–æ–∫.
    –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_ROUTING_API_KEY.
    """
    try:
        api_key = os.environ.get('YANDEX_ROUTING_API_KEY')
        if not api_key:
            return jsonify({'success': False, 'error': 'YANDEX_ROUTING_API_KEY is not set'}), 200

        import sqlite3
        conn = sqlite3.connect('driver.db')
        cursor = conn.cursor()

        user = get_current_user()
        if not user:
            conn.close()
            return jsonify({'success': False, 'error': 'Unauthorized'}), 401

        car_user_id = None
        work_lat = None
        work_lon = None

        role = user.get('role')
        if role == 'recipient':
            cursor.execute(
                """
                SELECT inviter_id
                FROM invitations
                WHERE recipient_telegram_id = ?
                  AND status = 'accepted'
                ORDER BY accepted_at DESC LIMIT 1
                """,
                (user.get('telegram_id'),)
            )
            row = cursor.fetchone()
            if not row:
                conn.close()
                return jsonify({'success': False, 'error': 'No inviter found'}), 200
            car_user_id = row[0]
            cursor.execute("SELECT work_latitude, work_longitude FROM users WHERE id = ?", (car_user_id,))
            wz = cursor.fetchone()
            if wz:
                work_lat, work_lon = wz[0], wz[1]
        else:
            cursor.execute("SELECT id, work_latitude, work_longitude FROM users WHERE telegram_id = ?", (user.get('telegram_id'),))
            me = cursor.fetchone()
            if me:
                car_user_id = me[0]
                work_lat, work_lon = me[1], me[2]

        if car_user_id is None or work_lat is None or work_lon is None:
            conn.close()
            return jsonify({'success': False, 'error': 'Work zone or user not found'}), 200

        cursor.execute(
            """
            SELECT latitude, longitude
            FROM user_locations
            WHERE user_id = ?
            ORDER BY id DESC LIMIT 1
            """,
            (car_user_id,)
        )
        loc = cursor.fetchone()
        conn.close()
        if not loc:
            return jsonify({'success': False, 'error': 'No car location'}), 200

        car_lat, car_lon = float(loc[0]), float(loc[1])

        import requests
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        args = request.args or {}
        force_traffic = args.get('traffic')  # '1' / '0' or None
        compare = args.get('compare') in ('1', 'true', 'yes')
        debug = args.get('debug') in ('1', 'true', 'yes')
        # –¢—Ä–µ–±–æ–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–±–∫–∏ –≤—Å–µ–≥–¥–∞
        require_traffic = os.environ.get('ETA_REQUIRE_TRAFFIC', 'true').lower() in ('1', 'true', 'yes')

        def build_payload(consider_traffic: bool):
            return {
                "sources": [{"latitude": car_lat, "longitude": car_lon}],
                "targets": [{"latitude": float(work_lat), "longitude": float(work_lon)}],
                "annotations": ["distance", "expected_time", "jam_time", "weights", "times", "durations"],
                "consider_traffic": consider_traffic,
                "transport": "car"
            }

        url = 'https://routes.api.cloud.yandex.net/routes/v2/matrix'
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Api-Key {api_key}'
        }
        def call_and_parse(consider_traffic: bool):
            payload = build_payload(consider_traffic)
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–π backoff —Å —É—á—ë—Ç–æ–º Retry-After
            now_ts = time.time()
            global _eta_global_next_allowed_ts
            if now_ts < _eta_global_next_allowed_ts:
                # –ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API
                class Resp:
                    status_code = 429
                    headers = {'Retry-After': str(int(_eta_global_next_allowed_ts - now_ts) + 1)}
                    def json(self):
                        return {"errors": ["Too many requests (local backoff)"]}
                r = Resp()
            else:
                r = requests.post(url, json=payload, headers=headers, timeout=10)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π Retry-After, –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è 429
                if r.status_code == 429:
                    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±—ç–∫–æ—Ñ—Ñ –ø–æ Retry-After –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–µ—Ç
                    ra = r.headers.get('Retry-After') if hasattr(r, 'headers') else None
                    if ra:
                        _eta_set_global_backoff(ra)
                    else:
                        _eta_set_default_backoff()
            result = {
                'http_status': r.status_code,
                'consider_traffic': consider_traffic,
                'eta_seconds': None,
                'distance_meters': None,
                'source': None,
                'raw': None
            }
            if r.status_code != 200:
                try:
                    result['raw'] = r.json()
                except Exception:
                    try:
                        result['raw'] = r.text
                    except Exception:
                        result['raw'] = None
                return result
            data = r.json()
            result['raw'] = data if debug else None
            try:
                matrix = data.get('matrix') or data
                if isinstance(matrix, dict):
                    if 'distances' in matrix and matrix['distances'] and matrix['distances'][0]:
                        result['distance_meters'] = matrix['distances'][0][0]
                    # –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤—Ä–µ–º–µ–Ω–∏
                    if 'jam_times' in matrix and matrix['jam_times'] and matrix['jam_times'][0] and matrix['jam_times'][0][0] is not None:
                        result['eta_seconds'] = matrix['jam_times'][0][0]
                        result['source'] = 'jam_times'
                    elif 'expected_times' in matrix and matrix['expected_times'] and matrix['expected_times'][0] and matrix['expected_times'][0][0] is not None:
                        result['eta_seconds'] = matrix['expected_times'][0][0]
                        result['source'] = 'expected_times'
                    elif 'times' in matrix and matrix['times'] and matrix['times'][0] and matrix['times'][0][0] is not None:
                        result['eta_seconds'] = matrix['times'][0][0]
                        result['source'] = 'times'
                    elif 'durations' in matrix and matrix['durations'] and matrix['durations'][0] and matrix['durations'][0][0] is not None:
                        result['eta_seconds'] = matrix['durations'][0][0]
                        result['source'] = 'durations'
                    elif 'weights' in matrix and matrix['weights'] and matrix['weights'][0]:
                        w = matrix['weights'][0][0]
                        if isinstance(w, dict):
                            if 'jam_time' in w and w['jam_time'] is not None:
                                result['eta_seconds'] = w['jam_time']
                                result['source'] = 'weights.jam_time'
                            elif 'time' in w and w['time'] is not None:
                                result['eta_seconds'] = w['time']
                                result['source'] = 'weights.time'
                            if 'distance' in w and w['distance'] is not None and result['distance_meters'] is None:
                                result['distance_meters'] = w['distance']
            except Exception:
                pass
            return result

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        if compare and not require_traffic:
            res_with = call_and_parse(True if force_traffic is None else (force_traffic in ('1', 'true', 'yes')))
            res_without = call_and_parse(False)
            return jsonify({
                'success': True,
                'compare': True,
                'with_traffic': res_with,
                'without_traffic': res_without,
                'car_lat': car_lat,
                'car_lon': car_lon,
                'work_lat': float(work_lat),
                'work_lon': float(work_lon)
            })
        else:
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ–º –ø—Ä–æ–±–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º
            consider = True if require_traffic else (True if force_traffic is None else (force_traffic in ('1', 'true', 'yes')))
            # –ö–ª—é—á –∫—ç—à–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ñ–ª–∞–≥ consider_traffic
            cache_key = f"eta:{user.get('telegram_id') or user.get('login')}:" \
                        f"{car_lat:.5f},{car_lon:.5f}->{float(work_lat):.5f},{float(work_lon):.5f}:" \
                        f"traffic={int(consider)}"
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –∫—ç—à–∞
            cached = _eta_cache_get(cache_key)
            if cached is not None:
                return jsonify(cached)

            # –í—ã–∑—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π API
            res = call_and_parse(consider)

            # –ï—Å–ª–∏ 429 ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞–ª–∏–¥–Ω—ã–π –∫—ç—à (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if res['http_status'] == 429:
                cached = _eta_cache_get(cache_key)
                if cached is not None:
                    return jsonify(cached)
                # –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–æ–±–∫–∏ ‚Äî –Ω–µ —É—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ–ª–±—ç–∫–∏ –±–µ–∑ –ø—Ä–æ–±–æ–∫
                if require_traffic:
                    return jsonify({'success': False, 'error': 'Yandex API HTTP 429', 'car_lat': car_lat, 'car_lon': car_lon, 'work_lat': float(work_lat), 'work_lon': float(work_lon), 'debug': (res['raw'] if debug else None)}), 200

            if res['http_status'] != 200:
                # –ï—Å–ª–∏ —Å—Ç—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ–º –ø—Ä–æ–±–∫–∏ ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫–∏ –±–µ–∑ –ø—Ä–æ–±–æ–∫
                if not require_traffic:
                    # –ü–æ—Å—Ç–∞–≤—â–∏–∫-—Ñ–æ–ª–±—ç–∫: OSRM (–ø—É–±–ª–∏—á–Ω—ã–π –¥–µ–º–æ-—Å–µ—Ä–≤–µ—Ä). –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω, —Å—Ä–∞–∑—É –∏–¥—ë–º –∫ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ.
                    use_osrm = os.environ.get('USE_OSRM_FALLBACK', 'true').lower() in ('1', 'true', 'yes')
                    if use_osrm:
                        try:
                            osrm_url = (
                                f"https://router.project-osrm.org/route/v1/driving/"
                                f"{float(car_lon):.6f},{float(car_lat):.6f};{float(work_lon):.6f},{float(work_lat):.6f}?overview=false&alternatives=false&annotations=duration"
                            )
                            osrm_resp = requests.get(osrm_url, timeout=10)
                            if osrm_resp.status_code == 200:
                                osrm_json = osrm_resp.json()
                                if osrm_json.get('routes'):
                                    duration_sec = int(max(0, osrm_json['routes'][0].get('duration', 0)))
                                    distance_m = calculate_distance(car_lat, car_lon, float(work_lat), float(work_lon))
                                    response_payload = {
                                        'success': True,
                                        'eta_seconds': duration_sec,
                                        'distance_meters': int(distance_m),
                                        'source': 'osrm_fallback',
                                        'consider_traffic': consider,
                                        'debug': (res['raw'] if debug else None)
                                    }
                                    _eta_cache_set(cache_key, response_payload, ttl_sec=int(os.environ.get('ETA_CACHE_TTL_SEC', 60)))
                                    return jsonify(response_payload)
                        except Exception:
                            pass
                    # –°–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–æ–ª–±—ç–∫: –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ ETA –ø–æ –ø—Ä—è–º–æ–º—É —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –∏ —Å—Ä–µ–¥–Ω–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                    try:
                        avg_speed_kmh = float(os.environ.get('ETA_FALLBACK_SPEED_KMH', 30))  # –¥–µ—Ñ–æ–ª—Ç 30 –∫–º/—á
                        distance_m = calculate_distance(car_lat, car_lon, float(work_lat), float(work_lon))
                        eta_sec = int(max(0, (distance_m / (max(1e-3, avg_speed_kmh) * 1000.0 / 3600.0))))
                        response_payload = {
                            'success': True,
                            'eta_seconds': eta_sec,
                            'distance_meters': int(distance_m),
                            'source': 'fallback_estimate',
                            'consider_traffic': consider,
                            'debug': (res['raw'] if debug else None)
                        }
                        # –ö—ç—à–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ–ª–±—ç–∫, —á—Ç–æ–±—ã –Ω–µ –¥—ë—Ä–≥–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π API
                        _eta_cache_set(cache_key, response_payload, ttl_sec=int(os.environ.get('ETA_CACHE_TTL_SEC', 60)))
                        return jsonify(response_payload)
                    except Exception:
                        return jsonify({'success': False, 'error': f'Yandex API HTTP {res["http_status"]}', 'car_lat': car_lat, 'car_lon': car_lon, 'work_lat': float(work_lat), 'work_lon': float(work_lon), 'debug': (res['raw'] if debug else None)}), 200
                # –ó–¥–µ—Å—å require_traffic=True –∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                return jsonify({'success': False, 'error': f'Yandex API HTTP {res["http_status"]}', 'car_lat': car_lat, 'car_lon': car_lon, 'work_lat': float(work_lat), 'work_lon': float(work_lon), 'debug': (res['raw'] if debug else None)}), 200

            response_payload = {
                'success': True,
                'eta_seconds': (int(res['eta_seconds']) if res['eta_seconds'] is not None else None),
                'distance_meters': (int(res['distance_meters']) if res['distance_meters'] is not None else None),
                'source': res['source'],
                'consider_traffic': consider,
                'debug': (res['raw'] if debug else None)
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
            _eta_cache_set(cache_key, response_payload, ttl_sec=int(os.environ.get('ETA_CACHE_TTL_SEC', 60)))
            return jsonify(response_payload)
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 200

@app.route('/debug_session')
@security_check
def debug_session():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–µ—Å—Å–∏–π"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = None
    user_name = None
    
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
        user = db.get_user_by_telegram_id(telegram_id)
        user_name = user.get('first_name') if user else None
    elif user_login:
        user_role = db.get_user_role_by_login(user_login)
        user = db.get_user_by_login(user_login)
        user_name = user.get('first_name') if user else None
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    session_data = "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:\n"
    for key, value in session.items():
        session_data += f"{key}: {value}\n"
    
    return render_template('debug_session.html', 
                         session_data=session_data,
                         telegram_id=telegram_id,
                         user_login=user_login,
                         user_role=user_role,
                         user_name=user_name)

@app.route('/debug_settings')
@security_check
def debug_settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ settings
    telegram_user = None
    user = None
    
    if telegram_id:
        telegram_user = True
        user = db.get_user_by_telegram_id(telegram_id)
    elif user_login:
        telegram_user = False
        user = db.get_user_by_login(user_login)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
    if user:
        for key, value in user.items():
            user_data += f"{key}: {value}\n"
    else:
        user_data = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    return render_template('debug_settings.html', 
                         user_data=user_data,
                         telegram_user=telegram_user,
                         user=user)



@app.route('/settings', methods=['GET', 'POST'])
@security_check
def settings():
    telegram_user = None
    user = None
    message = None
    error = False
    telegram_bot_username = os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')  # Username Telegram-–±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å)
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    logger.info(f"SETTINGS: telegram_id={telegram_id}, user_login={user_login}")
    
    if user_login:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        logger.info(f"SETTINGS: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω {user_login}")
        user_role = db.get_user_role_by_login(user_login)
        logger.info(f"SETTINGS: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_login} = {user_role}")
        
        if user_role == 'recipient':
            session['flash_message'] = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
            return redirect('/')
        
        telegram_user = False
        user = db.get_user_by_login(user_login)
        logger.info(f"SETTINGS: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î: {user is not None}")
        if user:
            logger.info(f"SETTINGS: user_id={user.get('id')}, telegram_id={user.get('telegram_id')}, buttons={user.get('buttons')}")
        
        if request.method == 'POST':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            import json
            buttons_json = request.form.get('buttons')
            try:
                buttons = json.loads(buttons_json) if buttons_json else []
            except Exception:
                buttons = []
            work_latitude = request.form.get('work_latitude')
            work_longitude = request.form.get('work_longitude')
            work_radius = request.form.get('work_radius')
            email = request.form.get('email', '').strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è email
            if email and not security_manager.validate_email(email):
                message = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"
                error = True
            else:
                try:
                    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ª–æ–≥–∏–Ω–æ–º/–ø–∞—Ä–æ–ª–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω
                    if user.get('telegram_id'):
                        db.update_user_settings(
                            user['telegram_id'],
                            buttons=buttons,
                            work_latitude=work_latitude,
                            work_longitude=work_longitude,
                            work_radius=work_radius,
                            email=email
                        )
                        message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ Telegram –º–æ–≥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ª–æ–≥–∏–Ω—É
                        db.update_user_settings_by_login(
                            user_login,
                            buttons=buttons,
                            work_latitude=work_latitude,
                            work_longitude=work_longitude,
                            work_radius=work_radius,
                            email=email
                        )
                        message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
                except Exception as e:
                    message = f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}'
                    error = True
            user = db.get_user_by_login(user_login)  # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
        invitations = []
        if user and user.get('role') in ['driver', 'admin']:
            invitations = db.get_user_invitations(user.get('id'))
        
        logger.info(f"SETTINGS (Login): telegram_user={telegram_user}, user_id={user.get('id') if user else None}, user_name={user.get('first_name') if user else None}, user_login={user_login}")
        logger.info(f"SETTINGS: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å user_role={user_role}")
        return render_template('settings.html', telegram_user=telegram_user, user=user, message=message, error=error, telegram_bot_id=telegram_bot_username, user_role=user_role, invitations=invitations)
    
    elif telegram_id:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
        logger.info(f"SETTINGS: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram {telegram_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = db.get_user_role(telegram_id)
        logger.info(f"SETTINGS: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id} = {user_role}")
        
        if user_role == 'recipient':
            session['flash_message'] = "–ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"
            return redirect('/')
        
        telegram_user = True
        user = db.get_user_by_telegram_id(telegram_id)
        logger.info(f"SETTINGS: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ –ë–î: {user is not None}")
        if user:
            logger.info(f"SETTINGS: user_id={user.get('id')}, telegram_id={user.get('telegram_id')}, buttons={user.get('buttons')}")
        
        if request.method == 'POST':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            import json
            buttons_json = request.form.get('buttons')
            try:
                buttons = json.loads(buttons_json) if buttons_json else []
            except Exception:
                buttons = []
            work_latitude = request.form.get('work_latitude')
            work_longitude = request.form.get('work_longitude')
            work_radius = request.form.get('work_radius')
            email = request.form.get('email', '').strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è email
            if email and not security_manager.validate_email(email):
                message = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"
                error = True
            else:
                try:
                    db.update_user_settings(
                        telegram_id,
                        buttons=buttons,
                        work_latitude=work_latitude,
                        work_longitude=work_longitude,
                        work_radius=work_radius,
                        email=email
                    )
                    message = '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
                except Exception as e:
                    message = f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}'
                    error = True
            user = db.get_user_by_telegram_id(telegram_id)  # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω –≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
        invitations = []
        if user and user.get('role') in ['driver', 'admin']:
            invitations = db.get_user_invitations(user.get('id'))
        
        logger.info(f"SETTINGS (Telegram): telegram_user={telegram_user}, user_id={user.get('id') if user else None}, user_name={user.get('first_name') if user else None}")
        logger.info(f"SETTINGS: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å user_role={user_role}")
        return render_template('settings.html', telegram_user=telegram_user, user=user, message=message, error=error, telegram_bot_id=telegram_bot_username, user_role=user_role, invitations=invitations)
    
    else:
        # –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')

@app.route('/about')
@security_check
def about():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ —Å–µ—Ä–≤–∏—Å–µ —Å —Ä–∞–∑–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π"""
    user = get_current_user()
    user_role = get_current_user_role()
    
    return render_template('about.html', user=user, user_role=user_role)

@app.route('/static/<path:filename>')
def static_files(filename):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    response = make_response(send_from_directory('static', filename))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if filename.endswith(('.js', '.css')):
        # –î–ª—è JS –∏ CSS —Ñ–∞–π–ª–æ–≤ - –∫–æ—Ä–æ—Ç–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        response.headers['Cache-Control'] = 'public, max-age=300, must-revalidate'
        response.headers['ETag'] = f'"{hash(filename + str(datetime.now().timestamp()))}"'
    elif filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.ico', '.svg')):
        # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        response.headers['Cache-Control'] = 'public, max-age=3600'
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
    
    return response

@app.route('/register', methods=['GET', 'POST'])
@auth_security_check
@login_rate_limit
def register():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    if request.method == 'POST':
        login = request.form.get('login')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        first_name = request.form.get('first_name', '').strip()
        last_name = request.form.get('last_name', '').strip()
        role = request.form.get('role', 'driver')
        email = request.form.get('email', '').strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
        csrf_token_from_form = request.form.get('csrf_token')
        logger.info(f"REGISTER: CSRF token from form: {csrf_token_from_form}")
        logger.info(f"REGISTER: CSRF token in session: {session.get('csrf_token')}")
        
        if not security_manager.validate_csrf_token(csrf_token_from_form):
            logger.error(f"REGISTER: CSRF token validation failed for IP: {request.remote_addr}")
            logger.error(f"REGISTER: Expected: {session.get('csrf_token')}, Got: {csrf_token_from_form}")
            return render_template('register.html', error="–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", csrf_token=security_manager.generate_csrf_token())
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è email
        if email and not security_manager.validate_email(email):
            return render_template('register.html', error="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å", csrf_token=security_manager.generate_csrf_token())
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ª–æ–≥–∏–Ω–∞
        if not login or len(login) < 3:
            return render_template('register.html', error="–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞", csrf_token=security_manager.generate_csrf_token())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        password_valid, password_message = security_manager.validate_password_strength(password)
        if not password_valid:
            return render_template('register.html', error=password_message, csrf_token=security_manager.generate_csrf_token())
        
        if password != confirm_password:
            return render_template('register.html', error="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", csrf_token=security_manager.generate_csrf_token())
        
        if role not in ['admin', 'driver', 'recipient']:
            return render_template('register.html', error="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å", csrf_token=security_manager.generate_csrf_token())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z0-9_-]+$', login):
            return render_template('register.html', error="–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -", csrf_token=security_manager.generate_csrf_token())
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
        if first_name and len(first_name) > 50:
            return render_template('register.html', error="–ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)", csrf_token=security_manager.generate_csrf_token())
        if last_name and len(last_name) > 50:
            return render_template('register.html', error="–§–∞–º–∏–ª–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)", csrf_token=security_manager.generate_csrf_token())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
        forbidden_chars = ['<', '>', '"', "'", '&', '{', '}', '[', ']', '(', ')', ';', '=', '+']
        if first_name and any(char in first_name for char in forbidden_chars):
            return render_template('register.html', error="–ò–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", csrf_token=security_manager.generate_csrf_token())
        if last_name and any(char in last_name for char in forbidden_chars):
            return render_template('register.html', error="–§–∞–º–∏–ª–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã", csrf_token=security_manager.generate_csrf_token())
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"REGISTER: –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è login={login}, role={role}, email={email}")
        success, result = db.create_user_with_login(login, password, first_name, last_name, role, email)
        logger.info(f"REGISTER: —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è - success={success}, result={result}")
        
        if success:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            session.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
            session['user_login'] = login
            session.permanent = True
            logger.info(f"REGISTER: —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—Ö–æ–¥ login={login}")
            return redirect('/')
        else:
            return render_template('register.html', error=f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result}", csrf_token=security_manager.generate_csrf_token())
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è —Ñ–æ—Ä–º—ã
    csrf_token = security_manager.generate_csrf_token()
    logger.info(f"REGISTER: Generated CSRF token: {csrf_token}")
    return render_template('register.html', csrf_token=csrf_token)

@app.route('/login', methods=['GET', 'POST'])
@auth_security_check
# @login_rate_limit  # –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
def login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    if request.method == 'POST':
        login = request.form.get('login')
        password = request.form.get('password')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
        if not security_manager.validate_csrf_token(request.form.get('csrf_token')):
            logger.error(f"LOGIN: CSRF token validation failed for IP: {request.remote_addr}")
            return render_template('login.html', error="–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", csrf_token=security_manager.generate_csrf_token())
        
        if not login or not password:
            return render_template('login.html', error="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", csrf_token=security_manager.generate_csrf_token())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.verify_password(login, password):
            session.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
            session['user_login'] = login
            session.permanent = True
            logger.info(f"LOGIN: —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ login={login}")
            return redirect('/')
        else:
            logger.error(f"LOGIN: –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è login={login}")
            return render_template('login.html', error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", csrf_token=security_manager.generate_csrf_token())
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è —Ñ–æ—Ä–º—ã
    csrf_token = security_manager.generate_csrf_token()
    return render_template('login.html', csrf_token=csrf_token)

@app.route('/logout')
@security_check
def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info(f"LOGOUT: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    logger.info(f"LOGOUT: telegram_id –¥–æ –æ—á–∏—Å—Ç–∫–∏: {session.get('telegram_id')}")
    logger.info(f"LOGOUT: user_login –¥–æ –æ—á–∏—Å—Ç–∫–∏: {session.get('user_login')}")
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
    session.clear()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –∏ –æ—á–∏—Å—Ç–∫–æ–π cookies
    response = redirect('/')
    response.delete_cookie('session')  # –£–¥–∞–ª—è–µ–º cookie —Å–µ—Å—Å–∏–∏
    response.delete_cookie('session_id')  # –£–¥–∞–ª—è–µ–º cookie session_id –µ—Å–ª–∏ –µ—Å—Ç—å
    
    session['flash_message'] = "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    logger.info(f"LOGOUT: —Å–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ /")
    
    return response

@app.route('/forgot_password', methods=['GET', 'POST'])
@password_reset_security_check
@password_reset_rate_limit
def forgot_password():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è - –∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞"""
    if request.method == 'POST':
        identifier = (request.form.get('login') or '').strip()
        logger.info(f"FORGOT_PASSWORD: –ø–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è: {identifier}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
        if not security_manager.validate_csrf_token(request.form.get('csrf_token')):
            logger.error(f"FORGOT_PASSWORD: CSRF token validation failed for IP: {request.remote_addr}")
            return render_template('forgot_password.html', error="–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", csrf_token=security_manager.generate_csrf_token())
        
        if not identifier:
            logger.warning("FORGOT_PASSWORD: –Ω–µ —É–∫–∞–∑–∞–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
            return render_template('forgot_password.html', error="–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email", csrf_token=security_manager.generate_csrf_token())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ email
        is_email_identifier = ('@' in identifier)
        user = db.get_user_by_email(identifier) if is_email_identifier else db.get_user_by_login(identifier)
        if not user:
            logger.warning(f"FORGOT_PASSWORD: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ {'email' if is_email_identifier else '–ª–æ–≥–∏–Ω—É'} {identifier}")
            # –ü–æ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏ –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            return render_template('forgot_password.html', success="–ï—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥ –Ω–∞ email", csrf_token=security_manager.generate_csrf_token())
        
        logger.info(f"FORGOT_PASSWORD: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, email –≤ –ë–î: {user.get('email')}")
        logger.info(f"FORGOT_PASSWORD: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
        logger.info(f"FORGOT_PASSWORD: —Ç–∏–ø email: {type(user.get('email'))}")
        logger.info(f"FORGOT_PASSWORD: email is None: {user.get('email') is None}")
        logger.info(f"FORGOT_PASSWORD: email == '': {user.get('email') == ''}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        email = user.get('email')
        if not email or email.strip() == '':
            logger.error(f"FORGOT_PASSWORD: —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {login} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)")
            logger.error(f"FORGOT_PASSWORD: –≤—Å–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {list(user.keys())}")
            logger.error(f"FORGOT_PASSWORD: –∑–Ω–∞—á–µ–Ω–∏–µ email: '{email}'")
            return render_template('forgot_password.html', 
                                 error="–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", 
                                 csrf_token=security_manager.generate_csrf_token())
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        login_for_reset = user.get('login') if is_email_identifier else identifier
        if not login_for_reset:
            logger.error(f"FORGOT_PASSWORD: —É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥")
            return render_template('forgot_password.html', error="–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–æ–≥–∏–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", csrf_token=security_manager.generate_csrf_token())

        success, message = db.create_password_reset_code(login_for_reset)
        if success:
            logger.info(f"FORGOT_PASSWORD: –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è {login_for_reset}")
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            session['flash_message'] = "–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email"
            session['password_reset_login'] = login_for_reset
            return redirect(url_for('reset_password'))
        else:
            logger.error(f"FORGOT_PASSWORD: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {login_for_reset}: {message}")
            return render_template('forgot_password.html', error=f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {message}", csrf_token=security_manager.generate_csrf_token())
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è —Ñ–æ—Ä–º—ã
    csrf_token = security_manager.generate_csrf_token()
    return render_template('forgot_password.html', csrf_token=csrf_token)

@app.route('/reset_password', methods=['GET', 'POST'])
@password_reset_security_check
@password_reset_rate_limit
def reset_password():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è - –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    if request.method == 'POST':
        # –û—á–∏—Å—Ç–∏—Ç—å —Ñ–ª–µ—à-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Å–ª–∞–Ω–Ω–æ–º –∫–æ–¥–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
        try:
            session.pop('flash_message', None)
        except Exception:
            pass
        login = request.form.get('login')
        code = request.form.get('code')
        new_password = request.form.get('new_password')
        confirm_password = request.form.get('confirm_password')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —Ç–æ–∫–µ–Ω
        if not security_manager.validate_csrf_token(request.form.get('csrf_token')):
            logger.error(f"RESET_PASSWORD: CSRF token validation failed for IP: {request.remote_addr}")
            return render_template('reset_password.html', error="–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", csrf_token=security_manager.generate_csrf_token())
        
        if not all([login, code, new_password, confirm_password]):
            return render_template('reset_password.html', error="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", csrf_token=security_manager.generate_csrf_token())
        
        if new_password != confirm_password:
            return render_template('reset_password.html', error="–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", csrf_token=security_manager.generate_csrf_token())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
        password_valid, password_message = security_manager.validate_password_strength(new_password)
        if not password_valid:
            return render_template('reset_password.html', error=password_message, csrf_token=security_manager.generate_csrf_token())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        verify_ok, verify_result = db.verify_password_reset_code(login, code)
        if not verify_ok:
            return render_template('reset_password.html', error=verify_result, csrf_token=security_manager.generate_csrf_token())
        reset_id = verify_result
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        reset_ok = db.reset_user_password(login, new_password)
        if reset_ok:
            # –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            try:
                db.mark_reset_code_used(reset_id)
            except Exception:
                pass
            return render_template('reset_password.html', success="–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.", csrf_token=security_manager.generate_csrf_token())
        else:
            return render_template('reset_password.html', error="–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è", csrf_token=security_manager.generate_csrf_token())
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSRF —Ç–æ–∫–µ–Ω –¥–ª—è —Ñ–æ—Ä–º—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏–Ω, –µ—Å–ª–∏ –µ—Å—Ç—å
    csrf_token = security_manager.generate_csrf_token()
    preset_login = request.args.get('login') or session.get('password_reset_login')
    return render_template('reset_password.html', csrf_token=csrf_token, preset_login=preset_login)

@app.route('/admin')
@security_check
def admin_redirect():
    """–†–µ–¥–∏—Ä–µ–∫—Ç —Å /admin –Ω–∞ /admin/users"""
    return redirect('/admin/users')

@app.route('/admin/users')
@security_check
def admin_users():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    if user_role != 'admin':
        session['flash_message'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    users = db.get_all_users()
    invitations = db.get_all_invitations()
    
    return render_template('admin_users.html', users=users, invitations=invitations)

@app.route('/admin/users/delete/<int:user_id>', methods=['POST'])
@security_check
def admin_delete_user(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    if user_role != 'admin':
        session['flash_message'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        return redirect('/')
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if db.delete_user_by_id(user_id):
        session['flash_message'] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª–µ–Ω"
    else:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    return redirect('/admin/users')

@app.route('/admin/invitations/delete/<int:invitation_id>', methods=['POST'])
@security_check
def admin_delete_invitation(invitation_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    logger.info(f"ADMIN_DELETE_INVITATION: –ø–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è ID {invitation_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        logger.warning("ADMIN_DELETE_INVITATION: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    logger.info(f"ADMIN_DELETE_INVITATION: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}")
    
    if user_role != 'admin':
        logger.warning(f"ADMIN_DELETE_INVITATION: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —Ä–æ–ª–∏ {user_role}")
        session['flash_message'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        return redirect('/')
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    success, message = db.delete_invitation(invitation_id)
    
    if success:
        logger.info(f"ADMIN_DELETE_INVITATION: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        session['flash_message'] = message
    else:
        logger.error(f"ADMIN_DELETE_INVITATION: –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {invitation_id}: {message}")
        session['flash_message'] = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {message}"
    
    return redirect('/admin/users')

@app.route('/admin/users/unbind_telegram/<int:user_id>', methods=['POST'])
@security_check
def admin_unbind_telegram(user_id):
    """–û—Ç–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    logger.info(f"ADMIN_UNBIND_TELEGRAM: –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤—è–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        logger.warning("ADMIN_UNBIND_TELEGRAM: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
    else:
        user_role = db.get_user_role_by_login(user_login)
    
    logger.info(f"ADMIN_UNBIND_TELEGRAM: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_role}")
    
    if user_role != 'admin':
        logger.warning(f"ADMIN_UNBIND_TELEGRAM: –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è —Ä–æ–ª–∏ {user_role}")
        session['flash_message'] = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = db.get_user_by_id(user_id)
    if not user:
        logger.error(f"ADMIN_UNBIND_TELEGRAM: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        session['flash_message'] = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return redirect('/admin/users')
    
    logger.info(f"ADMIN_UNBIND_TELEGRAM: –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('login')} (Telegram: {user.get('telegram_id')})")
    
    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç
    result = db.unbind_telegram_from_user(user_id)
    if isinstance(result, tuple):
        success, message = result
    else:
        success = result
        message = "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"
    
    logger.info(f"ADMIN_UNBIND_TELEGRAM: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–≤—è–∑–∫–∏: success={success}, message={message}")
    
    if success:
        session['flash_message'] = f"Telegram –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('login') or user.get('first_name') or user_id}"
    else:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞: {message}"
    
    return redirect('/admin/users')

@app.route('/telegram_auth', methods=['POST', 'GET'])
def telegram_auth():
    """Telegram OAuth –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        logger.info(f"TELEGRAM_AUTH: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –º–µ—Ç–æ–¥: {request.method}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ User-Agent –¥–ª—è Telegram
        user_agent = request.headers.get('User-Agent', '')
        if not any(telegram_indicator in user_agent.lower() for telegram_indicator in ['telegram', 'tgwebapp', 'bot']):
            logger.warning(f"TELEGRAM_AUTH: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π User-Agent: {user_agent}")
            # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —Ç–æ–∫–µ–Ω (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö)
        telegram_token = (
            os.environ.get('TELEGRAM_TOKEN')
            or os.environ.get('TELEGRAM_BOT_TOKEN')
            or os.environ.get('BOT_TOKEN')
            or getattr(config, 'TELEGRAM_BOT_TOKEN', '')
        )
        if not telegram_token:
            logger.error("TELEGRAM_AUTH: —Ç–æ–∫–µ–Ω Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∏ –≤ TELEGRAM_TOKEN, –Ω–∏ –≤ TELEGRAM_BOT_TOKEN, –Ω–∏ –≤ BOT_TOKEN")
            return '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 500
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram
        data = request.args if request.method == 'GET' else request.form
        auth_data = dict(data)
        logger.info(f"TELEGRAM_AUTH: –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {auth_data}")
        
        hash_ = auth_data.pop('hash', None)
        auth_data.pop('user_id', None)  # –£–¥–∞–ª—è–µ–º user_id, –µ—Å–ª–∏ –µ—Å—Ç—å
        auth_data = {k: v for k, v in auth_data.items()}
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(auth_data.items())])
        from config.settings import config as _cfg
        bot_token = _cfg.TELEGRAM_BOT_TOKEN or os.environ.get('TELEGRAM_BOT_TOKEN') or os.environ.get('TELEGRAM_TOKEN', '')
        secret_key = hashlib.sha256(bot_token.encode()).digest()
        hmac_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        logger.info(f"TELEGRAM_AUTH: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ - –æ–∂–∏–¥–∞–µ–º—ã–π: {hash_}, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: {hmac_hash}")
        
        if hmac_hash != hash_:
            logger.error("TELEGRAM_AUTH: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram")
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', 403
        
        telegram_id = int(auth_data['id'])
        username = auth_data.get('username')
        first_name = auth_data.get('first_name')
        last_name = auth_data.get('last_name')
        
        logger.info(f"TELEGRAM_AUTH: telegram_id={telegram_id}, username={username}, first_name={first_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.get_user_by_telegram_id(telegram_id)
        
        if not existing_user:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            logger.info(f"TELEGRAM_AUTH: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}")
            db.create_user(telegram_id, username, first_name, last_name)
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
        else:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {telegram_id}, —Ä–æ–ª—å: {existing_user.get('role')}")
        
        session.clear()  # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
        session['telegram_id'] = telegram_id
        session.permanent = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–æ–ª—å
        user_role = db.get_user_role(telegram_id)
        logger.info(f"TELEGRAM_AUTH: –ø–æ–ª—É—á–µ–Ω–∞ —Ä–æ–ª—å: {user_role}")
        
        if not user_role:
            # –ï—Å–ª–∏ —Ä–æ–ª–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
            logger.info(f"TELEGRAM_AUTH: —Ä–æ–ª–∏ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /select_role")
            return redirect(url_for('select_role'))
        else:
            # –ï—Å–ª–∏ —Ä–æ–ª—å –µ—Å—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∏–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            logger.info(f"TELEGRAM_AUTH: —Ä–æ–ª—å –µ—Å—Ç—å ({user_role}), –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ /")
            return redirect(url_for('index'))
    except Exception as e:
        logger.error(f"TELEGRAM_AUTH: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        logger.error(f"TELEGRAM_AUTH: —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {type(e)}")
        import traceback
        logger.error(f"TELEGRAM_AUTH: traceback: {traceback.format_exc()}")
        return 'Internal Server Error', 500

@app.route('/bind_telegram', methods=['POST', 'GET'])
def bind_telegram():
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        logger.info(f"BIND_TELEGRAM: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –º–µ—Ç–æ–¥: {request.method}")
        user_login = session.get('user_login')
        if not user_login:
            logger.error("BIND_TELEGRAM: –Ω–µ—Ç user_login –≤ —Å–µ—Å—Å–∏–∏")
            session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
            return redirect('/login')
        
        if request.method == 'GET':
            logger.info("BIND_TELEGRAM: GET –∑–∞–ø—Ä–æ—Å, —Ä–µ–Ω–¥–µ—Ä–∏–º bind_telegram.html")
            return render_template('bind_telegram.html', user_login=user_login)
        
        # POST –∑–∞–ø—Ä–æ—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏
        logger.info("BIND_TELEGRAM: POST –∑–∞–ø—Ä–æ—Å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É")
        data = request.args if request.method == 'GET' else request.form
        auth_data = dict(data)
        logger.info(f"BIND_TELEGRAM: –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {auth_data}")
        
        hash_ = auth_data.pop('hash', None)
        auth_data.pop('user_id', None)
        auth_data = {k: v for k, v in auth_data.items()}
        data_check_string = '\n'.join([f"{k}={v}" for k, v in sorted(auth_data.items())])
        from config.settings import config as _cfg
        bot_token = _cfg.TELEGRAM_BOT_TOKEN or os.environ.get('TELEGRAM_BOT_TOKEN') or os.environ.get('TELEGRAM_TOKEN', '')
        secret_key = hashlib.sha256(bot_token.encode()).digest()
        hmac_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        logger.info(f"BIND_TELEGRAM: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ - –æ–∂–∏–¥–∞–µ–º—ã–π: {hash_}, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: {hmac_hash}")
        
        if hmac_hash != hash_:
            logger.error("BIND_TELEGRAM: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram")
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', 403
        
        telegram_id = int(auth_data['id'])
        username = auth_data.get('username')
        first_name = auth_data.get('first_name')
        last_name = auth_data.get('last_name')
        
        logger.info(f"BIND_TELEGRAM: telegram_id={telegram_id}, username={username}, first_name={first_name}")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success, message = db.bind_telegram_to_user(user_login, telegram_id, username, first_name, last_name)
        
        if success:
            logger.info(f"BIND_TELEGRAM: —É—Å–ø–µ—à–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è user_login={user_login}, telegram_id={telegram_id}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id –≤ —Å–µ—Å—Å–∏—é –∏ —É–¥–∞–ª—è–µ–º user_login
            session['telegram_id'] = telegram_id
            session.pop('user_login', None)  # –£–¥–∞–ª—è–µ–º –ª–æ–≥–∏–Ω –∏–∑ —Å–µ—Å—Å–∏–∏
            session['flash_message'] = "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º."
            return redirect('/')
        else:
            logger.error(f"BIND_TELEGRAM: –æ—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {message}")
            session['flash_message'] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {message}"
            return redirect('/bind_telegram')
    except Exception as e:
        logger.error(f"BIND_TELEGRAM: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        logger.error(f"BIND_TELEGRAM: —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {type(e)}")
        import traceback
        logger.error(f"BIND_TELEGRAM: traceback: {traceback.format_exc()}")
        return 'Internal Server Error', 500

@app.route('/select_role', methods=['GET', 'POST'])
@security_check
def select_role():
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = session.get('telegram_id')
    if not telegram_id:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram"
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = db.get_user_by_telegram_id(telegram_id)
    if not user:
        session['flash_message'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return redirect('/')
    
    if request.method == 'POST':
        selected_role = request.form.get('selected_role')
        if selected_role in ['admin', 'driver', 'recipient']:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            db.set_user_role(telegram_id, selected_role)
            session['flash_message'] = f"–†–æ–ª—å '{selected_role}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            return redirect('/')
        else:
            session['flash_message'] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å"
            return redirect('/select_role')
    
    # GET –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    user_name = user.get('first_name') or user.get('username') or f"ID: {telegram_id}"
    return render_template('select_role.html', 
                         user_name=user_name, 
                         telegram_id=telegram_id)

@app.route('/create_invite')
@security_check
def create_invite():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if telegram_id:
        user_role = db.get_user_role(telegram_id)
        user = db.get_user_by_telegram_id(telegram_id)
        user_id = user.get('id') if user else None
    else:
        user_role = db.get_user_role_by_login(user_login)
        user = db.get_user_by_login(user_login)
        user_id = user.get('id') if user else None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if user_role not in ['driver', 'admin']:
        session['flash_message'] = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"
        return redirect('/')
    
    if not user_id:
        session['flash_message'] = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        return redirect('/')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    import secrets
    import string
    invite_code = ''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(8))
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success, message = db.create_invitation(user_id, invite_code)
    
    if not success:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {message}"
        return redirect('/settings')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    invite_url = url_for('invite', code=invite_code, _external=True)
    
    return render_template('create_invite.html', 
                         invite_url=invite_url,
                         year=datetime.now().year)

@app.route('/invite')
@security_check
def invite():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    invite_code = request.args.get('code')
    if not invite_code:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 400
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (—ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if telegram_id or user_login:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
    invitation = db.get_invitation_by_code(invite_code)
    if not invitation:
        return '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', 404
    
    if invitation['status'] != 'pending':
        return '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', 400
    
    telegram_bot_username = os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')
    return render_template('invite.html', 
                         invite_code=invite_code,
                         telegram_bot_id=telegram_bot_username)

@app.route('/invite_auth', methods=['POST', 'GET'])
@security_check
def invite_auth():
    try:
        logger.info(f"INVITE_AUTH: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞, –º–µ—Ç–æ–¥: {request.method}")
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—è
        raw_params = {**request.args, **request.form}
        logger.info(f"INVITE_AUTH: –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {raw_params}")

        if 'hash' not in raw_params:
            logger.error("INVITE_AUTH: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash")
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç hash', 400
        if 'auth_date' not in raw_params:
            logger.error("INVITE_AUTH: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth_date")
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç auth_date', 400

        invite_code = raw_params.get('invite_code')
        if not invite_code:
            logger.error("INVITE_AUTH: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç invite_code")
            return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è', 400
        
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏
        allowed_keys = {'id', 'first_name', 'last_name', 'username', 'photo_url', 'auth_date'}
        auth_fields = {k: raw_params.get(k) for k in allowed_keys if raw_params.get(k) is not None}
        data_check_string = '\n'.join(f"{k}={auth_fields[k]}" for k in sorted(auth_fields.keys()))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
        from config.settings import config as _cfg
        bot_token = _cfg.TELEGRAM_BOT_TOKEN or os.environ.get('TELEGRAM_BOT_TOKEN') or os.environ.get('TELEGRAM_TOKEN', '')
        secret_key = hashlib.sha256(bot_token.encode()).digest()
        hash_ = raw_params.get('hash')
        hmac_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()
        
        logger.info(f"INVITE_AUTH: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ - –æ–∂–∏–¥–∞–µ–º—ã–π: {hash_}, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π: {hmac_hash}")
        
        if hmac_hash != hash_:
            logger.error("INVITE_AUTH: –Ω–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Telegram")
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram', 403
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        new_user_telegram_id = int(raw_params['id'])
        username = raw_params.get('username')
        first_name = raw_params.get('first_name')
        last_name = raw_params.get('last_name')
        
        logger.info(f"INVITE_AUTH: telegram_id={new_user_telegram_id}, username={username}, first_name={first_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
        invitation = db.get_invitation_by_code(invite_code)
        if not invitation:
            logger.error(f"INVITE_AUTH: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {invite_code}")
            return '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', 404
        
        if invitation['status'] != 'pending':
            logger.error(f"INVITE_AUTH: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {invite_code}")
            return '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ', 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º Telegram ID
        existing_user = db.get_user_by_telegram_id(new_user_telegram_id)
        
        if existing_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω–µ –º–µ–Ω—è–µ–º –µ–≥–æ —Ä–æ–ª—å
            logger.info(f"INVITE_AUTH: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_user_telegram_id}, —Ä–æ–ª—å: {existing_user.get('role')}")
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            db.accept_invitation(invite_code, new_user_telegram_id, username, first_name, last_name)
            
            session['telegram_id'] = new_user_telegram_id
            session.permanent = True
            logger.info("INVITE_AUTH: —Ä–µ–Ω–¥–µ—Ä–∏–º invite_success.html –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return render_template('invite_success.html')
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é 'recipient'
            logger.info(f"INVITE_AUTH: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é recipient: {new_user_telegram_id}")
            db.create_user(new_user_telegram_id, username, first_name, last_name)
            db.set_user_role(new_user_telegram_id, 'recipient')
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            db.accept_invitation(invite_code, new_user_telegram_id, username, first_name, last_name)
            
            logger.info(f"INVITE_AUTH: –Ω–æ–≤—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {new_user_telegram_id}")
            session['telegram_id'] = new_user_telegram_id
            session.permanent = True
            logger.info("INVITE_AUTH: —Ä–µ–Ω–¥–µ—Ä–∏–º invite_success.html –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return render_template('invite_success.html')
    except Exception as e:
        logger.error(f"INVITE_AUTH: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        logger.error(f"INVITE_AUTH: —Ç–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {type(e)}")
        import traceback
        logger.error(f"INVITE_AUTH: traceback: {traceback.format_exc()}")
        return 'Internal Server Error', 500

@app.route('/api/current_location')
@security_check
def current_location():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø—Ä–∞–≤–∞
        user = get_current_user()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import sqlite3
        conn = sqlite3.connect('driver.db')
        cursor = conn.cursor()

        user_location = None
        work_lat = None
        work_lon = None
        work_radius = None
        role = None
        timestamp = None
        lat = None
        lon = None

        if user:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å–≤–æ–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ (–ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ)
            if user.get('role') == 'recipient':
                try:
                    cursor.execute(
                        """
                        SELECT inviter_id
                        FROM invitations
                        WHERE recipient_telegram_id = ? AND status = 'accepted'
                        ORDER BY accepted_at DESC
                        LIMIT 1
                        """,
                        (user.get('telegram_id'),)
                    )
                    row = cursor.fetchone()
                    if not row:
                        conn.close()
                        return jsonify({'success': False, 'status': '–î–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å'}), 200

                    inviter_id = row[0]
                    cursor.execute("SELECT id, role, work_latitude, work_longitude, work_radius FROM users WHERE id = ?", (inviter_id,))
                    inviter = cursor.fetchone()
                    if not inviter:
                        conn.close()
                        return jsonify({'success': False, 'status': '–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 200

                    inviter_role = inviter[1]
                    work_lat, work_lon, work_radius = inviter[2], inviter[3], inviter[4]

                    # –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                    try:
                        current_tid = int(user.get('telegram_id') or 0)
                    except Exception:
                        current_tid = 0
                    allowed_tid = 341357928
                    if inviter_role == 'admin' and current_tid != allowed_tid:
                        conn.close()
                        return jsonify({'success': False, 'status': '–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω: –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}, ), 200

                    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                    cursor.execute(
                        """
                        SELECT ul.latitude, ul.longitude, ul.is_at_work, ul.created_at, ul.heading
                        FROM user_locations ul
                        WHERE ul.user_id = ?
                        ORDER BY ul.id DESC LIMIT 1
                        """,
                        (inviter_id,)
                    )
                    loc = cursor.fetchone()
                    if loc:
                        lat, lon, is_at_work, timestamp, heading = loc
                        role = inviter_role
                    else:
                        conn.close()
                        return jsonify({'success': False, 'status': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è'}), 200

                finally:
                    pass

            # –ï—Å–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å/–∞–¥–º–∏–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            elif user.get('role') in ['driver', 'admin']:
                cursor.execute("SELECT id, role, work_latitude, work_longitude, work_radius FROM users WHERE telegram_id = ?", (user.get('telegram_id'),))
                self_row = cursor.fetchone()
                if self_row:
                    self_id = self_row[0]
                    role = self_row[1]
                    work_lat, work_lon, work_radius = self_row[2], self_row[3], self_row[4]
                    cursor.execute(
                        """
                        SELECT ul.latitude, ul.longitude, ul.is_at_work, ul.created_at, ul.heading
                        FROM user_locations ul
                        WHERE ul.user_id = ?
                        ORDER BY ul.id DESC LIMIT 1
                        """,
                        (self_id,)
                    )
                    loc = cursor.fetchone()
                    if loc:
                        lat, lon, is_at_work, timestamp, heading = loc
                    else:
                        conn.close()
                        return jsonify({'success': False, 'status': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏'}), 200
                else:
                    conn.close()
                    return jsonify({'success': False, 'status': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 200

            # –ò–Ω–∞—á–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ) ‚Äî –∑–∞–ø—Ä–µ—â–∞–µ–º
            else:
                conn.close()
                return jsonify({'success': False, 'status': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 200

        else:
            # –†–∞–Ω–µ–µ: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞ –ª—é–±–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ ‚Äî –±–æ–ª—å—à–µ —Ç–∞–∫ –Ω–µ –¥–µ–ª–∞–µ–º
            conn.close()
            return jsonify({'success': False, 'status': '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'}), 200
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã
        try:
            from bot.utils import calculate_distance
        except ImportError:
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
            import math
            def calculate_distance(lat1, lon1, lat2, lon2):
                R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
                lat1_rad = math.radians(lat1)
                lat2_rad = math.radians(lat2)
                delta_lat = math.radians(lat2 - lat1)
                delta_lon = math.radians(lon2 - lon1)
                a = (math.sin(delta_lat / 2) ** 2 + 
                     math.cos(lat1_rad) * math.cos(lat2_rad) * 
                     math.sin(delta_lon / 2) ** 2)
                c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
                return R * c

        if work_lat and work_lon:
            distance = calculate_distance(lat, lon, work_lat, work_lon)
        else:
            distance = calculate_distance(lat, lon, config.WORK_LATITUDE, config.WORK_LONGITUDE)
        
        conn.close()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        try:
            if timestamp:
                if isinstance(timestamp, str):
                    dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
                else:
                    dt = timestamp
                # –î–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (UTC+3)
                formatted_time = (dt + timedelta(hours=3)).strftime("%H:%M:%S")
            else:
                formatted_time = "--:--:--"
        except:
            formatted_time = "--:--:--"
        
        return jsonify({
            'success': True,
            'location': {
                'latitude': lat,
                'longitude': lon,
                'distance_to_work': distance,
                'is_at_work': bool(is_at_work),
                'timestamp': timestamp,
                'formatted_time': formatted_time,
                'heading': locals().get('heading', None),
                'role': role
            },
            'work_zone': {
                'latitude': work_lat,
                'longitude': work_lon,
                'radius': work_radius
            },
            'status': '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ API current_location: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'location': {
                'latitude': None,
                'longitude': None,
                'distance_to_work': None,
                'is_at_work': False,
                'timestamp': None,
                'formatted_time': '--:--:--'
            },
            'work_zone': {
                'latitude': None,
                'longitude': None,
                'radius': None
            },
            'status': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö'
        }), 500

@app.route('/tracker')
@security_check
def real_time_tracker():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram –∏–ª–∏ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç—Ä–µ–∫–µ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/')
    
    try:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        user_info = None
        if telegram_id:
            user_info = db.get_user_by_telegram_id(telegram_id)
        elif user_login:
            user_info = db.get_user_by_login(user_login)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        session_token = None
        if user_info and user_info.get('role') == 'recipient':
            from web.location_web_tracker import web_tracker
            session_token = web_tracker.create_auto_session_for_user(telegram_id or user_info.get('telegram_id'), duration_minutes=60)
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è {telegram_id or user_info.get('telegram_id')}: {session_token}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—á–µ–π –∑–æ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç—ã
        work_lat = None
        work_lon = None
        work_radius = None
        
        if user_info:
            # 1) –ë–µ—Ä—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            work_lat = user_info.get('work_latitude')
            work_lon = user_info.get('work_longitude')
            work_radius = user_info.get('work_radius')

            # 2) –î–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –±–µ—Ä—ë–º –∑–æ–Ω—É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞
            if user_info.get('role') == 'recipient' and (work_lat is None or work_lon is None or work_radius is None):
                try:
                    conn = db.get_connection()
                    cur = conn.cursor()
                    cur.execute(
                        """
                        SELECT inviter_id
                        FROM invitations
                        WHERE recipient_telegram_id = ?
                        AND status = 'accepted'
                        ORDER BY accepted_at DESC
                        LIMIT 1
                        """,
                        (user_info.get('telegram_id'),)
                    )
                    row = cur.fetchone()
                    if row and row[0]:
                        inviter = db.get_user_by_id(row[0])
                        if inviter:
                            work_lat = inviter.get('work_latitude')
                            work_lon = inviter.get('work_longitude')
                            work_radius = inviter.get('work_radius')
                    conn.close()
                except Exception as e:
                    logger.error(f"TRACKER: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ: {e}")

            # 3) –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, –±–µ—Ä—ë–º –ª—é–±—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞
            if work_lat is None or work_lon is None or work_radius is None:
                try:
                    conn = db.get_connection()
                    cur = conn.cursor()
                    cur.execute(
                        """
                        SELECT work_latitude, work_longitude, work_radius
                        FROM users
                        WHERE role IN ('driver','admin')
                        AND work_latitude IS NOT NULL AND work_longitude IS NOT NULL
                        ORDER BY id DESC LIMIT 1
                        """
                    )
                    row = cur.fetchone()
                    conn.close()
                    if row:
                        work_lat, work_lon, work_radius = row
                except Exception as e:
                    logger.error(f"TRACKER: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–æ–¥–∏—Ç–µ–ª—è/–∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {e}")
        
        return render_template('real_time_tracker.html', 
                             year=datetime.now().year,
                             work_lat=work_lat,
                             work_lon=work_lon,
                             work_radius=work_radius,
                             user_info=user_info,
                             session_token=session_token)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç—Ä–µ–∫–µ—Ä–∞: {e}")
        return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 500

@app.route('/bind_telegram_form', methods=['GET', 'POST'])
@security_check
def bind_telegram_form():
    """–§–æ—Ä–º–∞ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_login = session.get('user_login')
    if not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
        return redirect('/login')
    
    if request.method == 'GET':
        return render_template('bind_telegram_form.html', config=config)
    
    # POST –∑–∞–ø—Ä–æ—Å - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
    telegram_contact = request.form.get('telegram_contact', '').strip()
    verification_code = request.form.get('verification_code', '').strip()
    
    logger.info(f"BIND_TELEGRAM_FORM: user_login={user_login}, contact='{telegram_contact}', code='{verification_code}'")
    
    if not telegram_contact:
        return render_template('bind_telegram_form.html', 
                             error=True, 
                             message="–í–≤–µ–¥–∏—Ç–µ Telegram username –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                             config=config)
    
    if not verification_code:
        # –ü–µ—Ä–≤—ã–π —à–∞–≥ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–æ—Ä–º–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Å–µ—Å—Å–∏–∏
        session['telegram_contact'] = telegram_contact
        
        # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
        return render_template('bind_telegram_form.html', 
                             telegram_contact=telegram_contact,
                             message="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç –±–æ—Ç–∞",
                             config=config)
    
    else:
        # –í—Ç–æ—Ä–æ–π —à–∞–≥ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        saved_contact = session.get('telegram_contact')
        
        if not saved_contact:
            return render_template('bind_telegram_form.html', 
                                 error=True, 
                                 message="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                                 config=config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π /bind)
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ò—â–µ–º –∫–æ–¥, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π /bind (—Å telegram_id)
        cursor.execute("""
            SELECT telegram_id, chat_id FROM telegram_bind_codes
            WHERE bind_code = ? AND used_at IS NULL AND telegram_id IS NOT NULL
            AND datetime(created_at) > datetime('now', '-30 minutes')
        """, (verification_code,))
        
        result = cursor.fetchone()
        conn.close()
        
        if not result:
            return render_template('bind_telegram_form.html', 
                                 telegram_contact=saved_contact,
                                 error=True, 
                                 message="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                 config=config)
        
        # –ö–æ–¥ –Ω–∞–π–¥–µ–Ω - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        telegram_id, chat_id = result
        
        # –ö–æ–¥ –≤–µ—Ä–Ω—ã–π - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        conn = db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT username, first_name FROM telegram_bind_codes
            WHERE telegram_id = ? AND bind_code = ? AND used_at IS NULL
        """, (telegram_id, verification_code))
        
        user_data = cursor.fetchone()
        
        if user_data:
            username, first_name = user_data
            last_name = None  # –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç last_name
        else:
            # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ contact
            if saved_contact.startswith('@'):
                username = saved_contact[1:]
            else:
                username = saved_contact
            first_name = username
            last_name = None
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        cursor.execute("""
            UPDATE telegram_bind_codes 
            SET used_at = CURRENT_TIMESTAMP 
            WHERE telegram_id = ? AND bind_code = ? AND used_at IS NULL
        """, (telegram_id, verification_code))
        
        conn.commit()
        conn.close()
        
        success, message = db.bind_telegram_to_user(user_login, telegram_id, username, first_name, last_name)
        
        if success:
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            session.pop('telegram_contact', None)
            
            return render_template('bind_telegram_form.html', 
                                 success=True,
                                 message="‚úÖ Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ö–æ–¥–∏—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Telegram.",
                                 config=config)
        else:
            return render_template('bind_telegram_form.html', 
                                 telegram_contact=saved_contact,
                                 error=True, 
                                 message=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏: {message}",
                                 config=config)

@app.route('/resend_telegram_code', methods=['POST'])
@security_check
def resend_telegram_code():
    """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_login = session.get('user_login')
    if not user_login:
        return jsonify({'success': False, 'message': '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω'})
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞'})
        
        telegram_contact = data.get('telegram_contact', '').strip()
        
        if not telegram_contact:
            return jsonify({'success': False, 'message': '–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç'})
        
        logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {telegram_contact}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        import random
        code = ''.join([str(random.randint(0, 9)) for _ in range(6)])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ —Å–µ—Å—Å–∏–∏
        session['telegram_bind_code'] = code
        session['telegram_contact'] = telegram_contact
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ Telegram
        success, message = send_telegram_code(telegram_contact, code)
        
        if success:
            logger.info(f"–ö–æ–¥ {code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–ª—è {telegram_contact}")
            return jsonify({'success': True, 'message': '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ'})
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞: {message}")
            return jsonify({'success': False, 'message': message})
            
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {e}")
        return jsonify({'success': False, 'message': f'–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'})

@app.route('/telegram_login')
@security_check
def telegram_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram"""
    telegram_bot_username = os.environ.get('TELEGRAM_BOT_USERNAME', 'default_bot_username')
    logger.info(f"TELEGRAM_LOGIN: bot_username={telegram_bot_username}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ username –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if telegram_bot_username.startswith('@'):
        telegram_bot_username = telegram_bot_username[1:]
    
    # –ù–ï –∏–∑–º–µ–Ω—è–µ–º username - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π
    # telegram_bot_username = telegram_bot_username.replace('_', '').lower()
    
    logger.info(f"TELEGRAM_LOGIN: cleaned_bot_username={telegram_bot_username}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è URL –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_url = url_for('telegram_auth', _external=True, _scheme='https')
    
    return render_template('telegram_login.html', telegram_bot_username=telegram_bot_username, auth_url=auth_url)

@app.route('/unbind_telegram', methods=['POST'])
@security_check
def unbind_telegram():
    """–û—Ç–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_login = session.get('user_login')
    if not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"
        return redirect('/login')
    
    # –û—Ç–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç
    success, message = db.unbind_telegram_from_user(user_login)
    
    if success:
        # –û—á–∏—â–∞–µ–º telegram_id –∏–∑ —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        session.pop('telegram_id', None)
        session['flash_message'] = "Telegram –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω"
    else:
        session['flash_message'] = f"–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏: {message}"
    
    return redirect('/settings')

@app.route('/logs')
@security_check
def view_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
    try:
        with open('driver-bot.log', 'r', encoding='utf-8') as f:
            logs = f.read()
        return f"<pre>{logs}</pre>"
    except FileNotFoundError:
        return "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"

@app.route('/notification_logs')
@security_check
def view_notification_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return redirect(url_for('login'))
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notifications = db.get_recent_notifications(limit=50)
        
        return render_template('notification_logs.html', notifications=notifications)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", 500

@app.route('/notification_details/<int:notification_id>')
@security_check
def view_notification_details(notification_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return redirect(url_for('login'))
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
        notification = db.get_notification_log(notification_id)
        if not notification:
            return "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 404
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        details = db.get_notification_details(notification_id)
        
        return render_template('notification_details.html', notification=notification, details=details)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–µ–π", 500

@app.route('/user_location/<int:telegram_id>')
@security_check
def view_user_location(telegram_id):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return redirect(url_for('login'))
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
        user_info = db.get_user_by_telegram_id_with_location(telegram_id)
        if not user_info:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
        location_history = db.get_user_location_history(telegram_id, limit=20)
        
        return render_template('user_location.html', 
                             user=user_info, 
                             location_history=location_history,
                             format_timestamp=format_timestamp)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è", 500

@app.route('/recipient_locations')
@security_check
def view_recipient_locations():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return redirect(url_for('login'))
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        recipient_locations = db.get_recipient_locations(limit=100)
        
        return render_template('recipient_locations.html', 
                             recipient_locations=recipient_locations,
                             format_timestamp=format_timestamp)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π", 500

@app.route('/api/user_location/<int:telegram_id>')
@security_check
def api_user_location(telegram_id):
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return jsonify({'success': False, 'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º
        user_info = db.get_user_by_telegram_id_with_location(telegram_id)
        if not user_info:
            return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if user_info.get('last_location') and user_info['last_location'].get('created_at'):
            user_info['last_location']['formatted_time'] = format_timestamp(user_info['last_location']['created_at'])
        
        return jsonify({
            'success': True,
            'user': user_info
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/start_tracking/<int:telegram_id>')
@security_check
def api_start_tracking(telegram_id):
    """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return jsonify({'success': False, 'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        duration = request.args.get('duration', 60, type=int)
        if duration < 1 or duration > 1440:
            return jsonify({'success': False, 'error': '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 1440 –º–∏–Ω—É—Ç'}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º
        user_info = db.get_user_by_telegram_id(telegram_id)
        if not user_info:
            return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
        
        if user_info.get('role') != 'recipient':
            return jsonify({'success': False, 'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'}), 400
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            'success': True,
            'message': f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}',
            'duration': duration,
            'user_name': f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip()
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –∑–∞–ø—É—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è {telegram_id}: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/stop_tracking/<int:telegram_id>')
@security_check
def api_stop_tracking(telegram_id):
    """API –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return jsonify({'success': False, 'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return jsonify({
            'success': True,
            'message': f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–ª—è {telegram_id}: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/api/tracking_status')
@security_check
def api_tracking_status():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return jsonify({'success': False, 'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'}), 401
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return jsonify({'success': False, 'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'}), 403
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤–µ–±-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        active_sessions = web_tracker.get_active_sessions_info()
        
        return jsonify({
            'success': True,
            'active_tracking': len(active_sessions),
            'sessions': active_sessions,
            'total_tracked': len(active_sessions)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

@app.route('/web_tracking')
@security_check
def view_web_tracking():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        user = get_current_user()
        if not user:
            return redirect(url_for('login'))
        
        user_role = get_current_user_role()
        if user_role != 'admin':
            return "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", 403
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, telegram_id, first_name, last_name, username 
            FROM users 
            WHERE role = 'recipient' AND telegram_id IS NOT NULL
            ORDER BY first_name, last_name
        """)
        recipients = cursor.fetchall()
        conn.close()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        active_sessions = web_tracker.get_active_sessions_info()
        
        return render_template('web_tracking.html', 
                             recipients=recipients,
                             active_sessions=active_sessions)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–µ–±-–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", 500

@app.route('/test_security')
@security_check
def test_security():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return render_template('test_security.html')

@app.route('/change_password', methods=['GET', 'POST'])
@security_check
def change_password():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è"""
    telegram_id = session.get('telegram_id')
    user_login = session.get('user_login')
    
    if not telegram_id and not user_login:
        session['flash_message'] = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è"
        return redirect('/login')
    
    message = None
    error = False
    
    if request.method == 'POST':
        current_password = request.form.get('current_password', '').strip()
        new_password = request.form.get('new_password', '').strip()
        confirm_password = request.form.get('confirm_password', '').strip()
        
        if not all([current_password, new_password, confirm_password]):
            message = "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã"
            error = True
        elif len(new_password) < 6:
            message = "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
            error = True
        elif new_password != confirm_password:
            message = "–ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            error = True
        else:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
                if user_login:
                    if not db.verify_password(user_login, current_password):
                        message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                        error = True
                    else:
                        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
                        db.reset_user_password(user_login, new_password)
                        message = "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
                else:
                    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –ª–æ–≥–∏–Ω
                    user = db.get_user_by_telegram_id(telegram_id)
                    if not user or not user.get('login'):
                        message = "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –ª–æ–≥–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞."
                        error = True
                    elif not db.verify_password(user['login'], current_password):
                        message = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
                        error = True
                    else:
                        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å
                        db.reset_user_password(user['login'], new_password)
                        message = "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω"
            except Exception as e:
                message = f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {e}"
                error = True
    
    return render_template('change_password.html', message=message, error=error)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.errorhandler(404)
def not_found_error(error):
    logger.warning(f"404 ERROR: {request.remote_addr} - {request.url}")
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"500 ERROR: {request.remote_addr} - {request.url} - {str(error)}")
    return render_template('500.html'), 500

@app.errorhandler(403)
def forbidden_error(error):
    logger.warning(f"403 ERROR: {request.remote_addr} - {request.url}")
    return render_template('403.html'), 403

@app.errorhandler(429)
def rate_limit_error(error):
    logger.warning(f"429 ERROR: Rate limit exceeded for {request.remote_addr}")
    return render_template('429.html'), 429







if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print(f"üìç –ê–¥—Ä–µ—Å: http://{config.WEB_HOST}:{config.WEB_PORT}")
    app.run(host=config.WEB_HOST, port=config.WEB_PORT, debug=False) 