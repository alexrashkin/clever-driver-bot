#!/usr/bin/env python3
"""
–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
"""

import requests
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config.settings import config

def check_bot_identity():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞"""
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞")
    print("=" * 40)
    
    url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/getMe"
    
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                bot = result['result']
                print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot.get('username', '–ù–µ—Ç')}")
                print(f"üìã ID: {bot.get('id', '–ù–µ—Ç')}")
                print(f"üìã –ò–º—è: {bot.get('first_name', '–ù–µ—Ç')}")
                print(f"üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline: {bot.get('can_join_groups', False)}")
                print(f"üìã –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {bot.get('can_read_all_group_messages', False)}")
                
                print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ —Ç–æ—Ç –∂–µ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –≤–∞–º:")
                print(f"üì± Username: @{bot.get('username', '–ù–µ—Ç')}")
                print(f"üìã –ò–º—è: {bot.get('first_name', '–ù–µ—Ç')}")
                
                return bot
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_webhook_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook"""
    print(f"\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook —Å—Ç–∞—Ç—É—Å–∞")
    print("=" * 40)
    
    url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/getWebhookInfo"
    
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                webhook = result['result']
                print(f"üìã URL: {webhook.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                print(f"üìã –û–∂–∏–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook.get('pending_update_count', 0)}")
                print(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook.get('last_error_message', '–ù–µ—Ç')}")
                
                if webhook.get('url'):
                    print("‚ö†Ô∏è Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–≥–æ")
                    return True
                else:
                    print("‚úÖ Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling")
                    return False
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def clear_updates():
    """–û—á–∏—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    print(f"\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
    print("=" * 40)
    
    url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/getUpdates"
    params = {'offset': -1}
    
    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                return True
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return False
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def wait_for_new_message():
    """–ñ–¥–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    print("=" * 40)
    print("üì± –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å")
    print("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...")
    
    import time
    time.sleep(10)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/getUpdates"
    
    try:
        response = requests.get(url, timeout=10)
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                updates = result.get('result', [])
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {len(updates)}")
                
                if updates:
                    print("‚úÖ –ù–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã!")
                    for update in updates:
                        if 'message' in update:
                            message = update['message']
                            user = message.get('from', {})
                            chat = message.get('chat', {})
                            
                            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('first_name', '')} {user.get('last_name', '')}")
                            print(f"üì± Username: @{user.get('username', '–ù–µ—Ç')}")
                            print(f"üÜî ID: {user.get('id', '–ù–µ—Ç')}")
                            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.get('text', '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞')}")
                            print(f"üìÖ –î–∞—Ç–∞: {message.get('date', '–ù–µ—Ç')}")
                            print("-" * 40)
                            
                            return user.get('username', ''), user.get('id', '')
                else:
                    print("‚ùå –ù–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return None, None
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                return None, None
        else:
            print(f"‚ùå HTTP {response.status_code}")
            return None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def main():
    print("üöÄ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –±–æ—Ç–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å –±–æ—Ç–∞
    bot = check_bot_identity()
    if not bot:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
    has_webhook = test_webhook_status()
    
    # –û—á–∏—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    clear_updates()
    
    # –ñ–¥–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    username, user_id = wait_for_new_message()
    
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    
    if username and user_id:
        print(f"‚úÖ –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print(f"üë§ –í–∞—à username: @{username}")
        print(f"üÜî –í–∞—à ID: {user_id}")
        print(f"ü§ñ –ë–æ—Ç: @{bot.get('username', '–ù–µ—Ç')}")
        
        print("\nüí° –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:")
        print(f"1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ username: @{username}")
        print(f"2. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID: {user_id}")
    else:
        print("‚ùå –°–≤—è–∑—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É")
        print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é")
        print("   - –ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç webhook")
        
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–æ—Ç")

if __name__ == "__main__":
    main() 