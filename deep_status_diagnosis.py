#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ
"""

import requests
import time
import urllib3
from datetime import datetime
import json

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "https://cleverdriver.ru"

def log(message, status="INFO"):
    timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
    print(f"[{timestamp}] {status}: {message}")

def test_api_status_stability():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ API —Å—Ç–∞—Ç—É—Å–∞"""
    log("üîç –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò API /api/status")
    log("=" * 60)
    
    statuses = []
    
    for i in range(15):
        try:
            response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
            if response.status_code == 200:
                data = response.json()
                status_val = data.get('tracking_active')
                statuses.append(status_val)
                log(f"API #{i+1:2d}: tracking_active = {status_val}")
            else:
                log(f"API #{i+1:2d}: ERROR {response.status_code}", "ERROR")
                statuses.append(None)
            
            time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except Exception as e:
            log(f"API #{i+1:2d}: EXCEPTION {e}", "ERROR")
            statuses.append(None)
    
    # –ê–Ω–∞–ª–∏–∑
    unique_statuses = set(s for s in statuses if s is not None)
    changes = 0
    for i in range(1, len(statuses)):
        if statuses[i] != statuses[i-1] and statuses[i] is not None and statuses[i-1] is not None:
            changes += 1
    
    log(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    log(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã: {unique_statuses}")
    log(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: {changes}")
    log(f"   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {statuses}")
    
    if len(unique_statuses) == 1 and changes == 0:
        log("‚úÖ API —Å—Ç–∞—Ç—É—Å –°–¢–ê–ë–ò–õ–ï–ù", "SUCCESS")
        return True
    else:
        log("‚ùå API —Å—Ç–∞—Ç—É—Å –ù–ï–°–¢–ê–ë–ò–õ–ï–ù - –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞!", "ERROR")
        return False

def test_page_load_impact():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Å—Ç–∞—Ç—É—Å"""
    log("\nüîç –¢–ï–°–¢ –í–õ–ò–Ø–ù–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´")
    log("=" * 60)
    
    results = []
    
    for i in range(8):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –î–û –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            api_before = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
            before_status = api_before.json().get('tracking_active') if api_before.status_code == 200 else None
        except:
            before_status = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        try:
            page_response = requests.get(BASE_URL, verify=False, timeout=10)
            page_loaded = page_response.status_code == 200
        except:
            page_loaded = False
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ü–û–°–õ–ï –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            api_after = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
            after_status = api_after.json().get('tracking_active') if api_after.status_code == 200 else None
        except:
            after_status = None
        
        changed = before_status != after_status if before_status is not None and after_status is not None else False
        
        log(f"–¢–µ—Å—Ç #{i+1}: –î–û={before_status} ‚Üí –ü–û–°–õ–ï={after_status} {'‚ùå –ò–ó–ú–ï–ù–ò–õ–°–Ø!' if changed else '‚úÖ OK'}")
        
        results.append({
            'before': before_status,
            'after': after_status,
            'changed': changed,
            'page_loaded': page_loaded
        })
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    changes_count = sum(1 for r in results if r['changed'])
    
    log(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:")
    log(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: {changes_count}/{len(results)}")
    
    if changes_count == 0:
        log("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å", "SUCCESS")
        return True
    else:
        log("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ò–ó–ú–ï–ù–Ø–ï–¢ —Å—Ç–∞—Ç—É—Å!", "ERROR")
        return False

def test_template_route_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    log("\nüîç –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´")
    log("=" * 60)
    
    changes = []
    
    for i in range(6):
        try:
            # –ü–æ–ª—É—á–∞–µ–º API —Å—Ç–∞—Ç—É—Å
            api_response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
            api_data = api_response.json() if api_response.status_code == 200 else {}
            api_status = api_data.get('tracking_active')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            page_response = requests.get(BASE_URL, verify=False, timeout=10)
            page_content = page_response.text if page_response.status_code == 200 else ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            if "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>–í–∫–ª—é—á–µ–Ω–æ</b>" in page_content:
                page_status = True
            elif "–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>–í—ã–∫–ª—é—á–µ–Ω–æ</b>" in page_content:
                page_status = False
            else:
                page_status = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ API (–º–æ–∂–µ—Ç –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–≤–ª–∏—è—Ç—å)
            time.sleep(0.5)
            api_response2 = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
            api_data2 = api_response2.json() if api_response2.status_code == 200 else {}
            api_status2 = api_data2.get('tracking_active')
            
            api_changed = api_status != api_status2
            page_matches = api_status == page_status
            
            log(f"–¢–µ—Å—Ç #{i+1}: API1={api_status} ‚Üí –°—Ç—Ä–∞–Ω–∏—Ü–∞={page_status} ‚Üí API2={api_status2}")
            if api_changed:
                log(f"         ‚ùå API –∏–∑–º–µ–Ω–∏–ª—Å—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!", "ERROR")
            if not page_matches:
                log(f"         ‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç API", "WARNING")
            
            changes.append({
                'api_before': api_status,
                'page_status': page_status,
                'api_after': api_status2,
                'api_changed': api_changed,
                'page_matches': page_matches
            })
            
            time.sleep(2)
            
        except Exception as e:
            log(f"–¢–µ—Å—Ç #{i+1}: –û–®–ò–ë–ö–ê {e}", "ERROR")
    
    # –ê–Ω–∞–ª–∏–∑
    api_changes = sum(1 for c in changes if c['api_changed'])
    page_mismatches = sum(1 for c in changes if not c['page_matches'])
    
    log(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏–∫–∏:")
    log(f"   API –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {api_changes}")
    log(f"   –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞/API: {page_mismatches}")
    
    return api_changes == 0 and page_mismatches == 0

def test_rapid_requests():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    log("\nüîç –¢–ï–°–¢ –ë–´–°–¢–†–´–• –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–• –ó–ê–ü–†–û–°–û–í")
    log("=" * 60)
    
    # –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API
    api_statuses = []
    start_time = time.time()
    
    for i in range(20):
        try:
            response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=5)
            if response.status_code == 200:
                status = response.json().get('tracking_active')
                api_statuses.append(status)
            else:
                api_statuses.append(None)
        except:
            api_statuses.append(None)
    
    end_time = time.time()
    duration = end_time - start_time
    
    # –ê–Ω–∞–ª–∏–∑
    valid_statuses = [s for s in api_statuses if s is not None]
    unique_statuses = set(valid_statuses)
    changes = 0
    
    for i in range(1, len(valid_statuses)):
        if valid_statuses[i] != valid_statuses[i-1]:
            changes += 1
    
    log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
    log(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: 20 –∑–∞ {duration:.2f} —Å–µ–∫")
    log(f"   –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {len(valid_statuses)}")
    log(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤: {len(unique_statuses)}")
    log(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–π: {changes}")
    log(f"   –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {api_statuses[:10]}...")
    
    return changes == 0

def check_applied_fixes():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    log("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    log("=" * 60)
    
    try:
        response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
        if response.status_code == 200:
            data = response.json()
            
            has_tracking = 'tracking' in data
            has_tracking_active = 'tracking_active' in data
            
            log(f"–ü–æ–ª–µ 'tracking': {'‚úÖ –ï–°–¢–¨' if has_tracking else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
            log(f"–ü–æ–ª–µ 'tracking_active': {'‚úÖ –ï–°–¢–¨' if has_tracking_active else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
            
            if has_tracking and has_tracking_active:
                tracking_val = data.get('tracking')
                tracking_active_val = data.get('tracking_active')
                
                if tracking_val == tracking_active_val:
                    log("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "SUCCESS")
                    return True
                else:
                    log(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç: tracking={tracking_val}, tracking_active={tracking_active_val}", "ERROR")
                    return False
            else:
                log("‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", "ERROR")
                return False
        else:
            log(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–ª—É–±–æ–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    log("üîß –ì–õ–£–ë–û–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –°–¢–ê–¢–£–°–ê")
    log("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", check_applied_fixes),
        ("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API —Å—Ç–∞—Ç—É—Å–∞", test_api_status_stability),
        ("–í–ª–∏—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", test_page_load_impact),
        ("–õ–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã", test_template_route_logic),
        ("–ë—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", test_rapid_requests),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        log(f"\nüìã {test_name.upper()}")
        log("-" * 60)
        
        try:
            result = test_func()
            results[test_name] = result
            status = "–ü–†–û–ô–î–ï–ù" if result else "–ü–†–û–í–ê–õ–ï–ù"
            log(f"üèÅ {test_name}: {status}", "SUCCESS" if result else "ERROR")
        except Exception as e:
            log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}", "ERROR")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log("\n" + "=" * 60)
    log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò")
    log("=" * 60)
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    log(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    log("\nüí° –î–ò–ê–ì–ù–û–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if not results.get("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"):
        log("üö® –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ!")
        log("   ‚Üí –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ web/app.py")
        log("   ‚Üí –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: sudo systemctl restart cleverdriver-web")
    
    elif not results.get("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å API —Å—Ç–∞—Ç—É—Å–∞"):
        log("üö® –ö–†–ò–¢–ò–ß–ù–û: API —Å—Ç–∞—Ç—É—Å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω —Å–∞–º –ø–æ —Å–µ–±–µ!")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É get_tracking_status()")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
    
    elif not results.get("–í–ª–∏—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
        log("üö® –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å!")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å Flask route index() –Ω–∞ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–∑–æ–≤—ã db.get_tracking_status() –≤ —à–∞–±–ª–æ–Ω–µ")
    
    elif not results.get("–õ–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"):
        log("üö® –ü–†–û–ë–õ–ï–ú–ê: –õ–æ–≥–∏–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å route index() –≤ web/app.py")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π tracking_status –≤ template")
    
    elif not results.get("–ë—ã—Å—Ç—Ä—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"):
        log("üö® –ü–†–û–ë–õ–ï–ú–ê: Race condition –≤ API!")
        log("   ‚Üí –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
    
    else:
        log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        log("   ‚Üí –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ/—Å–µ—Å—Å–∏–∏")
        log("   ‚Üí –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ —Ä–µ–∂–∏–º")
        log("   ‚Üí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞")

if __name__ == "__main__":
    main() 