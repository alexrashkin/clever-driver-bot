#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import requests
import time
import json
import socket
from config.settings import config

def test_network_connectivity():
    """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üåê –¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # –¢–µ—Å—Ç DNS
    try:
        socket.gethostbyname("api.telegram.org")
        print("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except socket.gaierror:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º")
        return False
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
    try:
        response = requests.get("https://api.telegram.org", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ö†Ô∏è Telegram API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status_code}")
            return True  # API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    except requests.exceptions.ConnectTimeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False

def test_web_server():
    """–¢–µ—Å—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    print("\nüåê –¢–µ—Å—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    try:
        response = requests.get("http://localhost:5000/api/status", timeout=5)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {data.get('tracking_active', False)}")
            return True
        else:
            print(f"‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except requests.exceptions.ConnectTimeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def test_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        response = requests.get("http://localhost:5000/api/history?limit=5", timeout=5)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                history = data.get('history', [])
                print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"üìã –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(history)}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {data.get('error')}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ: {response.status_code}")
            return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã: {e}")
        return False

def test_coordinates_in_radius():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–¥–∏—É—Å–µ —Ä–∞–±–æ—Ç—ã"""
    print("\nüìç –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ä–∞–¥–∏—É—Å–µ —Ä–∞–±–æ—Ç—ã...")
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–Ω–æ –≤ —Ä–∞–¥–∏—É—Å–µ —Ä–∞–±–æ—Ç—ã
    test_coords = [
        (config.WORK_LATITUDE + 0.0001, config.WORK_LONGITUDE + 0.0001),  # ~10–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        (config.WORK_LATITUDE - 0.0002, config.WORK_LONGITUDE - 0.0002),  # ~20–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
    ]
    
    success_count = 0
    for i, (lat, lon) in enumerate(test_coords, 1):
        try:
            print(f"üìç –¢–µ—Å—Ç {i}: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ({lat:.6f}, {lon:.6f})")
            
            response = requests.post(
                "http://localhost:5000/api/location",
                json={"latitude": lat, "longitude": lon},
                headers={"Content-Type": "application/json"},
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                    success_count += 1
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('error')}")
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
                
        except requests.exceptions.Timeout:
            print(f"‚ùå –¢–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    return success_count > 0

def check_notification_settings():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—Ç—ã: {config.WORK_LATITUDE}, {config.WORK_LONGITUDE}")
    print(f"üìè –†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: {config.WORK_RADIUS} –º–µ—Ç—Ä–æ–≤")
    print(f"ü§ñ Telegram Token: {config.TELEGRAM_TOKEN[:20]}...")
    print(f"üí¨ Notification Chat ID: {config.NOTIFICATION_CHAT_ID}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
    if not config.TELEGRAM_TOKEN or config.TELEGRAM_TOKEN == 'your_bot_token_here':
        print("‚ùå Telegram Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Chat ID –Ω–µ –ø—É—Å—Ç–æ–π
    if not config.NOTIFICATION_CHAT_ID:
        print("‚ùå Notification Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return False
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–≥–ª—è–¥—è—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    return True

def test_telegram_bot():
    """–¢–µ—Å—Ç Telegram –±–æ—Ç–∞"""
    print("\nü§ñ –¢–µ—Å—Ç Telegram –±–æ—Ç–∞...")
    try:
        url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/getMe"
        response = requests.get(url, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                bot_info = data.get('result', {})
                print(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: @{bot_info.get('username', 'unknown')}")
                print(f"üìù –ò–º—è –±–æ—Ç–∞: {bot_info.get('first_name', 'unknown')}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {data.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {response.status_code}")
            return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

def test_telegram_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    print("\nüì± –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...")
    try:
        url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/sendMessage"
        test_message = "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Driver Bot"
        
        response = requests.post(url, data={
            "chat_id": config.NOTIFICATION_CHAT_ID,
            "text": test_message
        }, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                print("üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {data.get('description')}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return False
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def check_database_monitoring():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ
    lat = config.WORK_LATITUDE + 0.0001
    lon = config.WORK_LONGITUDE + 0.0001
    
    try:
        response = requests.post(
            "http://localhost:5000/api/location",
            json={"latitude": lat, "longitude": lon},
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø–æ—è–≤–∏–ª–∞—Å—å —Å is_at_work=1
            time.sleep(2)
            response = requests.get("http://localhost:5000/api/history?limit=1", timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    history = data.get('history', [])
                    if history:
                        latest = history[0]
                        is_at_work = latest.get('is_at_work', False)
                        print(f"üìä –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: is_at_work = {is_at_work}")
                        
                        if is_at_work:
                            print("‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–Ω–∞ —Ä–∞–±–æ—Ç–µ'")
                            print("‚è≥ –ñ–¥–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–æ 30 —Å–µ–∫—É–Ω–¥)...")
                            return True
                        else:
                            print("‚ùå –ó–∞–ø–∏—Å—å –ù–ï –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–Ω–∞ —Ä–∞–±–æ—Ç–µ'")
                            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏ —Ä–∞–¥–∏—É—Å–∞")
                            return False
                    else:
                        print("‚ùå –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {data.get('error')}")
                    return False
            else:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏: {response.status_code}")
                return False
        else:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {response.status_code}")
            return False
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("=" * 60)
    
    results = {}
    
    # –¢–µ—Å—Ç 0: –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    results['network'] = test_network_connectivity()
    
    # –¢–µ—Å—Ç 1: –í–µ–±-—Å–µ—Ä–≤–µ—Ä
    results['web_server'] = test_web_server()
    
    # –¢–µ—Å—Ç 2: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    results['database'] = test_database()
    
    # –¢–µ—Å—Ç 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    results['settings'] = check_notification_settings()
    
    # –¢–µ—Å—Ç 4: Telegram –±–æ—Ç
    results['telegram_bot'] = test_telegram_bot()
    
    # –¢–µ—Å—Ç 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    results['telegram_message'] = test_telegram_message()
    
    # –¢–µ—Å—Ç 6: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ä–∞–¥–∏—É—Å–µ
    results['coordinates'] = test_coordinates_in_radius()
    
    # –¢–µ—Å—Ç 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã
    results['monitoring'] = check_database_monitoring()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("=" * 60)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    passed = sum(results.values())
    total = len(results)
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("üí° –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –ó–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –±–∞–∑—ã")
        print("   - –í–∫–ª—é—á–µ–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        print("   - –õ–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É.")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if not results.get('network'):
            print("\nüåê –°–ï–¢–ï–í–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π—Ä–≤–æ–ª –∏ –ø—Ä–æ–∫—Å–∏")
            print("   - –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π DNS —Å–µ—Ä–≤–µ—Ä")
        
        if not results.get('telegram_bot') or not results.get('telegram_message'):
            print("\nü§ñ –ü–†–û–ë–õ–ï–ú–´ –° TELEGRAM:")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Chat ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
    
    print("\nüí° –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–æ–≤ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   tail -f driver-bot.log")

if __name__ == "__main__":
    main() 