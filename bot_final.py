import logging
import asyncio
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='/var/log/driver-bot/driver-bot.log'
)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π
active_trackings = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /track <driver_id> <latitude> <longitude> <radius> - –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
    /stop_tracking <driver_id> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    /list_trackings - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    """
    await update.message.reply_text(help_text)

async def track_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if len(context.args) != 4:
            await update.message.reply_text(
                '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /track <driver_id> <latitude> <longitude> <radius>\n'
                '–ü—Ä–∏–º–µ—Ä: /track 123 55.7558 37.6173 100'
            )
            return

        driver_id = context.args[0]
        try:
            latitude = float(context.args[1])
            longitude = float(context.args[2])
            radius = float(context.args[3])
        except ValueError:
            await update.message.reply_text('–û—à–∏–±–∫–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Ä–∞–¥–∏—É—Å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏')
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏
        active_trackings[driver_id] = {
            'target_lat': latitude,
            'target_lon': longitude,
            'radius': radius,
            'chat_id': update.effective_chat.id,
            'started_at': datetime.now()
        }

        await update.message.reply_text(
            f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –Ω–∞—á–∞—Ç–æ.\n'
            f'–¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞: {latitude}, {longitude}\n'
            f'–†–∞–¥–∏—É—Å: {radius} –º–µ—Ç—Ä–æ–≤'
        )

    except Exception as e:
        logger.error(f"Error in track_driver: {e}")
        await update.message.reply_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è')

async def stop_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è"""
    if not context.args:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stop_tracking <driver_id>')
        return

    driver_id = context.args[0]
    if driver_id in active_trackings:
        del active_trackings[driver_id]
        await update.message.reply_text(f'–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è {driver_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    else:
        await update.message.reply_text(f'–í–æ–¥–∏—Ç–µ–ª—å {driver_id} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è')

async def list_trackings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    if not active_trackings:
        await update.message.reply_text('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π')
        return

    message = '–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:\n\n'
    for driver_id, data in active_trackings.items():
        message += (
            f'–í–æ–¥–∏—Ç–µ–ª—å: {driver_id}\n'
            f'–¶–µ–ª–µ–≤–∞—è —Ç–æ—á–∫–∞: {data["target_lat"]}, {data["target_lon"]}\n'
            f'–†–∞–¥–∏—É—Å: {data["radius"]} –º–µ—Ç—Ä–æ–≤\n'
            f'–ù–∞—á–∞—Ç–æ: {data["started_at"].strftime("%Y-%m-%d %H:%M:%S")}\n\n'
        )
    await update.message.reply_text(message)

async def check_driver_location(driver_id: str, current_lat: float, current_lon: float):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω –≤ —Ä–∞–¥–∏—É—Å–µ"""
    if driver_id not in active_trackings:
        return

    tracking = active_trackings[driver_id]
    target_lat = tracking['target_lat']
    target_lon = tracking['target_lon']
    radius = tracking['radius']

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    distance = ((current_lat - target_lat) ** 2 + (current_lon - target_lon) ** 2) ** 0.5 * 111000  # –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö

    if distance <= radius:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        message = (
            f'üöó –í–æ–¥–∏—Ç–µ–ª—å {driver_id} –ø—Ä–∏–±—ã–ª –≤ —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–∫—É!\n'
            f'–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {current_lat}, {current_lon}\n'
            f'–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏: {distance:.0f} –º–µ—Ç—Ä–æ–≤'
        )
        return message
    return None

async def handle_location_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
        location = update.message.location
        if not location:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        for driver_id in list(active_trackings.keys()):
            notification = await check_driver_location(
                driver_id,
                location.latitude,
                location.longitude
            )
            if notification:
                chat_id = active_trackings[driver_id]['chat_id']
                await context.bot.send_message(chat_id=chat_id, text=notification)
                # –£–¥–∞–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                del active_trackings[driver_id]

    except Exception as e:
        logger.error(f"Error in handle_location_update: {e}")

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("track", track_driver))
        application.add_handler(CommandHandler("stop_tracking", stop_tracking))
        application.add_handler(CommandHandler("list_trackings", list_trackings))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
        application.add_handler(MessageHandler(filters.LOCATION, handle_location_update))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("Starting bot...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        
        # –î–µ—Ä–∂–∏–º –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        while True:
            await asyncio.sleep(1)
    except Exception as e:
        logger.error(f"Error in run_bot(): {e}")
        raise

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")

if __name__ == '__main__':
    main() 