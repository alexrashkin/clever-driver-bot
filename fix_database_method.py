#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ get_all_users –≤ database.py
"""

import os
import re

def fix_database_method():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ get_all_users"""
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ get_all_users...")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É database.py
    db_file = "bot/database.py"
    
    if not os.path.exists(db_file):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {db_file}")
        return False
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        with open(db_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        print("üìÑ –§–∞–π–ª database.py –Ω–∞–π–¥–µ–Ω")
        
        # –ò—â–µ–º –º–µ—Ç–æ–¥ get_all_users
        pattern = r"def get_all_users\(self\):(.*?)return users"
        match = re.search(pattern, content, re.DOTALL)
        
        if not match:
            print("‚ùå –ú–µ—Ç–æ–¥ get_all_users –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        method_content = match.group(1)
        print("‚úÖ –ú–µ—Ç–æ–¥ get_all_users –Ω–∞–π–¥–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ email –∏ phone –≤ SELECT
        if 'email, phone' in method_content:
            print("‚úÖ –ú–µ—Ç–æ–¥ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç email –∏ phone")
            return True
        
        # –ó–∞–º–µ–Ω—è–µ–º SELECT –∑–∞–ø—Ä–æ—Å
        old_select = "SELECT id, telegram_id, login, first_name, last_name, auth_type, role, created_at, last_login"
        new_select = "SELECT id, telegram_id, login, first_name, last_name, auth_type, role, created_at, last_login, email, phone"
        
        if old_select in content:
            # –ó–∞–º–µ–Ω—è–µ–º
            new_content = content.replace(old_select, new_select)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(db_file, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            print("‚úÖ –ú–µ—Ç–æ–¥ get_all_users –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            print(f"  –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: email, phone")
            return True
        else:
            print("‚ùå SELECT –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def test_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º
        import sys
        sys.path.insert(0, '.')
        sys.path.insert(0, 'web')
        
        from bot.database import Database
        
        db = Database()
        users = db.get_all_users()
        
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ({len(users)}):")
        
        receiver_found = False
        for user in users:
            user_id = user.get('id')
            login = user.get('login')
            email = user.get('email')
            role = user.get('role')
            print(f"  ID: {user_id}, Login: {login}, Email: {email or '–ù–ï–¢'}, Role: {role}")
            
            if login == 'receiver':
                receiver_found = True
                if email:
                    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å receiver –∏–º–µ–µ—Ç email: {email}")
                else:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å receiver –ù–ï –∏–º–µ–µ—Ç email")
        
        if not receiver_found:
            print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å receiver –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return receiver_found
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def restart_service():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å"""
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        import subprocess
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        result = subprocess.run(['systemctl', 'stop', 'driver-web'], 
                              capture_output=True, text=True)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.returncode}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
        result = subprocess.run(['systemctl', 'start', 'driver-web'], 
                              capture_output=True, text=True)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—É—Å–∫–∞: {result.returncode}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        import time
        time.sleep(3)
        
        result = subprocess.run(['systemctl', 'status', 'driver-web'], 
                              capture_output=True, text=True)
        print("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
        print(result.stdout)
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ get_all_users")
    print("=" * 60)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥
    success = fix_database_method()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        test_success = test_fix()
        
        if test_success:
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
            restart_success = restart_service()
            
            if restart_success:
                print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                print("‚úÖ Email —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            else:
                print("\n‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —É–¥–∞–ª—Å—è")
        else:
            print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")
    else:
        print("\n‚ùå –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    print("\nüéØ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 