#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–µ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
"""

import asyncio
import sqlite3
import math
import requests
from datetime import datetime, timedelta
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "7824059826:AAEQx8WETTaAE4iU-tC58fT9ODkotjo-Enc"
DRIVER_CHAT_ID = 946872573
NOTIFICATION_CHAT_ID = 1623256768
WORK_LATITUDE = 55.676803
WORK_LONGITUDE = 37.52351
WORK_RADIUS = 100  # –º–µ—Ç—Ä–æ–≤

# –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã
LOCATION_REQUEST_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
NOTIFICATION_COOLDOWN = 1800  # 30 –º–∏–Ω—É—Ç (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)

def calculate_distance(lat1, lon1, lat2, lon2):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏"""
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    lat1_rad, lat2_rad = math.radians(lat1), math.radians(lat2)
    delta_lat, delta_lon = math.radians(lat2-lat1), math.radians(lon2-lon1)
    a = math.sin(delta_lat/2)**2 + math.cos(lat1_rad)*math.cos(lat2_rad)*math.sin(delta_lon/2)**2
    return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))

def is_at_work(lat, lon):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–∞ —Ä–∞–±–æ—Ç–µ"""
    return calculate_distance(lat, lon, WORK_LATITUDE, WORK_LONGITUDE) <= WORK_RADIUS

def get_tracking_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('SELECT active FROM tracking WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return bool(result[0]) if result else False

def get_last_location():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"""
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('SELECT latitude, longitude, timestamp FROM last_location WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return result if result else (None, None, None)

def get_last_notification_time():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS notifications (id INTEGER PRIMARY KEY, last_time TEXT)')
    c.execute('SELECT last_time FROM notifications WHERE id = 1')
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

def save_notification_time():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    conn = sqlite3.connect('driver.db')
    c = conn.cursor()
    c.execute('CREATE TABLE IF NOT EXISTS notifications (id INTEGER PRIMARY KEY, last_time TEXT)')
    c.execute('DELETE FROM notifications WHERE id = 1')
    c.execute('INSERT INTO notifications (id, last_time) VALUES (1, ?)', (datetime.now().isoformat(),))
    conn.commit()
    conn.close()

def send_telegram_message(chat_id, message):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": message}
    
    try:
        response = requests.post(url, json=data)
        return response.status_code == 200
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def send_notification():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    current_hour = datetime.now().hour
    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    
    message = f"{greeting}! –£ –ø–æ–¥—ä–µ–∑–¥–∞, –æ–∂–∏–¥–∞—é"
    
    if send_telegram_message(NOTIFICATION_CHAT_ID, message):
        save_notification_time()
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        return False

def can_send_notification():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)"""
    last_time = get_last_notification_time()
    if not last_time:
        return True
    
    try:
        last_notification = datetime.fromisoformat(last_time)
        time_diff = datetime.now() - last_notification
        return time_diff.total_seconds() > NOTIFICATION_COOLDOWN
    except:
        return True

def request_location():
    """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É –≤–æ–¥–∏—Ç–µ–ª—è"""
    message = "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è."
    
    if send_telegram_message(DRIVER_CHAT_ID, message):
        print("üìç –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—é")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è")
        return False

def check_location_and_notify():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    lat, lon, timestamp = get_last_location()
    
    if not lat or not lon:
        print("‚ö†Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç)
    try:
        last_update = datetime.fromisoformat(timestamp)
        time_diff = datetime.now() - last_update
        if time_diff.total_seconds() > 600:  # 10 –º–∏–Ω—É—Ç
            print("‚ö†Ô∏è –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ...")
            request_location()
            return
    except:
        pass
    
    distance = calculate_distance(lat, lon, WORK_LATITUDE, WORK_LONGITUDE)
    at_work = is_at_work(lat, lon)
    tracking = get_tracking_status()
    
    print(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {lat:.6f}, {lon:.6f}")
    print(f"üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã: {int(distance)} –º")
    print(f"üè¢ –ù–∞ —Ä–∞–±–æ—Ç–µ: {'–î–∞' if at_work else '–ù–µ—Ç'}")
    print(f"üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: {'–í–∫–ª—é—á–µ–Ω–æ' if tracking else '–í—ã–∫–ª—é—á–µ–Ω–æ'}")
    
    # –ï—Å–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∏ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if at_work and tracking and can_send_notification():
        print("üö® –£–°–õ–û–í–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!")
        send_notification()
    elif at_work and tracking:
        print("‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (—Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ)")
    else:
        print("‚è∏Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (—É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)")

async def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–±–æ—Ç—ã: {WORK_LATITUDE}, {WORK_LONGITUDE}")
    print(f"üìè –†–∞–¥–∏—É—Å —Ä–∞–±–æ—Ç—ã: {WORK_RADIUS} –º")
    print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—Ä–æ—Å–∞: {LOCATION_REQUEST_INTERVAL} —Å–µ–∫")
    print(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {NOTIFICATION_COOLDOWN} —Å–µ–∫")
    print("=" * 50)
    
    last_request_time = 0
    
    while True:
        try:
            current_time = time.time()
            tracking = get_tracking_status()
            
            if tracking:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                check_location_and_notify()
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if current_time - last_request_time > LOCATION_REQUEST_INTERVAL:
                    request_location()
                    last_request_time = current_time
            else:
                print("‚è∏Ô∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
            
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(60)
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–∫–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            await asyncio.sleep(60)

if __name__ == "__main__":
    asyncio.run(main_loop()) 