#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –∞–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ
"""

import requests
import time
import urllib3
from datetime import datetime

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

BASE_URL = "https://cleverdriver.ru"

def log(message, status="INFO"):
    timestamp = datetime.now().strftime("%H:%M:%S")
    print(f"[{timestamp}] {status}: {message}")

def check_api_response_fields():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ API"""
    log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –≤ –æ—Ç–≤–µ—Ç–µ API...")
    
    try:
        response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
        if response.status_code == 200:
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            has_tracking = 'tracking' in data
            has_tracking_active = 'tracking_active' in data
            
            log(f"–ü–æ–ª–µ 'tracking': {'‚úÖ –ï–°–¢–¨' if has_tracking else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
            log(f"–ü–æ–ª–µ 'tracking_active': {'‚úÖ –ï–°–¢–¨' if has_tracking_active else '‚ùå –û–¢–°–£–¢–°–¢–í–£–ï–¢'}")
            
            if has_tracking and has_tracking_active:
                tracking_val = data.get('tracking')
                tracking_active_val = data.get('tracking_active')
                
                log(f"–ó–Ω–∞—á–µ–Ω–∏–µ 'tracking': {tracking_val}")
                log(f"–ó–Ω–∞—á–µ–Ω–∏–µ 'tracking_active': {tracking_active_val}")
                
                if tracking_val == tracking_active_val:
                    log("‚úÖ –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π —Å–æ–≤–ø–∞–¥–∞—é—Ç", "SUCCESS")
                    return True
                else:
                    log("‚ùå –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π –ù–ï —Å–æ–≤–ø–∞–¥–∞—é—Ç", "ERROR")
                    return False
            else:
                log("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ API", "ERROR")
                return False
        else:
            log(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}", "ERROR")
            return False
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}", "ERROR")
        return False

def test_status_stability():
    """–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –ª–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏"""
    log("üîÑ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...")
    
    statuses = []
    
    for i in range(10):
        try:
            response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
            if response.status_code == 200:
                data = response.json()
                tracking_status = data.get('tracking', None)
                statuses.append(tracking_status)
                log(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {i+1}/10: tracking = {tracking_status}")
            else:
                log(f"‚ùå –û—à–∏–±–∫–∞ API –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {i+1}: {response.status_code}", "ERROR")
                return False
                
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ {i+1}: {e}", "ERROR")
            return False
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    unique_statuses = set(statuses)
    
    if len(unique_statuses) == 1:
        status_value = list(unique_statuses)[0]
        log(f"‚úÖ –°—Ç–∞—Ç—É—Å –°–¢–ê–ë–ò–õ–ï–ù: –≤—Å–µ–≥–¥–∞ {status_value}", "SUCCESS")
        return True
    else:
        log(f"‚ùå –°—Ç–∞—Ç—É—Å –ù–ï–°–¢–ê–ë–ò–õ–ï–ù: –Ω–∞–π–¥–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è {unique_statuses}", "ERROR")
        log(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {statuses}")
        return False

def test_page_consistency():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏ API"""
    log("üìÑ –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ API...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ API
        api_response = requests.get(f"{BASE_URL}/api/status", verify=False, timeout=10)
        if api_response.status_code != 200:
            log("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "ERROR")
            return False
            
        api_data = api_response.json()
        api_tracking = api_data.get('tracking')
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        page_response = requests.get(BASE_URL, verify=False, timeout=10)
        if page_response.status_code != 200:
            log("‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", "ERROR")
            return False
            
        page_content = page_response.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if api_tracking:
            expected_text = "–í–∫–ª—é—á–µ–Ω–æ"
        else:
            expected_text = "–í—ã–∫–ª—é—á–µ–Ω–æ"
            
        if f"–ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>{expected_text}</b>" in page_content:
            log(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç API: {expected_text}", "SUCCESS")
            return True
        else:
            log(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç API", "ERROR")
            log(f"API –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç: {api_tracking}")
            log(f"–û–∂–∏–¥–∞–ª—Å—è —Ç–µ–∫—Å—Ç: {expected_text}")
            return False
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: {e}", "ERROR")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    log("üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ –¶–ò–ö–õ–ò–ß–ï–°–ö–û–ì–û –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø")
    log("=" * 60)
    
    tests = [
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π API", check_api_response_fields),
        ("–¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞", test_status_stability),
        ("–¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", test_page_consistency),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        log(f"\nüìã {test_name}")
        log("-" * 40)
        
        try:
            result = test_func()
            if result:
                passed += 1
                log(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù", "SUCCESS")
            else:
                log(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù", "ERROR")
        except Exception as e:
            log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}", "ERROR")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    log("\n" + "=" * 60)
    log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    log("=" * 60)
    
    log(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        log("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ê.", "SUCCESS")
        log("üí° –ê–≤—Ç–æ–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")
    elif passed > 0:
        log("‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û. –ï—Å—Ç—å –æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.", "WARNING")
    else:
        log("‚ùå –ü–†–û–ë–õ–ï–ú–ê –ù–ï –ò–°–ü–†–ê–í–õ–ï–ù–ê. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞.", "ERROR")
    
    log("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if passed < total:
        log("1. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ web/app.py (–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'tracking' –≤ API)")
        log("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-—Å–µ—Ä–≤–µ—Ä: sudo systemctl restart cleverdriver-web")
        log("3. –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –±—Ä–∞—É–∑–µ—Ä–∞")
    else:
        log("1. –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è")
        log("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è")

if __name__ == "__main__":
    main() 