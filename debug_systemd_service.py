#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞ driver-web
"""

import subprocess
import os
import sqlite3

def check_systemd_service():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞ driver-web...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        result = subprocess.run(['systemctl', 'status', 'driver-web'], 
                              capture_output=True, text=True)
        print("üìã –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:")
        print(result.stdout)
        
        if result.stderr:
            print("‚ùå –û—à–∏–±–∫–∏:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–∞: {e}")

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        result = subprocess.run(['journalctl', '-u', 'driver-web', '-n', '50', '--no-pager'], 
                              capture_output=True, text=True)
        print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:")
        print(result.stdout)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤: {e}")

def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    possible_paths = [
        "driver.db",
        "bot/driver.db",
        "web/driver.db",
        "/root/clever-driver-bot/driver.db",
        "/home/root/clever-driver-bot/driver.db"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ë–î: {path}")
            try:
                conn = sqlite3.connect(path)
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                cursor.execute('PRAGMA table_info(users)')
                columns = [col[1] for col in cursor.fetchall()]
                
                print(f"üìã –ö–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ users: {', '.join(columns)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                cursor.execute("SELECT id, login, email, role FROM users ORDER BY id")
                users = cursor.fetchall()
                
                print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):")
                for user in users:
                    user_id, login, email, role = user
                    print(f"  ID: {user_id}, Login: {login}, Email: {email or '–ù–ï–¢'}, Role: {role}")
                
                conn.close()
                break
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î {path}: {e}")
        else:
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

def check_web_app():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–ª—É—à–∞–µ—Ç –ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞ –ø–æ—Ä—Ç—É 5000
        result = subprocess.run(['netstat', '-tlnp'], capture_output=True, text=True)
        if '5000' in result.stdout:
            print("‚úÖ –ü–æ—Ä—Ç 5000 –∞–∫—Ç–∏–≤–µ–Ω")
            for line in result.stdout.split('\n'):
                if '5000' in line:
                    print(f"  {line}")
        else:
            print("‚ùå –ü–æ—Ä—Ç 5000 –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä—Ç–æ–≤: {e}")

def restart_service():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å"""
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...")
        result = subprocess.run(['systemctl', 'stop', 'driver-web'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        import time
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        print("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...")
        result = subprocess.run(['systemctl', 'start', 'driver-web'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {result.stderr}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        time.sleep(3)
        result = subprocess.run(['systemctl', 'status', 'driver-web'], 
                              capture_output=True, text=True)
        print("üìã –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
        print(result.stdout)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    print("üöÄ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞ driver-web")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    check_systemd_service()
    check_logs()
    check_database_connection()
    check_web_app()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    print("\n" + "=" * 60)
    print("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å? (y/n): ", end="")
    
    try:
        response = input().lower().strip()
        if response in ['y', 'yes', '–¥–∞', '–¥']:
            restart_service()
        else:
            print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω")
    except KeyboardInterrupt:
        print("\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    print("\nüéØ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!") 