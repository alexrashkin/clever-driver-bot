import logging
import asyncio
import contextlib
import os
import sys
import time
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)
from config.settings import config
from bot.handlers import (
    start_command, help_command, handle_text, error_handler, bind_command
)
from bot.database import db
from bot.utils import create_work_notification
from bot.state import (
    load_last_checked_id, save_last_checked_id, 
    load_last_checked_time, save_last_checked_time, 
    load_last_notification_type, save_last_notification_type,
    can_send_notification, save_last_arrival_time, save_last_departure_time
)
from bot.notification_system import notification_system

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LAST_ID_FILE = os.path.join(BASE_DIR, "last_checked_id.txt")  # –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª –±—É–¥–µ—Ç —Ä—è–¥–æ–º —Å bot/main.py
LAST_TIME_FILE = os.path.join(BASE_DIR, "last_checked_time.txt")  # –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞

# –£–¥–∞–ª—è—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π load_last_checked_id, save_last_checked_id, load_last_checked_time, save_last_checked_time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=getattr(logging, config.LOG_LEVEL),
    handlers=[
        logging.StreamHandler()  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    ]
)
logger = logging.getLogger(__name__)

async def monitor_database(application: Application):
    last_checked_id = load_last_checked_id()
    last_checked_time = load_last_checked_time()
    last_notification_type = load_last_notification_type()  # –ù–æ–≤–æ–µ: —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    logger.info(f"üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω. last_checked_id: {last_checked_id}, last_checked_time: {last_checked_time}, last_notification_type: {last_notification_type}")

    while True:
        try:
            conn = sqlite3.connect('driver.db')
            cursor = conn.cursor()
            cursor.execute("""
                SELECT ul.id, ul.is_at_work, ul.created_at, ul.latitude, ul.longitude
                FROM user_locations ul
                JOIN users u ON ul.user_id = u.id
                WHERE u.role IN ('driver', 'admin')
                ORDER BY ul.id DESC LIMIT 3
            """)
            rows = cursor.fetchall()
            conn.close()

            logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –Ω–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")
            if len(rows) >= 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                curr_id, curr_is_at_work, curr_time, curr_lat, curr_lon = rows[0]
                prev_id, prev_is_at_work, prev_time, prev_lat, prev_lon = rows[1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –∑–∞–ø–∏—Å–∏
                recent_statuses = [row[1] for row in rows[:2]]
                status_stable = len(set(recent_statuses)) == 1  # –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                
                logger.info(f"üìç –¢–µ–∫—É—â–∞—è: ID {curr_id}, is_at_work: {curr_is_at_work}, –≤—Ä–µ–º—è: {curr_time}")
                logger.info(f"üìç –ü—Ä–µ–¥—ã–¥—É—â–∞—è: ID {prev_id}, is_at_work: {prev_is_at_work}, –≤—Ä–µ–º—è: {prev_time}")
                logger.info(f"üîç –°—Ç–∞—Ç—É—Å —Å—Ç–∞–±–∏–ª–µ–Ω: {status_stable}, –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã: {recent_statuses}")

                # –ü–µ—Ä–µ—Ö–æ–¥ 0‚Üí1 (–≤—ä–µ–∑–¥ –≤ –∑–æ–Ω—É) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–±–∏–ª–µ–Ω
                if (prev_is_at_work == 0 and curr_is_at_work == 1 and 
                    curr_id != last_checked_id and 
                    last_notification_type != 'arrival' and
                    status_stable):
                    import time as t
                    curr_ts = t.mktime(t.strptime(curr_time, "%Y-%m-%d %H:%M:%S"))
                    logger.info(f"DEBUG: –ø–µ—Ä–µ—Ö–æ–¥ 0‚Üí1, curr_id={curr_id}, curr_ts={curr_ts}, last_checked_time={last_checked_time}")
                    if curr_ts - last_checked_time >= 10:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–∏–±—ã—Ç–∏–∏
                        if can_send_notification('arrival', max_interval_minutes=30):
                            last_checked_id = curr_id
                            last_checked_time = curr_ts
                            last_notification_type = 'arrival'
                            save_last_checked_id(last_checked_id)
                            save_last_checked_time(curr_ts)
                            save_last_notification_type(last_notification_type)
                            save_last_arrival_time(curr_ts)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                            conn = sqlite3.connect('driver.db')
                            cursor = conn.cursor()
                            cursor.execute('SELECT is_active FROM tracking_status WHERE id = 1')
                            result = cursor.fetchone()
                            tracking_active = result[0] if result else False
                            conn.close()
                            logger.info(f"üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {tracking_active}")
                            if tracking_active:
                                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                                conn = sqlite3.connect('driver.db')
                                cursor = conn.cursor()
                                cursor.execute("SELECT telegram_id FROM users WHERE role = 'recipient'")
                                recipients = cursor.fetchall()
                                conn.close()
                                logger.info(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
                                if recipients:
                                    logger.info(f"–ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! recipients: {recipients}")
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram
                                    from bot.utils import create_work_notification
                                    system_info = {'id': None, 'telegram_id': None, 'login': 'system', 'role': 'system'}
                                    result = await notification_system.send_notification_with_confirmation(
                                        notification_type='automatic',
                                        sender_info=system_info,
                                        recipients=[r[0] for r in recipients],
                                        notification_text=create_work_notification(),
                                        custom_confirmation=True
                                    )
                                    if result['success']:
                                        logger.info(f"üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['sent_count']} –∏–∑ {result['total_recipients']}")
                                    else:
                                        logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                                else:
                                    logger.warning("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                            else:
                                logger.info("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        else:
                            logger.info("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
                    else:
                        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–¥–∏—É—Å, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥")
                elif not status_stable:
                    logger.info(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –Ω–µ—Å—Ç–∞–±–∏–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—É—Å—ã: {recent_statuses}")
                
                # –ü–µ—Ä–µ—Ö–æ–¥ 1‚Üí0 (–≤—ã–µ–∑–¥ –∏–∑ –∑–æ–Ω—ã) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–±–∏–ª–µ–Ω
                if (prev_is_at_work == 1 and curr_is_at_work == 0 and 
                    curr_id != last_checked_id and 
                    last_notification_type != 'departure' and
                    status_stable):
                    import time as t
                    curr_ts = t.mktime(t.strptime(curr_time, "%Y-%m-%d %H:%M:%S"))
                    logger.info(f"DEBUG: –ø–µ—Ä–µ—Ö–æ–¥ 1‚Üí0, curr_id={curr_id}, curr_ts={curr_ts}, last_checked_time={last_checked_time}")
                    if curr_ts - last_checked_time >= 10:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–µ–∑–¥–µ
                        if can_send_notification('departure', max_interval_minutes=30):
                            last_checked_id = curr_id
                            last_checked_time = curr_ts
                            last_notification_type = 'departure'
                            save_last_checked_id(last_checked_id)
                            save_last_checked_time(curr_ts)
                            save_last_notification_type(last_notification_type)
                            save_last_departure_time(curr_ts)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            conn = sqlite3.connect('driver.db')
                            cursor = conn.cursor()
                            cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL")
                            users = cursor.fetchall()
                            conn.close()
                            logger.info(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ: {len(users)}")
                            if users:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏
                                from bot.utils import create_work_notification
                                system_info = {'id': None, 'telegram_id': None, 'login': 'system', 'role': 'system'}
                                result = await notification_system.send_notification_with_confirmation(
                                    notification_type='automatic',
                                    sender_info=system_info,
                                    recipients=[u[0] for u in users],
                                    notification_text="–í—ã–µ—Ö–∞–ª–∏",
                                    custom_confirmation=True
                                )
                                if result['success']:
                                    logger.info(f"üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –í–´–ï–ó–î–ï: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['sent_count']} –∏–∑ {result['total_recipients']}")
                                else:
                                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ")
                            else:
                                logger.warning("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–µ–∑–¥–µ")
                        else:
                            logger.info("‚è∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
                    else:
                        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Ä–∞–¥–∏—É—Å–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await asyncio.sleep(5)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("bind", bind_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_system.bot = application.bot
        
        logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(monitor_database(application))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await application.run_polling(
            drop_pending_updates=True,
            timeout=30,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=10
        )
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(main()) 