import logging
import asyncio
import contextlib
import os
import sys
import time
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)
from config.settings import config
from bot.handlers import (
    start_command, help_command, handle_text, error_handler, bind_command
)
from bot.database import db
from bot.utils import create_work_notification
from bot.state import (
    load_last_checked_id, save_last_checked_id, 
    load_last_checked_time, save_last_checked_time, 
    load_last_notification_type, save_last_notification_type,
    can_send_notification, save_last_arrival_time, save_last_departure_time
)
from bot.notification_system import notification_system

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LAST_ID_FILE = os.path.join(BASE_DIR, "last_checked_id.txt")  # –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª –±—É–¥–µ—Ç —Ä—è–¥–æ–º —Å bot/main.py
LAST_TIME_FILE = os.path.join(BASE_DIR, "last_checked_time.txt")  # –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞

# –£–¥–∞–ª—è—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π load_last_checked_id, save_last_checked_id, load_last_checked_time, save_last_checked_time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=getattr(logging, config.LOG_LEVEL),
    handlers=[
        logging.StreamHandler()  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    ]
)
logger = logging.getLogger(__name__)

async def monitor_database(application: Application):
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–æ–º–ø–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –¥–µ—Ç–µ–∫—Ü–∏—é –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ ID/–≤—Ä–µ–º—è/—Ç–∏–ø –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    per_user_last_checked_id = {}
    per_user_last_checked_time = {}
    per_user_last_notification_type = {}
    logger.info("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)")

    import time as t

    while True:
        try:
            conn = sqlite3.connect('driver.db')
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT ul.id, ul.telegram_id, ul.is_at_work, ul.created_at
                FROM user_locations ul
                JOIN users u ON ul.user_id = u.id
                WHERE u.role IN ('driver', 'admin') AND ul.telegram_id IS NOT NULL
                ORDER BY ul.id DESC
                LIMIT 200
                """
            )
            rows = cursor.fetchall()
            conn.close()

            logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ø–æ–ª—É—á–µ–Ω–æ {len(rows)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π")

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ telegram_id
            from collections import defaultdict
            by_user = defaultdict(list)
            for row in rows:
                rec_id, tg_id, is_at_work, created_at = row
                by_user[tg_id].append((rec_id, is_at_work, created_at))

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º—É–º –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
            for tg_id, entries in by_user.items():
                if len(entries) < 2:
                    continue
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É–∂–µ –≤ –ø–æ—Ä—è–¥–∫–µ DESC –ø–æ id
                (curr_id, curr_is_at_work, curr_time) = entries[0]
                (prev_id, prev_is_at_work, prev_time) = entries[1]
                prev2_is_at_work = entries[2][1] if len(entries) >= 3 else None

                try:
                    curr_ts = t.mktime(t.strptime(curr_time, "%Y-%m-%d %H:%M:%S"))
                    prev_ts = t.mktime(t.strptime(prev_time, "%Y-%m-%d %H:%M:%S"))
                except Exception:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    continue

                dt_prev_curr = curr_ts - prev_ts

                def confirmed_transition(new_state: int) -> bool:
                    if prev2_is_at_work is not None and prev2_is_at_work == new_state:
                        return True
                    return dt_prev_curr >= 5

                last_checked_id = per_user_last_checked_id.get(tg_id, 0)
                last_checked_time = per_user_last_checked_time.get(tg_id, 0.0)
                last_notification_type = per_user_last_notification_type.get(tg_id)

                # –í—ä–µ–∑–¥ 0‚Üí1
                if (
                    prev_is_at_work == 0 and curr_is_at_work == 1 and
                    curr_id != last_checked_id and
                    last_notification_type != 'arrival' and
                    confirmed_transition(1)
                ):
                    logger.info(
                        f"DEBUG[{tg_id}]: –ø–µ—Ä–µ—Ö–æ–¥ 0‚Üí1 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (dt={dt_prev_curr}s, prev2={prev2_is_at_work})"
                    )
                    if curr_ts - last_checked_time >= 10:
                        if can_send_notification('arrival', max_interval_minutes=30):
                            per_user_last_checked_id[tg_id] = curr_id
                            per_user_last_checked_time[tg_id] = curr_ts
                            per_user_last_notification_type[tg_id] = 'arrival'
                            save_last_arrival_time(curr_ts)

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                            conn = sqlite3.connect('driver.db')
                            cursor = conn.cursor()
                            cursor.execute('SELECT is_active FROM tracking_status WHERE id = 1')
                            result = cursor.fetchone()
                            tracking_active = result[0] if result else False
                            conn.close()
                            logger.info(f"üì° –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ: {tracking_active}")
                            if tracking_active:
                                conn = sqlite3.connect('driver.db')
                                cursor = conn.cursor()
                                cursor.execute("SELECT telegram_id FROM users WHERE role = 'recipient' AND telegram_id IS NOT NULL")
                                recipients = [r[0] for r in cursor.fetchall()]
                                conn.close()
                                logger.info(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}")
                                if recipients:
                                    system_info = {'id': None, 'telegram_id': None, 'login': 'system', 'role': 'system'}
                                    result = await notification_system.send_notification_with_confirmation(
                                        notification_type='automatic',
                                        sender_info=system_info,
                                        recipients=recipients,
                                        notification_text=create_work_notification(),
                                        custom_confirmation=True
                                    )
                                    if result['success']:
                                        logger.info(
                                            f"üìä –ê–í–¢–û[{tg_id}]: –ø—Ä–∏–±—ã—Ç–∏–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['sent_count']} –∏–∑ {result['total_recipients']}"
                                        )
                                    else:
                                        logger.warning(f"‚ùå –ü—Ä–∏–±—ã—Ç–∏–µ[{tg_id}]: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                                else:
                                    logger.warning("‚ùå –ü—Ä–∏–±—ã—Ç–∏–µ: –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π")
                            else:
                                logger.info("–ü—Ä–∏–±—ã—Ç–∏–µ: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        else:
                            logger.info("‚è∞ –ü—Ä–∏–±—ã—Ç–∏–µ: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
                    else:
                        logger.info("–ü—Ä–∏–±—ã—Ç–∏–µ: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (<10s)")

                # –í—ã–µ–∑–¥ 1‚Üí0
                if (
                    prev_is_at_work == 1 and curr_is_at_work == 0 and
                    curr_id != last_checked_id and
                    last_notification_type != 'departure' and
                    confirmed_transition(0)
                ):
                    logger.info(
                        f"DEBUG[{tg_id}]: –ø–µ—Ä–µ—Ö–æ–¥ 1‚Üí0 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (dt={dt_prev_curr}s, prev2={prev2_is_at_work})"
                    )
                    if curr_ts - last_checked_time >= 10:
                        if can_send_notification('departure', max_interval_minutes=30):
                            per_user_last_checked_id[tg_id] = curr_id
                            per_user_last_checked_time[tg_id] = curr_ts
                            per_user_last_notification_type[tg_id] = 'departure'
                            save_last_departure_time(curr_ts)

                            conn = sqlite3.connect('driver.db')
                            cursor = conn.cursor()
                            cursor.execute("SELECT telegram_id FROM users WHERE role = 'recipient' AND telegram_id IS NOT NULL")
                            users = [u[0] for u in cursor.fetchall()]
                            conn.close()
                            logger.info(f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ: {len(users)}")
                            if users:
                                system_info = {'id': None, 'telegram_id': None, 'login': 'system', 'role': 'system'}
                                result = await notification_system.send_notification_with_confirmation(
                                    notification_type='automatic',
                                    sender_info=system_info,
                                    recipients=users,
                                    notification_text="–í—ã–µ—Ö–∞–ª–∏",
                                    custom_confirmation=True
                                )
                                if result['success']:
                                    logger.info(
                                        f"üìä –ê–í–¢–û[{tg_id}]: –≤—ã–µ–∑–¥ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['sent_count']} –∏–∑ {result['total_recipients']}"
                                    )
                                else:
                                    logger.warning(f"‚ùå –í—ã–µ–∑–¥[{tg_id}]: –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                            else:
                                logger.warning("‚ùå –í—ã–µ–∑–¥: –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                        else:
                            logger.info("‚è∞ –í—ã–µ–∑–¥: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏")
                    else:
                        logger.info("–í—ã–µ–∑–¥: —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (<10s)")

            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await asyncio.sleep(5)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("bind", bind_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_system.bot = application.bot
        
        logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(monitor_database(application))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await application.run_polling(
            drop_pending_updates=True,
            timeout=30,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=10
        )
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    asyncio.run(main()) 