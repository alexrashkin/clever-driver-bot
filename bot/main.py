import logging
import asyncio
import contextlib
import os
import sys
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, ContextTypes
)
from config.settings import config
from bot.handlers import (
    start_command, help_command, handle_text, error_handler, bind_command
)
from bot.database import db
from bot.utils import create_work_notification
from bot.state import load_last_checked_id, save_last_checked_id, load_last_checked_time, save_last_checked_time
from bot.notification_system import notification_system

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LAST_ID_FILE = os.path.join(BASE_DIR, "last_checked_id.txt")  # –¢–µ–ø–µ—Ä—å —Ñ–∞–π–ª –±—É–¥–µ—Ç —Ä—è–¥–æ–º —Å bot/main.py
LAST_TIME_FILE = os.path.join(BASE_DIR, "last_checked_time.txt")  # –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Ö–æ–¥–∞

# –£–¥–∞–ª—è—é –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π load_last_checked_id, save_last_checked_id, load_last_checked_time, save_last_checked_time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=getattr(logging, config.LOG_LEVEL),
    handlers=[
        logging.StreamHandler()  # –í—Ä–µ–º–µ–Ω–Ω–æ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    ]
)
logger = logging.getLogger(__name__)

async def monitor_database(application: Application):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    last_checked_id = load_last_checked_id()
    last_checked_time = load_last_checked_time()
    while True:
        try:
            conn = db.get_connection()
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            cursor.execute("""
                SELECT id, is_at_work, timestamp FROM locations ORDER BY id DESC LIMIT 2
            """)
            rows = cursor.fetchall()
            conn.close()

            if len(rows) == 2:
                curr_id, curr_is_at_work, curr_time = rows[0]
                prev_id, prev_is_at_work, prev_time = rows[1]
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ —Å 0 –Ω–∞ 1
                if prev_is_at_work == 0 and curr_is_at_work == 1 and curr_id != last_checked_id:
                    curr_ts = time.mktime(time.strptime(curr_time, "%Y-%m-%d %H:%M:%S"))
                    logger.info(f"DEBUG: –ø–µ—Ä–µ—Ö–æ–¥ 0‚Üí1, curr_id={curr_id}, curr_ts={curr_ts}, last_checked_time={last_checked_time}")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    if curr_ts - last_checked_time >= 10:  # 10 —Å–µ–∫—É–Ω–¥
                        last_checked_id = curr_id
                        save_last_checked_id(last_checked_id)
                        save_last_checked_time(curr_ts)
                        if db.get_tracking_status():
                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –±–æ—Ç–æ–º
                            notification_system.bot = application.bot
                            
                            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                            conn = db.get_connection()
                            cursor = conn.cursor()
                            cursor.execute("SELECT telegram_id FROM users WHERE role = 'recipient'")
                            recipients = cursor.fetchall()
                            conn.close()
                            
                            if recipients:
                                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
                                system_info = {
                                    'id': None,
                                    'telegram_id': None,
                                    'login': 'system',
                                    'role': 'system'
                                }
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                                result = await notification_system.send_notification_with_confirmation(
                                    notification_type='automatic',
                                    sender_info=system_info,
                                    recipients=[r[0] for r in recipients],
                                    notification_text=create_work_notification(),
                                    custom_confirmation=True
                                )
                                
                                if result['success']:
                                    logger.info(f"üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {result['sent_count']} –∏–∑ {result['total_recipients']}")
                                    logger.info(f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {latitude:.6f}, {longitude:.6f}")
                                    logger.info(f"üè¢ –°—Ç–∞—Ç—É—Å: {'–í —Ä–∞–±–æ—á–µ–π –∑–æ–Ω–µ' if is_at_work else '–í –ø—É—Ç–∏'}")
                                else:
                                    logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                            else:
                                logger.warning("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                    else:
                        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–¥–∏—É—Å, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥")
                # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ —Å 1 –Ω–∞ 0 (–≤—ã–µ–∑–¥ –∏–∑ —Ä–∞–¥–∏—É—Å–∞)
                if prev_is_at_work == 1 and curr_is_at_work == 0 and curr_id != last_checked_id:
                    curr_ts = time.mktime(time.strptime(curr_time, "%Y-%m-%d %H:%M:%S"))
                    logger.info(f"DEBUG: –ø–µ—Ä–µ—Ö–æ–¥ 1‚Üí0, curr_id={curr_id}, curr_ts={curr_ts}, last_checked_time={last_checked_time}")
                    if curr_ts - last_checked_time >= 10:  # 10 —Å–µ–∫—É–Ω–¥
                        last_checked_id = curr_id
                        save_last_checked_id(last_checked_id)
                        save_last_checked_time(curr_ts)
                        if db.get_tracking_status():
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∞–¥–º–∏–Ω—ã, –≤–æ–¥–∏—Ç–µ–ª–∏ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏)
                            conn = db.get_connection()
                            cursor = conn.cursor()
                            cursor.execute("SELECT telegram_id FROM users WHERE role IS NOT NULL")
                            users = cursor.fetchall()
                            conn.close()
                            
                            notification = "–í—ã–µ—Ö–∞–ª–∏"
                            sent_count = 0
                            
                            for (telegram_id,) in users:
                                try:
                                    logger.info(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–µ–∑–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: '{notification}'")
                                    await application.bot.send_message(
                                        chat_id=telegram_id,
                                        text=notification
                                    )
                                    sent_count += 1
                                    logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '–í—ã–µ—Ö–∞–ª–∏' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}: {e}")
                            
                            if sent_count > 0:
                                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–µ–∑–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è –∑–∞–ø–∏—Å–∏ ID: {curr_id}")
                            else:
                                logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—è–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤—ã–µ–∑–¥–µ")
                    else:
                        logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥ –∏–∑ —Ä–∞–¥–∏—É—Å–∞, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            await asyncio.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥—ë–º –¥–æ–ª—å—à–µ

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
        application = Application.builder().token(config.TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("bind", bind_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_system.bot = application.bot
        
        logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        asyncio.create_task(monitor_database(application))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        await application.run_polling(
            drop_pending_updates=True,
            timeout=30,
            read_timeout=30,
            write_timeout=30,
            connect_timeout=10
        )
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main()) 