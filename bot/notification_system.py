#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
from datetime import datetime
from bot.database import db
from bot.utils import create_work_notification

logger = logging.getLogger(__name__)

class NotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, bot_application=None):
        self.bot = bot_application
    
    async def send_notification_with_confirmation(self, notification_type, sender_info, 
                                                 recipients, notification_text=None, 
                                                 custom_confirmation=True):
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
        
        Args:
            notification_type (str): –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('manual', 'automatic', 'arrival', 'departure')
            sender_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
            recipients (list): –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (telegram_id)
            notification_text (str): –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            custom_confirmation (bool): –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_log_id = db.create_notification_log(
            notification_type=notification_type,
            sender_id=sender_info.get('id'),
            sender_telegram_id=sender_info.get('telegram_id'),
            sender_login=sender_info.get('login'),
            notification_text=notification_text or create_work_notification()
        )
        
        if not notification_log_id:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return {'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥–∞'}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –¥–µ—Ç–∞–ª–∏
        for recipient_id in recipients:
            user_info = db.get_user_by_telegram_id(recipient_id)
            recipient_name = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}".strip() if user_info else None
            
            db.add_notification_detail(
                notification_log_id=notification_log_id,
                recipient_telegram_id=recipient_id,
                recipient_name=recipient_name,
                status="pending"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sent_count = 0
        failed_count = 0
        successful_recipients = []
        failed_recipients = []
        
        for recipient_id in recipients:
            try:
                if self.bot:
                    await self.bot.send_message(
                        chat_id=recipient_id,
                        text=notification_text or create_work_notification()
                    )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π
                    db.update_notification_detail(
                        notification_log_id=notification_log_id,
                        recipient_telegram_id=recipient_id,
                        status="sent"
                    )
                    
                    sent_count += 1
                    user_info = db.get_user_by_telegram_id(recipient_id)
                    if user_info:
                        successful_recipients.append(f"‚Ä¢ {user_info.get('first_name', '')} {user_info.get('last_name', '')}")
                    else:
                        successful_recipients.append(f"‚Ä¢ ID: {recipient_id}")
                    
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {recipient_id}")
                    
                else:
                    logger.error("Bot application –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                    failed_count += 1
                    
            except Exception as e:
                error_msg = str(e)
                db.update_notification_detail(
                    notification_log_id=notification_log_id,
                    recipient_telegram_id=recipient_id,
                    status="failed",
                    error_message=error_msg
                )
                
                failed_count += 1
                user_info = db.get_user_by_telegram_id(recipient_id)
                if user_info:
                    failed_recipients.append(f"‚Ä¢ {user_info.get('first_name', '')} {user_info.get('last_name', '')} (–æ—à–∏–±–∫–∞: {error_msg})")
                else:
                    failed_recipients.append(f"‚Ä¢ ID: {recipient_id} (–æ—à–∏–±–∫–∞: {error_msg})")
                
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {recipient_id}: {e}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª–æ–≥
        db.complete_notification_log(notification_log_id, sent_count, failed_count)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if custom_confirmation and sent_count > 0:
            await self._send_confirmation_messages(
                notification_log_id, sender_info, successful_recipients, 
                failed_recipients, notification_text, notification_type
            )
        
        return {
            'success': sent_count > 0,
            'notification_log_id': notification_log_id,
            'sent_count': sent_count,
            'failed_count': failed_count,
            'total_recipients': len(recipients),
            'successful_recipients': successful_recipients,
            'failed_recipients': failed_recipients
        }
    
    async def _send_confirmation_messages(self, notification_log_id, sender_info, 
                                         successful_recipients, failed_recipients, 
                                         notification_text, notification_type):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º"""
        current_time = datetime.now().strftime('%H:%M:%S')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
        if sender_info.get('role') == 'driver' or notification_type in ['manual', 'automatic']:
            await self._send_driver_confirmation(
                notification_log_id, sender_info, successful_recipients, 
                failed_recipients, notification_text, current_time
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await self._send_admin_confirmation(
            notification_log_id, sender_info, successful_recipients, 
            failed_recipients, notification_text, current_time, notification_type
        )
        
        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
        db.mark_confirmation_sent(notification_log_id)
    
    async def _send_driver_confirmation(self, notification_log_id, sender_info, 
                                       successful_recipients, failed_recipients, 
                                       notification_text, current_time):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º"""
        if not self.bot:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role = 'driver' AND telegram_id IS NOT NULL")
        drivers = cursor.fetchall()
        conn.close()
        
        if not drivers:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_text = f"""‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(successful_recipients)} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º:
üìÖ –í—Ä–µ–º—è: {current_time}
üì¢ –¢–µ–∫—Å—Ç: '{notification_text}'

üéØ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:
{chr(10).join(successful_recipients)}"""
        
        if failed_recipients:
            confirmation_text += f"""

‚ùå –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:
{chr(10).join(failed_recipients)}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º
        for (driver_telegram_id,) in drivers:
            try:
                await self.bot.send_message(
                    chat_id=driver_telegram_id,
                    text=confirmation_text
                )
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é {driver_telegram_id}: {e}")
    
    async def _send_admin_confirmation(self, notification_log_id, sender_info, 
                                      successful_recipients, failed_recipients, 
                                      notification_text, current_time, notification_type):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        if not self.bot:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id FROM users WHERE role = 'admin' AND telegram_id IS NOT NULL")
        admins = cursor.fetchall()
        conn.close()
        
        if not admins:
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        sender_name = f"{sender_info.get('first_name', '')} {sender_info.get('last_name', '')}".strip()
        if not sender_name:
            sender_name = sender_info.get('login', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        confirmation_text = f"""üîî –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ü–†–ê–í–õ–ï–ù–´
üìÖ –í—Ä–µ–º—è: {current_time}
üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}
üìù –¢–∏–ø: {notification_type}
üì¢ –¢–µ–∫—Å—Ç: '{notification_text}'

üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ ({len(successful_recipients)}):
{chr(10).join(successful_recipients)}"""
        
        if failed_recipients:
            confirmation_text += f"""

‚ùå –û—à–∏–±–∫–∏ ({len(failed_recipients)}):
{chr(10).join(failed_recipients)}"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for (admin_telegram_id,) in admins:
            try:
                await self.bot.send_message(
                    chat_id=admin_telegram_id,
                    text=confirmation_text
                )
                logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_telegram_id}: {e}")
    
    def get_notification_statistics(self, days=7):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        conn = db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT 
                notification_type,
                COUNT(*) as total_notifications,
                SUM(sent_count) as total_sent,
                SUM(failed_count) as total_failed,
                AVG(sent_count) as avg_sent,
                AVG(failed_count) as avg_failed
            FROM notification_logs 
            WHERE created_at >= datetime('now', '-{} days')
            GROUP BY notification_type
        '''.format(days))
        
        rows = cursor.fetchall()
        conn.close()
        
        if rows:
            columns = ['notification_type', 'total_notifications', 'total_sent', 
                      'total_failed', 'avg_sent', 'avg_failed']
            return [dict(zip(columns, row)) for row in rows]
        return []
    
    def get_user_notification_history(self, user_id, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT id, notification_type, notification_text, recipients_count,
                   sent_count, failed_count, created_at, completed_at
            FROM notification_logs 
            WHERE sender_id = ? OR sender_telegram_id = ?
            ORDER BY created_at DESC
            LIMIT ?
        ''', (user_id, user_id, limit))
        
        rows = cursor.fetchall()
        conn.close()
        
        if rows:
            columns = ['id', 'notification_type', 'notification_text', 'recipients_count',
                      'sent_count', 'failed_count', 'created_at', 'completed_at']
            return [dict(zip(columns, row)) for row in rows]
        return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_system = NotificationSystem() 