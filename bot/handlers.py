import logging
import time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from config.settings import config
from bot.database import db
from bot.utils import calculate_distance, is_at_work, create_work_notification
from bot.main import load_last_checked_time, save_last_checked_time

logger = logging.getLogger(__name__)

def create_main_keyboard():
    keyboard = [
        [KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"""
üöó –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–∞ —Ä–∞–±–æ—Ç—É.

–í–∞–º –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Äî –≤—Å—ë –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä.
"""
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/track ‚Äî –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/status ‚Äî –°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è

–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ –º–æ–±–∏–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä –Ω–∞ —Å–∞–π—Ç–µ
2. –í–∫–ª—é—á–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /track
3. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–∏—Ç –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
"""
    await update.message.reply_text(help_text)

async def track_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_status = db.get_tracking_status()
    if current_status:
        db.set_tracking_status(False)
        await update.message.reply_text("‚èπÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ")
    else:
        db.set_tracking_status(True)
        await update.message.reply_text("üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tracking_status = db.get_tracking_status()
    status_text = "üîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ" if tracking_status else "‚èπÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"
    await update.message.reply_text(status_text)

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    location = update.message.location
    latitude = location.latitude
    longitude = location.longitude
    distance = calculate_distance(latitude, longitude, config.WORK_LATITUDE, config.WORK_LONGITUDE)
    at_work = is_at_work(latitude, longitude)
    db.add_location(latitude, longitude, distance, at_work)
    # –ü–æ–ª—É—á–∞–µ–º –¥–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    history = db.get_location_history(limit=2)
    if len(history) == 2:
        prev = history[1]
        curr = history[0]
        if at_work and db.get_tracking_status() and not prev['is_at_work'] and curr['is_at_work']:
            curr_ts = time.time()
            last_checked_time = load_last_checked_time()
            if curr_ts - last_checked_time >= 60*60:  # 60 –º–∏–Ω—É—Ç
                notification = create_work_notification()
                try:
                    await context.bot.send_message(chat_id=config.NOTIFICATION_CHAT_ID, text=notification)
                    save_last_checked_time(curr_ts)
                    logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            else:
                logger.info("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–¥–∏—É—Å, –Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 60 –º–∏–Ω—É—Ç")
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–µ–Ω—å—à–µ –¥–≤—É—Ö, –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /help, /track, /status.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")
    if update and update.effective_message:
        await update.effective_message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.") 