import math
import logging
from datetime import datetime, timedelta
from config.settings import config

logger = logging.getLogger(__name__)

def calculate_distance(lat1, lon1, lat2, lon2):
    """
    –†–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
    """
    R = 6371000  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
    
    lat1_rad = math.radians(lat1)
    lat2_rad = math.radians(lat2)
    delta_lat = math.radians(lat2 - lat1)
    delta_lon = math.radians(lon2 - lon1)
    
    a = (math.sin(delta_lat / 2) ** 2 + 
         math.cos(lat1_rad) * math.cos(lat2_rad) * 
         math.sin(delta_lon / 2) ** 2)
    
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))
    distance = R * c
    
    return distance

def is_at_work(latitude, longitude, user_role=None, user_work_lat=None, user_work_lon=None, user_work_radius=None):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å (–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –∑–æ–Ω–µ)
    –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π (driver) –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (admin)
    –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ (recipient) –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç False
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–ª—É—á–∞—Ç–µ–ª—å, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å "–≤ —Ä–∞–±–æ—Ç–µ"
    if user_role == 'recipient':
        return False
    
    # –î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á—É—é –∑–æ–Ω—É
    if user_work_lat is not None and user_work_lon is not None and user_work_radius is not None:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        work_lat = user_work_lat
        work_lon = user_work_lon
        work_radius = user_work_radius
    else:
        # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False
        return False
    
    distance = calculate_distance(
        latitude, longitude,
        work_lat, work_lon
    )
    return distance <= work_radius

def get_greeting():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ (–ø–æ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –≤ Europe/Moscow)
    """
    import logging
    now = datetime.now()
    current_hour = now.hour
    greeting = None
    if 5 <= current_hour < 12:
        greeting = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ"
    elif 12 <= current_hour < 17:
        greeting = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å"
    elif 17 <= current_hour < 23:
        greeting = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä"
    else:
        greeting = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏"
    logging.warning(f"[DEBUG GREETING] –°–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è: {now}, –ß–∞—Å: {current_hour}, –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {greeting}")
    return greeting

def format_distance(distance):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if distance < 1000:
        return f"{int(distance)} –º"
    else:
        return f"{distance/1000:.1f} –∫–º"

def format_timestamp(timestamp):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è +3 —á–∞—Å–∞)
    """
    if isinstance(timestamp, str):
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
        except:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SQLite
                dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
            except:
                return timestamp
    else:
        dt = timestamp
    
    # –î–æ–±–∞–≤–ª—è–µ–º 3 —á–∞—Å–∞ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    dt_moscow = dt + timedelta(hours=3)
    return dt_moscow.strftime("%d.%m.%Y %H:%M:%S")

def create_location_message(latitude, longitude, distance=None, is_at_work=False):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    """
    if distance is None:
        # –ï—Å–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        distance_text = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    else:
        distance_text = format_distance(distance)
    
    status = "üìç –í–æ–¥–∏—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç" if is_at_work else "üöó –í –ø—É—Ç–∏"
    
    message = f"{status}\n"
    message += f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude:.6f}, {longitude:.6f}\n"
    message += f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–∞–±–æ—Ç—ã: {distance_text}"
    
    return message

def create_work_notification():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
    """
    greeting = get_greeting()
    return f"{greeting}! –û–∂–∏–¥–∞—é —É –ø–æ–¥—ä–µ–∑–¥–∞"

def validate_coordinates(latitude, longitude):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    """
    try:
        lat = float(latitude)
        lon = float(longitude)
        
        if not (-90 <= lat <= 90):
            return False, "–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90"
        
        if not (-180 <= lon <= 180):
            return False, "–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180"
        
        return True, None
    except (ValueError, TypeError):
        return False, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏" 