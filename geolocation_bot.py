import asyncio
import logging
import json
import time
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Optional
import requests
from geopy.distance import geodesic
from telegram import Bot
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class GeoLocationBot:
    def __init__(self, bot_token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π.
        
        Args:
            bot_token (str): –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
        """
        self.bot: Bot = Bot(token=bot_token)
        self.locations: List[Dict] = []  # –°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Å—Ç
        self.current_location: Optional[Dict] = None
        self.is_tracking: bool = False
        self.tracking_thread: Optional[threading.Thread] = None
        self.last_notifications: Dict[str, datetime] = {}  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
        
    def add_location(self, name: str, latitude: float, longitude: float, 
                    radius: int, recipient_chat_id: str, message: Optional[str] = None):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
        
        Args:
            name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
            latitude (float): –®–∏—Ä–æ—Ç–∞
            longitude (float): –î–æ–ª–≥–æ—Ç–∞  
            radius (int): –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è
            recipient_chat_id (str): ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message (str): –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        location = {
            'name': name,
            'latitude': latitude,
            'longitude': longitude,
            'radius': radius,
            'recipient_chat_id': recipient_chat_id,
            'message': message or f"üöó –ü—Ä–∏–±—ã–ª(–∞) –Ω–∞ –º–µ—Å—Ç–æ: {name}",
            'last_entry': None,
            'is_inside': False
        }
        self.locations.append(location)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {name}")
        
    def calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö.
        """
        return geodesic((lat1, lon1), (lat2, lon2)).meters
        
    def check_geofences(self, current_lat: float, current_lon: float):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–µ—Å—Ç.
        """
        for location in self.locations:
            distance = self.calculate_distance(
                current_lat, current_lon,
                location['latitude'], location['longitude']
            )
            
            is_inside_now = distance <= location['radius']
            was_inside = location['is_inside']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥ –≤ –∑–æ–Ω—É (–ø—Ä–∏–±—ã—Ç–∏–µ)
            if is_inside_now and not was_inside:
                self._handle_arrival(location, current_lat, current_lon)
                location['is_inside'] = True
                location['last_entry'] = datetime.now()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥ –∏–∑ –∑–æ–Ω—ã
            elif not is_inside_now and was_inside:
                location['is_inside'] = False
                logger.info(f"–ü–æ–∫–∏–Ω—É–ª –º–µ—Å—Ç–æ: {location['name']}")
                
    def _handle_arrival(self, location: Dict, lat: float, lon: float):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–±—ã—Ç–∏–µ –Ω–∞ –º–µ—Å—Ç–æ.
        """
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∏–Ω–∏–º—É–º 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏)
        location_key = f"{location['name']}_{location['recipient_chat_id']}"
        last_notification = self.last_notifications.get(location_key)
        
        if last_notification:
            time_diff = (datetime.now() - last_notification).total_seconds()
            if time_diff < 300:  # 5 –º–∏–Ω—É—Ç
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {location['name']} (—Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)")
                return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (UTC+3)
        moscow_time = datetime.now() + timedelta(hours=3)
        arrival_time = moscow_time.strftime("%H:%M")
        message = f"{location['message']}\n‚è∞ –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: {arrival_time}\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}"
        
        asyncio.run(self._send_arrival_notification(location['recipient_chat_id'], message))
        self.last_notifications[location_key] = datetime.now()
        
    async def _send_arrival_notification(self, chat_id: str, message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏.
        """
        try:
            await self.bot.send_message(chat_id=chat_id, text=message)  # type: ignore
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–±—ã—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def get_location_from_ip(self) -> Tuple[float, float]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP –∞–¥—Ä–µ—Å—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ fallback –º–µ—Ç–æ–¥.
        """
        try:
            response = requests.get('http://ip-api.com/json/', timeout=10)
            data = response.json()
            if data['status'] == 'success':
                return data['lat'], data['lon']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ IP: {e}")
        return 0.0, 0.0
        
    def get_location_from_browser(self) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä (HTML5 Geolocation API).
        –¢—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.
        """
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        html_content = """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è</title>
            <meta charset="UTF-8">
        </head>
        <body>
            <h2>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏</h2>
            <div id="location"></div>
            <button onclick="getLocation()">–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</button>
            <button onclick="startTracking()">–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</button>
            <button onclick="stopTracking()">–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</button>
            
            <script>
            let watchId = null;
            
            function getLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(showPosition, showError);
                } else {
                    document.getElementById("location").innerHTML = 
                        "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º.";
                }
            }
            
            function startTracking() {
                if (navigator.geolocation) {
                    watchId = navigator.geolocation.watchPosition(
                        showPosition, showError, 
                        {enableHighAccuracy: true, timeout: 5000, maximumAge: 0}
                    );
                    document.getElementById("location").innerHTML += 
                        "<br>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ...";
                }
            }
            
            function stopTracking() {
                if (watchId !== null) {
                    navigator.geolocation.clearWatch(watchId);
                    watchId = null;
                    document.getElementById("location").innerHTML += 
                        "<br>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.";
                }
            }
            
            function showPosition(position) {
                const lat = position.coords.latitude;
                const lon = position.coords.longitude;
                const accuracy = position.coords.accuracy;
                const timestamp = new Date().toLocaleString();
                
                document.getElementById("location").innerHTML = 
                    "–®–∏—Ä–æ—Ç–∞: " + lat + "<br>" +
                    "–î–æ–ª–≥–æ—Ç–∞: " + lon + "<br>" +
                    "–¢–æ—á–Ω–æ—Å—Ç—å: " + accuracy + " –º–µ—Ç—Ä–æ–≤<br>" +
                    "–í—Ä–µ–º—è: " + timestamp + "<br>";
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                fetch('/update_location', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({
                        latitude: lat,
                        longitude: lon,
                        accuracy: accuracy,
                        timestamp: timestamp
                    })
                });
            }
            
            function showError(error) {
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        document.getElementById("location").innerHTML = 
                            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.";
                        break;
                    case error.POSITION_UNAVAILABLE:
                        document.getElementById("location").innerHTML = 
                            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.";
                        break;
                    case error.TIMEOUT:
                        document.getElementById("location").innerHTML = 
                            "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.";
                        break;
                    default:
                        document.getElementById("location").innerHTML = 
                            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.";
                        break;
                }
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            window.onload = function() {
                startTracking();
            };
            </script>
        </body>
        </html>
        """
        return html_content
        
    def simulate_movement(self, start_lat: float, start_lon: float, 
                         end_lat: float, end_lon: float, steps: int = 20):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
        """
        logger.info(f"–°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –æ—Ç ({start_lat}, {start_lon}) –¥–æ ({end_lat}, {end_lon})")
        
        lat_step = (end_lat - start_lat) / steps
        lon_step = (end_lon - start_lon) / steps
        
        for i in range(steps + 1):
            current_lat = start_lat + (lat_step * i)
            current_lon = start_lon + (lon_step * i)
            
            logger.info(f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {current_lat:.6f}, {current_lon:.6f}")
            self.update_location(current_lat, current_lon)
            
            time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            
    def update_location(self, latitude: float, longitude: float):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–µ–æ–∑–æ–Ω—ã.
        """
        moscow_time = datetime.now() + timedelta(hours=3)
        self.current_location = {
            'latitude': latitude,
            'longitude': longitude,
            'timestamp': moscow_time
        }
        
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è: {latitude:.6f}, {longitude:.6f}")
        self.check_geofences(latitude, longitude)
        
    def start_tracking(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
        """
        if self.is_tracking:
            logger.warning("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ")
            return
            
        self.is_tracking = True
        self.tracking_thread = threading.Thread(target=self._tracking_loop)
        self.tracking_thread.daemon = True
        self.tracking_thread.start()
        logger.info("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–æ")
        
    def stop_tracking(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
        """
        self.is_tracking = False
        if self.tracking_thread:
            self.tracking_thread.join()
        logger.info("–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    def _tracking_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
        """
        while self.is_tracking:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∏–ª–∏ IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            lat, lon = self.get_location_from_ip()
            if lat and lon:
                self.update_location(lat, lon)
            
            time.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
    def load_locations_from_file(self, filename: str):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞.
        """
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
                for loc_data in data['locations']:
                    self.add_location(
                        name=loc_data['name'],
                        latitude=loc_data['latitude'],
                        longitude=loc_data['longitude'],
                        radius=loc_data['radius'],
                        recipient_chat_id=loc_data['recipient_chat_id'],
                        message=loc_data.get('message')
                    )
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data['locations'])} –º–µ—Å—Ç –∏–∑ {filename}")
        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON —Ñ–∞–π–ª–∞ {filename}")
            
    async def send_current_location(self, chat_id: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤ —á–∞—Ç.
        """
        if self.current_location:
            moscow_time = self.current_location['timestamp']
            message = (f"üìç –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n"
                      f"–®–∏—Ä–æ—Ç–∞: {self.current_location['latitude']:.6f}\n"
                      f"–î–æ–ª–≥–æ—Ç–∞: {self.current_location['longitude']:.6f}\n"
                      f"–í—Ä–µ–º—è: {moscow_time.strftime('%H:%M:%S')}")
            
            try:
                await self.bot.send_location(  # type: ignore
                    chat_id=chat_id,
                    latitude=self.current_location['latitude'],
                    longitude=self.current_location['longitude']
                )
                await self.bot.send_message(chat_id=chat_id, text=message)  # type: ignore
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        else:
            try:
                await self.bot.send_message(chat_id=chat_id, text="‚ùå –¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # type: ignore
            except TelegramError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    BOT_TOKEN = "7824059826:AAEQx8WETTaAE4iU-tC58fT9ODkotjo-Enc"
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å YOUR_BOT_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!")
        exit()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    geo_bot = GeoLocationBot(BOT_TOKEN)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    geo_bot.add_location(
        name="–î–æ–º",
        latitude=55.7558,  # –ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å (–ø—Ä–∏–º–µ—Ä)
        longitude=37.6176,
        radius=100,  # 100 –º–µ—Ç—Ä–æ–≤
        recipient_chat_id="@your_recipient",
        message="üè† –Ø –¥–æ–º–∞! –ü—Ä–∏–±—ã–ª(–∞) –±–ª–∞–≥–æ–ø–æ–ª—É—á–Ω–æ."
    )
    
    geo_bot.add_location(
        name="–û—Ñ–∏—Å",
        latitude=55.7539,
        longitude=37.6208,
        radius=50,
        recipient_chat_id="@your_recipient",
        message="üè¢ –ü—Ä–∏–±—ã–ª(–∞) –≤ –æ—Ñ–∏—Å, –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É!"
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
    geo_bot.start_tracking()
    
    print("ü§ñ –ë–æ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        geo_bot.simulate_movement(
            start_lat=55.7500, start_lon=37.6150,  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            end_lat=55.7558, end_lon=37.6176,      # –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (–¥–æ–º)
            steps=10
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            time.sleep(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        geo_bot.stop_tracking() 